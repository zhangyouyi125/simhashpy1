微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000 Vol.19 No.3 P.35-37



一种改进的代理技术
何韶军　王清贤　罗军勇
　　摘　要：代理技术的分类及各自的优缺点,在综合现有二种主要代理技术的基础上,探讨了一种改进的代理技术的实现方案。
　　关键词：代理技术 回路级代理 应用级代理
　　飞速发展的Internet给网络带来了安全问题。如果系统中的每1台主机都能自由访问Internet,则系统是不安全的;如果所有主机都不能访问Internet,当然就不会有安全方面的隐患,但与其连接也就毫无意义了。采用该方法时,所提交的数据不受长度限制。代理服务器的主要任务是判断从客户端来的请求,决定哪些请求允许传送而哪些应被拒绝。当一个请求被允许时,代理服务器将该请求转交给真实的服务器并将答复转交客户。对客户来说,与代理服务器交谈就好像与真实服务器交谈一样;而对真实服务器来说,它是与代理主机交谈,而且它并不了解客户的真实所在。
　　目前,由于代理服务器的实用性和安全性而得到广泛的应用。然而长期以来,人们一直苦于使用安全代理软件所带来的服务速度减慢、用户使用不方便等等问题。例如:
　　^表示在目的字符串的开始处进行匹配
　　$表示在目的字符串的结尾处进行匹配
　　\b表示匹配单词的边界
　　\B表示匹配非单词的边界
　　例3:匹配运算
　　/^we have lettuce|cabbage|potatoes for you$/
　　将匹配:
　　we have lettuce
　　we have lettuce……
　　cabbage
　　……cabbage……
　　potatoes for you
　　……potatoes for you
　　例4:匹配运算
　　/^we have （lettuce|cabbage|potatoes） for you$/
　　将匹配
　　we have lettuce for you
　　we have cabbage for you
　　we have potatoes for you
1.4 字符类
　　可使用方括号“[]”在正则表达式中创建特定的字符类;出现在字符类中的“-”表示范围,而出现在字符类中的“^”表示非的含义。
1 普通代理技术的分类与比较
　　在网络中,一些服务很容易或自动提供代理,对于这些服务可以通过配置来实现代理,但对于大多数服务来说,代理服务要求有合适的代理软件。利用正则表达式可以在文本行的开头或结尾处查找给定的字符串,也可以查找出现给定次数的字符串。代理软件的制作者在充分了解用户需求、用户与代理主机通信过程的基础上制作出客户端软件,用户再使用这种定制的软件与代理主机通信。这种方法存在以下一些问题:第一,订制的客户软件一般只适用于特殊的平台,如果定制软件的平台不适合某些用户,是一件很麻烦的事;第二,大多数用户不希望改动自己已经习惯了的软件。有时,可以修改已有的客户程序来支持代理服务器,可这不仅需要有客户程序的源程序及重新编译的能力,而且需要每一位用户的配合,所以这种修改一般是难以真正实行的。也有一些例外情况,如WWW的客户程序Mosaic在设计开始时就考虑了代理问题,它支持各种类型的代理（特别是SOCKS和CERN HTTP守护程序）,但这类服务大都是在防火墙和代理系统普及之后新出现的,一些古老但广泛应用的服务,如FTP、TELNET等却做不到这一点。
　　@NameValuePairs=split（/&/,$QueryString）; #假设数
　　　　　　　据已在$QueryString中
　　for （$n=0;$NameValuePairs$n;$n++）
　　｛
　　（$Name,$Value）=split（/=/,$NameValuePairs$n）;
　　$Value=-s/\+/ /g;
　　$Value=-s/%（..） /pack（″C″,hex（$1）） /eg;
　　if （$Value=－/［;<>&\＇\|］ /） #查找是否有非法的;
　　　　　　　、<、>、&、、′或|字符
　　　｛
　　　　print ″Illegal entry\n″;
　　　　exit;
　　　｝
　　$InfoArray［$n］=$Value; #将解码后的合法数据存放
　　　　　　　　　在@InfoArray数组中
　　｝
3.3 解读日志文件的Perl程序
　　Web服务器的日志文件中包含了丰富的信息,可以按照自己的需要充分加以利用。
　　2.定制客户过程进行代理。这种代理软件允许用户使用原有的客户软件,但它要求用户与服务器通信时遵守定制的过程。用户一般应首先与代理主机建立连接,然后再向代理主机提出请求真正服务器的服务,否则他的合法请求将被拒绝。
　　140.172.165.58-admin［27/Apr/1997:20:47:43-0700］
　　″GET session\adminlogin HTTP/1.0″ 200 0 160
　　记录中每一项的含义如下:
　　客户端的IP地址（140.172.165.58）
　　用户名（admin）
　　访问请求的日期和时间（27/Apr/1997:20:47:43）
　　时区（-0700）
　　请求的方法（GET）
　　操作的对象（session\adminlogin）
　　HTTP协议的版本（HTTP/1.0）
　　Web服务器的状态码（200）
　　Windows NT的状态码（0）
　　传输信息的字节数（160）
　　则解读该日志文件的Perl程序如下:
　　open （LOG,$LogFile） || #假设$LogFile中已经包含了
　　日志文件名
　　die ″Can′t open $LogFile\n″;
　　while （<LOG>）
　　｛
　　$LogLine=$_;
　　$LogLine=-s/\［|\］ | \″//g;#剔除记录中的、和″字符
　　chop （$LogLine）;#剔除行尾的换行符\n
　　（$ClientIP,$Dummy,$UserName,$DateTime,$Time-
　　Zone,$Operation,
　　$Target,$HTTPVers,$SrvrStatus,$NTStatus,
　　$BytesXfer）=split（/［］+/,$LogLine）;#分离出记录
　　　　　　　　　　　　的每1项
　　print ″Client\′s IP address=$ClientIP\n″;
　　print ″Name of user on client=$UserName\n″;
　　print ″Date and time of request=$DateTime\n″;
　　print ″Operation requested=$Operation\n″;
　　print ″Operation target=$Target\n″;
　　Print ″Server returned status of $SrvrStatus\n″;
　　print ″Windows NT returned status code $NTStatus\n″;
　　print ″Transferred $BytesXfer bytes of data\n\n″;
　　｝
　　close （LOG）;
3.4 检索ASCII数据库的Perl程序
　　在Web上非常流行的小文本数据库对于许多中小型任务来说非常有用,只要知道了数据库所采用的格式,就可以方便地对其进行检索。比如,一用户想从匿名FTP服务器（ftp.getfile.net）上下载文件,使用定制客户过程的FTP代理服务器,要求用户:（1）与代理服务器连接而不是与匿名FTP服务器直接连接。不同日志文件的信息格式各不相同,下面给出Sambar服务器日志记录的格式。例如: 
　　GATEWAY_INTERFACE 指明服务器所遵循的CGI版本
　　SERVER_SOFTWARE 指明服务器的名字和版本
　　HTTP_ACCEPT 指明客户机浏览器可接受的MIME类
　　　　　　　　型列表
　　HTTP_USER_AGENT 指明客户机浏览器软件的名字
　　　　　　　　　　和版本
　　REQUEST_METHOD 指明传递数据所采用的CGI方法
　　QUERY_STRING 采用GET方法时存放传递给CGI
　　　　　　　　　程序的数据
　　CONTENT_LENGTH 采用POST方法时指明通过标准
　　　　　　　　　　输入所传递的数据长度
2.4 MIME类型和头部信息
　　MIME（Multipurpose Internet Mail Extension）标准规定了Web服务器和浏览器以及Web服务器和CGI程序之间进行通信的规则。
1.2 二种普通代理技术的比较
　　上述第一种代理软件使用回路级代理技术实现,第二种代理软件使用应用级代理技术实现。回路级代理不需要理解应用协议中的命令,只对数据包的头信息进行过滤。事实上,回路级代理就像一种包过滤,它无法控制因代理而产生的事件,虽为用户和服务器提供连接但不能判断经过的命令是否安全或超出了服务的范围,而且很容易受到IP欺骗。
2.3 环境变量
　　环境变量是由Web服务器激活CGI程序时所设置的与系统有关的变量（在Perl中,可通过关联数组%ENV获取所有的环境变量及其相应的值）,Web服务器与CGI程序交换信息的协作方式是通过环境变量来实现的。应用级代理在应用层实现,它能理解应用协议中的命令,能提供更好的日志和访问控制功能,也很容易做到智能化（这对于回路级代理来说是很困难的）,但它需要针对不同的协议编制不同的代理软件。
　　目前的代理软件大多使用上述所说的定制客户过程应用级代理技术实现,它存在以下几个重要的不足:
　　1.代理服务的速度落后于非代理服务。
　　2.POST
　　使用该方法时,Web服务器通过标准输入（STDIN）向CGI程序传递数据,CGI程序通过标准输入（STDIN）获取数据。
　　2.不同的协议可能要求配置不同的代理服务器,配置的好坏将影响代理的正常工作,这无论如何对用户来说都是一种额外的负担。
　　3.普通的代理软件总是要求用户改变自己的使用习惯,造成用户使用上的不方便。
2 改进的代理技术
　　从以上分析可以看到,目前的代理技术还存在许多亟待改进的地方,但更重要的是回路级代理技术与应用级代理技术之间的优缺点是可以互补的。在此,探讨了1种改进的代理技术,它综合了上述2种代理技术,可以较好解决普通代理软件的某些问题。采用该方法时,所提交的数据不受长度限制。该主机首先要禁止IP级转发的功能,也不允许普通用户的直接登录。取消掉一般操作系统上的账户管理,代之以一种简单的OTP（One-time Password）系统来进行身份验证。这种1次一密身份验证系统不仅安全性好,而且制作1个仅供自己使用的OTP系统也不难。
　　@NameValuePairs=split（/&/,$QueryString）; #假设数
　　　　　　　据已在$QueryString中
　　for （$n=0;$NameValuePairs$n;$n++）
　　｛
　　（$Name,$Value）=split（/=/,$NameValuePairs$n）;
　　$Value=-s/\+/ /g;
　　$Value=-s/%（..） /pack（″C″,hex（$1）） /eg;
　　if （$Value=－/［;<>&\＇\|］ /） #查找是否有非法的;
　　　　　　　、<、>、&、、′或|字符
　　　｛
　　　　print ″Illegal entry\n″;
　　　　exit;
　　　｝
　　$InfoArray［$n］=$Value; #将解码后的合法数据存放
　　　　　　　　　在@InfoArray数组中
　　｝
3.3 解读日志文件的Perl程序
　　Web服务器的日志文件中包含了丰富的信息,可以按照自己的需要充分加以利用。为使所有进出网络的数据包都通过代理主机,可以这样配置:（1）本地主机的默认网关设置为代理主机与交换机相连网卡的IP地址,这样本地主机欲与外部主机通信必须通过代理。（2）路由器的路由表加入1条关键的路由信息,使得路由器将目的地址是本地局域网的包交给代理主机,这样外部主机欲与本地主机通信也必须通过代理。采用这种结构主要是出于安全方面的考虑,攻击者即使攻破了路由器,他还必须通过代理主机。如果没有路由器也可以,但代理主机应实现对外的路由选择。另外,采用这种结构,很容易将代理主机做成集过滤、代理、网络攻击检测和告警等功能于一体的堡垒主机。
　　整个代理软件分二部分来实现:第1部分类似于包过滤,所有的数据包首先被过滤,代理根据数据包的目的IP地址来区分是外网请求还是本地主机的请求（这样就解决了外部网络主机冒充本地主机发送数据以获取更高安全级别进行IP欺骗的问题）。如果目的IP地址是外部网络地址,即可马上转发。如果目的IP地址是本地主机地址,则应该根据目的端口号交软件的第2部分――相应的应用层代理守护进程对客户请求进行过滤,从而实现对外部请求的“安全强化”。
　　软件的第1部分实际上是一个回路级代理,它是所有协议公用的代理。在Linux中可以这样实现:将代理主机的2块网卡都设置成混杂模式（普通模式下,网卡会丢弃目的IP地址不是自己的数据包,而在混杂模式下,网卡能接收目的地址不是本机的数据包）,要做到这一点,只须用ifget（）获取网络的参数后,将ifr_flags的IFF_PROMISC位置上即可。然后建1个SOCK_PACKET套接字接收经过2块网卡的所有数据包,由SOCK_PACKET套接字接收的数据包的格式如图1所示。“名”和“值”用“=”加以连接,构成“名=值”对,“名=值”对按表单元素的先后次序排列。这一块的基本程序流程如图2所示。

图2 回路级代理部分的程序流程图
　　对于上述流程需要解释的是:为什么ip_offset不等于0的数据包可以不经过滤就可转发,那些本该被拒绝的客户请求会不会因这种转发而到达本地主机?其实,1台主机如果接收不到偏移量为0的数据包时,它就会把偏移量大于0的数据包扔掉。所以,不合理请求是不会到达本地主机应用层的。
2.2 URL编码
　　在用户数据发往Web服务之前,浏览器将对数据信息进行专门的处理,其中可能会导致CGI程序出错的字符被替换,并且将数据组织得便于CGI程序处理,这就是所谓的URL编码。这一部分在实现过程中的其它一些细节,如数据的差错控制等问题,在这里就不介绍了。当提交的数据不太长（小于1024个字符）时,可采用该方法。这一部分应该是针对不同的服务编写不同的代理守护进程。每个代理守护进程的工作首先是对外部网络的客户请求进行过滤以决定哪些数据可被转发哪些被拒绝,当然,用户应该可以按照自己的意愿配置其允许或拒绝的服务请求;其次,代理守护进程的重要任务就是示警。例如,某个FTP请求是诸如“get/etc/passwd”之类的命令,则代理守护进程能及时通知网络管理员,并使回路级代理马上禁止该用户的所有数据。这一部分的实现细节从略。例如:
　　［A-Za-z］表示由全部大写和小写英文字母所构成的类
　　［aeiou］表示由元音字母所构成的类
　　［^0-9］表示由非数字字符所构成的类
1.5 类缩写
　　某些特定的字符类可以采用缩写形式表示。该部分可以与包过滤做在一起,它实现的好坏将在很大程度上影响代理服务器运行的速度。
　　如果存在匹配,即如果在目的字符串中存在如正则表达式所描述的字符串模式,则返回真,否则返回假。
对于普通代理技术,其改进后的优点:
　　1.提高了速度。
　　1.GET方式下的解码程序
　　$QueryString=$ENV（′QUERY_STRING′;#从%ENV
　　　　　中获取QUERY_STRING中的数据
　　@NameValuePairs=split（/&/,$QueryString）;#按″名=
　　　　　值″对分离构造1个数组
　　foreach $NameValue （@NameValuePairs）
　　　｛
　　　　（$Name,$Value）=split（/=/,$NameValue）;#进一
　　　　　步把″名″和″值″分离
　　　　$Value=－s/\+/ /g;
　　　　$Value=－s/%（..）/pack（″C″,hex（$1））/eg;#恢复
　　　　　　　编码成″%##”的字符
#或$Value=－s/%（［\dA-Fa-f］［\dA-Fa-f］） /pack（″C″,hex
　　　　　（$1））/eg;
　　print ″Name=$Name,Value=$Value\n″;
　　｝
　　2.POST方式下的解码程序
　　$DataLen=$ENV′CONTENT_LENGTH′;#从%ENV
　　　　　　　中获取CONTENT_LENGTH的值
　　read （STDIN,$QueryString,$DataLen）;#从标准输入中
　　　　　　　读入全部数据
　　@NameValuePairs=split（/&/,$QueryString）;
　　for （$n=0;$ NameValuePairs $n;$n++）
　　　｛
　　　（$Name,$Value）=split（/=/,$NameValuePairs$n）;
　　　　$Value=-s/\+/ /g;
　　　　$Value=-s/%（..） /pack（″C″,hex（$1）） /eg;
　　　　$InfoArray ［$n］=$Value; #将解码后的数据存放在
　　　　　　　　　　@InfoArray数组中
　　｝
3.2 解决表单安全性问题的Perl程序
　　如果Perl脚本程序随意接收表单中的任何数据,则有可能危害到系统的安全性。如果回路级代理的某些技术问题处理得好,将会极大提高服务响应的速度。
　　2.对于所有用户来说,他可以使用原有的客户程序而不需做任何改变,这大大方便了用户。尤其是本地用户,他们使用起来就如同没有经过代理一样,只是速度上有所不同。
　　3.没有了传统的网络账户管理,因而保证了代理主机的安全性。
　　4.应用代理部分还可以随时升级为1个智能代理系统。
　　改进后的不足:
　　1.需大规模修改源程序及重新编译。
　　2.速度比没有使用代理的系统仍然较慢。
　　3.对协议本身存在的安全问题未能加以弥补。如X　window中就存在许多不安全的操作,但当禁止这些操作后,X window却不能正常工作了。
　　4.不能对内部网络加以防范。这就严格要求整个本地网只有1个出口,即代理主机出口,如果多于1个出口,则整个网络就暴露在攻击之下。
3 讨 论
　　上述代理在普通代理技术的基础上做了一些综合改进,但实际效果距理想的代理服务还有一定差距。理想的代理服务器,应该是速度快、用户使用起来就如同没有经过代理服务器一样,同时又是绝对安全的。例如:
　　$target_string=-/regular_expression/replacement_string/;
　　或/regular_expression/replacement_string/;
　　修饰符/e可以用以表示替换字符串是1个表达式,应该使用其值进行替换。这种“透明代理”不大规模修改源程序,不允许用户直接在防火墙中登录,允许使用“现有的”网络应用程序,并允许这些应用程序直接通过防火墙工作。另外,NEC Technologies的PrivateNet Secure Firewall Server中的代理技术,它在实现上也有很多独到之处。这些代理都对现有代理技术做了不少改进,很值得借鉴。
何韶军（郑州信息工程大学信息安全学院计算机系450002）
王清贤（郑州信息工程大学信息安全学院计算机系450002）
罗军勇（郑州信息工程大学信息安全学院计算机系450002）
参考文献
1，Cheswick W R,Bellovin S M.Firewalls and Internet Security.ADDISON-WESLEY PUBLISHING COMPA-NY,1994
2，Kyas O.Internet Security.International Thomson Com-puter Press,1997
3，Fuller S,Pagan K著.董春,张红雨译.Intranet防火墙.北京:电子工业出版社,1997
4，刘渊,乐红兵.因特网防火墙技术.北京:机械工业出版社,1998
5，Stevens W.R著.UNIX网络编程:卷1连网的API:套接字与XTI.北京:清华大学出版社,1998
6，Comer D.E著.林瑶,蒋惠译.用TCP/IP进行网际互连第1卷:原理、协议和体系结构.北京:电子工业出版社,1998
收稿日期：1999-11-19
