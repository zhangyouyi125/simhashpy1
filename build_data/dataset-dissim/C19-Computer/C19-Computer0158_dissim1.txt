微型电脑应用
MICROCOMPUTER APPLICATIONS
2000　Vol.16　No.1　P.62-63



处理消息环中消息的一种安全方法
刘华蓥　韩建民　王桂华
摘　要：本文阐述了Windows下消息映射函数中检测并处理消息的一种安全方法，并给出了程序实例。
关键词：消息　消息环　消息映射机制　GetMessage PeekMessage DispatchMessage▲
一、消息、消息环和消息映射机制
　　Windows 中应用程序和应用程序之间、应用程序和用户之间的通信是靠消息来实现的。消息可以由用户发出，如移动鼠标；也可由系统发出，如建立一个窗口。
　　目前许多CAD专业软件都设有特定的图层，如墙线、窗、门、柱子等等，你画的每一个物体都要画在软件其特置的图层上，这样程序才能对这些物体做出正确的判断，才可以对这些 物体进行编辑，并进一步在这些特定图层的基础上生成正确的三维图、剖面图、立面图等等。消息环的结构是一个队列，即“先进先出”。特别是在photoshop5.0中更是增加“文字图层”这一功能，在“文字图层”中我们可以对文字做许多特殊效果的处理，利用文字图层中Effects(制造效果)功能，我们可以将在以往旧版的photoshop中需要许多步骤才能完成的文字特殊效果如文字阴影一步就“搞定”。
　　消息映射机制是windows编程的基本机制之一，它的优点是编程的结构化；但它也有缺点，就是在处理一个消息的过程中不能检测是否有其它的消息。
二、图层赋予图形特定的含义
　　CAD给以往的手工设计带来了巨大的变革。要解决此类问题，必须直接对消息环进行操作。
　　“图层”是CAD中性质相近、相同或者逻辑意义上相关的图形对象的集合。
　　这时，如果我们利用“图层”功能，即在建模时分图层建立实体(不同的实体建立在不同的图层上)，把要贴同一种材料的实体再放到同一图层上，那么我们只需按图层贴上材料，该图层上的所有实体就一次性统统都贴上材料了，尤其是内容复杂、实体众多、使用材料量大的建筑物(或室内设计)效果图，更能充分发挥图层的作用，更能体现图层易编辑、易修改、易管理等许多的优越性。
　　由于在消息环中可能没有消息，使用GetMessage进程会进入循环等待消息的状态。所以用PeekMessage比较安全，PeekMessage用法如下：
　　BOOL PeekMessage (1pMsg, hWnd, wMsgfilterMin, wMsgFilterMas, wRemoveMsg);
　　该函数的功能是检测发送给hWnd窗口并且值在wRsgFilterMin和wMsgFilterMax之间的消息，如有，则将消息放入lpMsg指向的MSG结构中。
　　至于对效果图作最后润色，最常用的软件photoshop也把图层作为一个特色功能，如我们对一幅效果图作修改时，常常先在层中复制它，然后在这复制层中作各种修改，如果修改的不满意，只要简单地将一复制层拖到垃圾桶中即可，而对原图形丝毫无损，而许多特殊效果，也制作在效果层中，而不损坏原图，这样修改也方便，更不会影响别的层上的图形。
　　如指定消息没有找到，PeekMessage返回0，否则返回非0值。特别是在photoshop5.0中更是增加“文字图层”这一功能，在“文字图层”中我们可以对文字做许多特殊效果的处理，利用文字图层中Effects(制造效果)功能，我们可以将在以往旧版的photoshop中需要许多步骤才能完成的文字特殊效果如文字阴影一步就“搞定”。它是各种CAD绘图软件进行设计的基本保证，正确、合理地使用图层，是发挥如AutoCADR14、Photoshop、lightscape、天正等CAD软件巨大功能的重要标志，也只有正确的使用了图层，才能将各类绘图软件的强大功能发挥得淋漓尽致。
　　2.发送消息
　　发送消息的函数有三个：PostMessage, SendMessage和DispatchMessage。前两个函数是把消息放入消息环中，而DispatchMessage则直接将消息发送到应该处理此消息的窗口，并且等待将这个消息处理完才返回，所以应该用DispatchMessage来发送消息。
三、处理消息的安全方法
　　为了安全检测和处理消息环中的消息，需注意以下几点：
　　首先，在消息环中可能有很多消息，所以检测消息时应一直检测下去直到没有消息为止。
　　其次，如果在处理本消息过程中又做了关闭本程序窗口的操作，若不滤掉关闭窗口的消息直接发送出去，而DispatchMessage语句本身又不在函数的末尾，则会导致内存渗漏，窗口关闭了，但程序还在内存中，且无法再对它进行操作。要想使绘图方便快捷，最佳的解决途径就是使用“图层”。
　　第三，如果再次在消息环中检测到本消息，并且发送了出去，则会导致二次进入本程序体，从而导致混乱。解决办法是设置一个布尔变量，若该布尔变量为真则表示正在处理本消息。在函数首对此布尔变量进行检测，如为真则直接返回；否则设置为真，处理此消息后在函数尾将它设置为假。
四、程序实例
　　下面举例说明一下，如何在应用程序中安全地检测、处理和发送消息。
　　假设正在处理的消息是ID―EDIT―UNDO, 其中TranslateAccelerator函数的功能是将 加速键翻译成菜单命令并直接将此消息发送到窗口，TranslateMessage函数的功能是将虚拟键消息翻译成字符消息，因与本文无关，不做过多介绍。
　　void D1View::OnEditUndo0
{//IsEditUndo 在头文件中的C1View类中定义为BOOL型
//如IsEditUndo为真，表示正在处理ID_EDIT_UNDO,则不执行任何操作，直接返回
if(IsEditUndo)return;
//将IsEditUndo设置为真，表示正在处理ID_EDIT_UNDO
IsEditUndo=TRUE；
MSG msg1
MSG* msg=&msg1;
BOOL bb,bbb;
　　　……
do{ bb=::PeekMessage(msg,NULL,O,O,PM_REMOVE);
　　bbb=FALSE;
　　//接收到此消息证明用户选择了系统菜单的关闭窗口的命令
if(msgmessage==WM_SYSCOMMAND)&&(msgwParm==SC_CLOSE)
{bbb=TRUE;goto eee;}
//接收到此消息证明用户选择了File/Exit命令
else if ((msgmessage==WM_COMMAND)&&(msgwParam==ID_APP_EXIT))
{bbb=TRUE;goto eee;}
//接收到此消息证明用户在窗口的右上角的叉号上单击了一下
else if ((msgmessage==WM_NCLBUTTONDOWN)&&(msgwParam==HTCLOSE))
{bbb=TRUE;goto eee;}
else
{if(::TranslateAccelerator(m_hWnd,AccelTable,msg)==0)
　　{　::TranslateMessage(msg);
　　　 ::DispatchMessage(msg);}}}while(bb);
　　　……
//将IsEditUndo设置为假，表示已处理完ID_EDIT_UND
IsEditUndo=FALSE;
eee:if(bbb==TRUE)
　　{::TranslateMessage(msg);
　　 ::DispatchMessage(msg);}}
五、结束语
　　消息映射机制是Windows下应用程序的重要组成部分，本文论述了Windows下应用程序开发中对消息进行检测和处理的一种安全方法。少则上千个面，多则上万个面，还需要给它们贴上各种材料，才能做最后的渲染。■
作者单位：刘华蓥(大庆石油学院计算机系 安达 151400)
收稿日期：1999-07-12
