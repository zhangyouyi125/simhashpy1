计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



用OpenGL开发虚拟制造环境（一）
周杰韩　杜润生　吴波
　　摘　要　本文介绍了几何图形信息的数据结构、存储与显示基本原理。从应用程序角度论述Windows图形设备接口GDI的客户服务器本质及虚屏幕显示技术。在Access的Database窗口中提供了查询（Queries）、窗体（Forms）、报表（Reports）三个标签（工具）来帮助用户操纵和管理数据。
　　关键词　虚拟制造，客户/服务器，OpenGL图形库
1　计算机图形
1.1　几何图形信息的数组结构
　　图形显示是从点的显示开始的。线段是所有在它上面的点的集合。几何学上的点是没有大小的。线段的显示实际上用有限个点来产生图形，因而每个点都有一定的大小。此时的点不再是真正的几何点，而是像素（图像基本元素）。SQL是一种标准的结构化查询语言，Oracle通过它实现了与诸多数据库的兼容性。显示屏如同由像素组成的二维数组。每个像素对应数组的一个元素。每个像素有一个地址，对应数组的下标。通过Access的链接和导入功能，可以将Dbase、FoxPro、Paradox、Lotus、Excel等数据库以及Html文件，文本文件等链接或导入为Access可用的数据库。设定显示屏上每一像素的亮度可以产生一幅图像。
1.2　几何图形信息的存储

图1　帧缓冲器与图像显示
　　一幅图像是由有限数量的像素组成。打开一个Access应用程序，我们可以见到Database窗口上有六个标签，分别为：表格（Tables）、查询（Queries）、窗体（Forms）、报表（Reports）、宏（Macros）和程序模块（Modules），这是Access提供给开发者管理使用数据的六种工具。为了显示每一点的亮暗，每一像素至少需要1比特的亮度信息，其存储空间至少需要100万/8个字节。Oracle Developer/2000的设计工具箱中可用的设计工具较少。帧缓冲器是指显视卡上的显视存储器。
1.3　几何图形信息的显示
　　光栅显示是用得较多的图形显示方法。光栅显示是利用扫描发生器每秒钟扫描帧缓冲器30到60次，将代表像素亮度的信息一行一行取出，然后送往显示器。帧缓冲器的存取地址与光栅扫描信号同步地产生。帧缓冲器的内容用来输出视屏信号控制阴极射线管电子束强度。 
作者简介：刘广钟　副教授。帧缓冲器地址用来输出水平与垂直偏转信号控制阴极射线管电子束的偏转。电子束的偏转决定像素的屏幕坐标（x，y）。每一次扫描帧缓冲器都使屏幕得到刷新。由于光栅显示系统利用直接存储器存取（DMA）硬件不断地扫描帧缓冲器，并把图形显示出来，因而图像生成不受中央处理器（CPU）控制。
1.4　显示设备驱动程序与应用程序的可移植性
　　应用中，应用程序编写的几何图形信息不是直接改变帧缓冲器的内容而是作为标准显示指令存入显示文件中，然后利用显示设备驱动程序解释显示指令以产生需要的图象。显示文件驱动程序形成图形应用程序与显示设备之间的接口。若应用程序可以产生标准显示文件代码，那么每个带有驱动程序的具体显示设备就能正确地运行应用程序，从而提高了应用程序的可移植性。显示设备与显示驱动程序通常由硬件商一起提供。
1.5　应用程序图形显示步骤
　　帧缓冲器数组直接与显示屏内容相对应，并且以亮度编码的形式保存了被显示的图形。图形应用程序的实现步骤包括：首先由初始化程序分配显示设备和存储器。其次应用程序把图形信息写入帧缓冲器，由帧缓冲器直接传送到显示设备。空帧缓冲器对应空白的显示屏。最后由结束图形程序释放显示设备包括重新分配存储器。
2　Windows环境下的图形显示
2.1　Windows环境下的虚屏显示
　　在MS-DOS应用中，图形和文本程序不仅常常直接写到视屏上，而且这样做时经常绕过BIOS屏幕调用。然而在Windows环境下避免了这种状况。首先在多任务Windows环境下物理视屏是一个共享资源。所有应用程序的显示活动，都必须通过Windows API函数来操作。Oracle的“前端”和“后端”具有较大的独立性。其次在Windows环境下屏幕操作根本不写到物理视屏上，即使使用API函数时也是这样。应用程序请求写文本或图形的操作，都是将信息写到虚拟屏幕也称为设备环境DC。Access已经提供了近50个宏供用户使用，用户还可以自己编写宏来实现所需的操作。
　　为打开的数据库设置密码是一种最简单的方法。在MS-DOS中，应用程序负责为所有输出设备编程。Windows应用程序不负责对输出设备编程。图形用户接口GDI为应用程序提供了一套独立于设备的标准绘图指令集。对于添加的新硬件，由硬件制造商提供驱动程序，而应用程序则通过GDI创建并维护设备环境（DC）。“前端”开发工具构造的应用程序通过与数据库联接（Connect）来操纵“后端”的数据。Access已经提供了近50个宏供用户使用，用户还可以自己编写宏来实现所需的操作。这种模式称为GDI的客户/服务器模式如图2。GDI的客户/服务器模式有效地将应用程序彼此分离，从而提高了Windows 环境的安全特性。而且任何访问输出设备的函数都留在GDI的服务器方，从而保证了入侵应用程序不能直接访问到其它应用程序的屏幕数据。

图2
3　OpenGL应用程序的图形支持
3.1　OpenGL图形软件在应用中的地位
　　OpenGL是SGI公司的IRIS GL图形工作站的分支。近年来，作为工业标准图形程序库，在CAD/CAM等需要高级的三维对象可视化和图形绘制领域得到广泛应用。OpenGL为应用程序员提供了程序和图形输入输出设备之间的功能接口，定义了一个独立于语言的图形核心系统。Microsoft Access 提供两种默认的组：管理员（称为管理员组）和用户（称为用户组），但也可定义其它的组。OpenGL在图形应用中的地位如图3所示。Access可以自动实现上述异种数据库向Access数据库的转换。

图3
3.2　OpenGL客户/服务器图形显示方式
　　OpenGL通过客户/服务器方式实现图形显示。应用程序作为客户工作并调用OpenGL API。OpenGL客户模块同OpenGL服务模块通信并发出应用程序的OpenGL命令。OpenGL服务模块调用Win32设备驱动接口来使用驱动程序。一个OpenGL服务程序往往同时维护几个OpenGL环境。OpenGL环境是OpenGL客户 所处的OpenGL状态。OpenGL环境又叫着色环境，是OpenGL与Windows系统之间的桥梁。所有的OpenGL调用都通过着色环境来完成。OpenGL着色环境与设备环境有相同的像素格式。在为一个设备环境设置好了像素格式后就可以产生一个与之接近的着色环境。在这里，用户既可以执行一条一条的SQL命令，也可以编写一段SQL程序来操纵数据。其逻辑模式如图4。

图4
　　用OpenGL去着色一个Windows窗口的典型操作过程如下：
　　. 建立正确的窗口格式；
　　. 建立像素格式；
　　. 创建设备环境；
　　. 创建一个着色环境；
　　. 将着色环境设为一个线程的当前着色环境；
　　. 线程进行有关OpenGL的初始化；
　　. 线程调用OpenGL着色函数；
　　. 当OpenGL处理结束后，将着色环境设为非当前使用的（断开与着色环境的联系）；
　　. 释放着色环境与设备环境。在Access的Database窗口中提供了查询（Queries）、窗体（Forms）、报表（Reports）三个标签（工具）来帮助用户操纵和管理数据。从总体上来说，Oracle Developer/2000比Access要稍逊一筹。研究方向:虚拟制造、系统仿真、面向对象技术。
作者单位：华中理工大学机械科学与工程学院　湖北.武汉(430074)
收稿日期:1999-01-27(修改稿)
