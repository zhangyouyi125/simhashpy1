计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第9期 Vol.19 No.9 1999



时间序列数据立方的存储与聚集计算
唐常杰　杨　峰　于中华　相利民　左
　　摘　要　本文讨论了从时序数建造、存储数据立方，以及聚集计算的算法，其中N23算法和扩展的EN23算法可以方便地将一个N（N>3）维数据立方转换为三维数据立方，大大降低了I/O次数，极大地提高了运行效率。
　　关键词　数据采掘，数据立方，聚集计算，时态数据
THE STORAGE AND AGGREGATION ON THE DATA
CUBE FOR TIME SERIES
Tang Changjie　Yang Feng　Yu Zhonghua　Xiang Limin　Zuo Jie
Computer Department,Sichuan University　Sichuan.Chengdu 610064
　　Abstract　This paper proposes the algorithms to build, storage and aggregate the data cube for temporal data. Among them the algorithm N23 and EN23 can convert the N dimensional data cube into a 3 dimensional data cube with low I/O cost and high performance.
　　Keywords　Data mining, Data cube, Aggregation, Temporal data
　　　　在现实生活中，有大量与时间有关的数据,称为时序数据(或时态数据)。从时序数据中发现指示(例如周期模式)具有广泛的应用前景。
1　对时序数据采掘的意义及难点
　　决策者在决策之前，常常需要从历史性数据(即时态数据)了解相关对象的规律和趋势，对未来进行预测。例如，对消费者进行分析，发现哪些人更加可能会对邮件宣传作出反应； 预测消费贷款的可能结果,预测呆帐，坏帐；预测电视台在各种节目方案下的收视率，以更好地编排节目，增加广告收入等等。这样，进程使用相同名字的管道进行通信，完成对远程调用过程表的管理。先驱者经过探索，指出多维数据立方是解决这些困难的基本数据结构之一。
　　作为OLAP(联机事务分析)的工具，多维数据立方在实现时有两种方案，即基于关系数据库的ROLAP和基于多维数据库的MOLAP。ROLAP中数据单元为元组，适合于大型的数据集，其优势在于稀疏数据在关系数据库中比在数组中存贮得更加紧密。MOLAP直接使用特殊的数据结构（如稀疏数组）来实现多维数据立方，数组的维作为坐标轴。根据一个数据单元在稀疏数组中的位置，可以推导出它在多维数据立方中的准确位置。但是，当数据比较稀疏的时候，这种方法存贮效率低。压缩技术成为需要解决的关键问题。

图1　三维数据立方
2　多维空间位置矢量与一维数组互换
　　设被处理数据对象有N维，分别记为D0,D1,……,DN-1。对每一维增加个值Sum，对象在Di 维上的值为 (di0,di1,……，diSUM)。为了方便，diSUM 表示为Di｜Di｜ 。每一个维Di 都有｜Di｜+1 个值。用矢量V（v0,v1,……，vN-1 来表明数据立方单元多维空间中的位置。一个数据立方单元的地址中至少有一个vj 等于｜Dj｜ ，其中j≥0，并且jN 。用矢量V(｜D0｜,……，｜DN-1｜） 表示的数据立方单元对应于分组Sum。
　　例1：从图1中，三维数据立方的维D0,D1,D2的大小为：｜D0｜=5,｜D1｜=4,｜D2｜=3 。di0是0，di1 是1，依次类推。i=0,1,2。数据立方单元V(5,4,3)就代表着单元V(Sum,Sum,Sum)。 地址是V(5,0,0)的数据单元保存着以下内部数据单元的和{ V(0,0,0), V(1,0,0), V(2,0,0), V(3,0,0), V(4,0,0) }。数据单元V(5,4,2)也存放着其它一些内部数据单元的和：S1={V(5,0,0), V(5,1,0), V(5,2,0), V(5,3,0)} S2={V(0,4,0), V(1,4,0), V(2,4,0), V(3,4,0), V(4,4,0)}。外部数据单元V(5,4,0)的值要由内部数据单元集合S1或者S2中的值来决定。
　　数据立方是面向查询驱动而设置的，所以维的数目直到建立数据立方的要求发出之前是未知的。它们是必须在使用远程调用的功能前，被启动的后台守护服务进程。被调用方 Server 的两个函数：① RegisterRemoteProc() 为每个需要被异地调用的过程，在调用前在本机的远程调用过程表内注册；② DelRegistration() 用于取消本机的远程调用过程表内已注册的过程。而最后一个数据单元V(5,4,3,)处于第119个位置，因为数据立方中一共有(5+1)*(4+1)*(3+1)=120个数据单元。
　　下面的算法1将数组位置转化为多维空间位置矢量，其逆向算法思路类似，限于篇幅这里略去细节，参见http//:202.115.48.10 。无论 Unix 还是 NT 系统，这种函数的功能划分是一致的。为了探索比较不同方法的效果我们集成了下列的方法，由用户在使用时选配。
3．1　将数据立方压缩在一维数组中
　　通常，OLAP数据立方中20%的数据非零。排除这些空单元是简单有效的方法，只需记录非空单元的数据及偏移量。由于稀疏矩阵必须在压缩之前就产生并且填充，所以压缩后的数组将是根据单元偏移量排序的。否则须重新排序，或消除重复单元。图 3 说明这部分程序利用面向连接的 Socket 系统调用的实现过程。 Windows NT 提供的 WinSock 借用 4BSD Unix 中套接字的概念，同时又对 Windows 的几种特点增加了扩充，它的实现与 Socket 既有共同点又有本身的特点。根据键值就可以访问多维数组中的任何一个非空单元。
3.3　分块存储
　　将数组分块，每块是一个稀疏数组,可放入内存中。分块中只有外部单元或只有内部单元。通常，外部单元远远小于内部单元，并且会比内部单元更频繁被访问。给定一个N维数据立方，分块存储的方法将它分解为比较小的块，并且将每一个块作为一个对象存储在外存中。多数分块在各个维上面有相同的大小。将每一个分块都作为数据单元来处理。
3．4　仿ROLAP存储方法
　　将压缩后的数组放在关系数据库的表中，表中包含下列字段，数据单元的偏移量，该单元在多维空间中的各个维上面的度量，第一维，第二维，…等等。每一元组是一个压缩过的数据单元。当所有的数据单元都插入到这个表中之后，它们会被建立索引，可快速地查找到指定单元。其它进程可通过系统调用 msgrcv() 从队列中读取此消息。进行聚集计算是对一个数据仓库建造数据立方的主要目的。我们希望进行聚集计算的时候消耗最少，一般要选择最小的维进行计算。其它进程可通过系统调用 msgrcv() 从队列中读取此消息。
4.1　朴质聚集算法
　　输入：　n维数组A［D0,D1,…Dn-1］，｜Di｜为第i维的长度(1<=i<=n)。 Solaris 系统的 Socket 在这样的机制下，提供了一系列系统调用，实现进程间通信。{Di0, Di1, ……,Din-2}为{D0, D1,……,Dn-1}的真子集，且{D0, D1,……,Dn-1}-{Di0,Di1,……,Dik}= {Dj}(0<=j<n)。如图 2 所示： 

图2 跨平台RPC模型
　　图 2 中 (1)-(6) ， (1′)-(6′) 和图 1 中 (1)-(6) 实现相同的功能，即 Unix 系统上的调用者通过 Client 进程既可经过 (1) 、 (2) 、 (3) 、 (4) 、 (5) 、 (6) 调用本系统内远程过程，也可经过 (1) 、 (2′) 、 (3′) 、 (4′) 、 (5′) 、 (6) 实现 Windows NT 系统上的远程过程调用。 
3 程序简介
3.1 Server 方服务程序 
　　据上所述 Server 方的 4 个主要函数实现两个功能：注册和监控 Client 方调用进程申请。
}
　　//保存计算结果到表示B的B-树中。
　　for (d［j-1］=0; d［j-1］<D［j-1］; d［j-1］++)
　　　or (d［1］=0; d［1］<D［1］; d［1］++)
　　　for (d［0］=0; d［0］<D［0］; d［0］++)
　　　　{根据key的定义在B中计算新的key;
　　　　将{key，M［d［0］］［d［1］］…［d［j-1］］}二元组
　　　　插入到表示B的B-树中。
　　}}
　　本算法将N维数据立方聚集为N-1维数据立方。 Unix 和 NT 之间的跨平台不带参数的远程过程调用已经在包括 SUN 工作站 ( 以 Solaris 为操作系统 ) 和 PC 机 ( 以 Windows NT 为操作系统 ) 的网络环境上实现。实用中，人们往往需要将N维数据立方（N3 ）聚集为三维数据立方，以便观察数据。因此，我们提出了如下的改进算法。
4.2　数据立方聚集改进算法(N23算法)
　　输入：n (n>3)维数组A［D0,D1,…Dn-1］，｜Di｜为第i维的长度(1<=i<=n)。G为一聚集函数。无论 Unix 还是 NT 系统，这种函数的功能划分是一致的。其余部分基本与 Unix 相同。
　　步骤：　For (I=1; I<｜Di0｜; I++)
　　　　　　　　For (J=0; J<｜Di1｜; J++)
　　　　　　　　　　For (K=0; K<｜Di2｜; K++)
　　　　　　　　　　{ B［I］［J］［K］ =
　　A［d0］…［I］…［J］…［K］…［dn-1］ ,
　　　　　　　　　　其中dp≠I,dp≠J,dp≠K
　　　　　　　　　　} 
　　本算法可改进为下面的N2M算法，将N维数据立方一次性转换为M维数据立方（M<N）。
4.3　数据立方聚集推广算法(N2M算法)
　　输入：　n维数组A［D0,D1,…Dn-1］，｜Di｜为第i维的长度(1<=i<=n)。G为一聚集函数。{Di0,Di1,…,Dim-1}为{D0,D1,…,Dn-1}的真子集，0≤i0,i1,i2,…im-1 ≤ n-1，并且i0≠i1≠im-1。
　　输出：　计算{Di0,Di1,…,Dim-1}所对应的m（m<n）维数组B
　　步骤：　
　　For (I=1; I<｜Di0｜; I++)
　　　For (J=0; J<｜Di1｜; J++)
　　　　For (K=0; K<｜Di2｜; K++)
　　　　　{ B［I］［J］［K］ =
　　　　　A［d0］…［I］…［J］…［K］…［dn-1］，
　　　　　其中dp≠I,dp≠J,dp≠K 
　　　　　}
4.4　N23的扩展算法(EN23算法)
　　N23算法计算量较大，I/O次数较多，利用外部数据单元的暂时存放聚集计算的中间值，可以把效率提高一个数量级。但由于 WinSock 的特点，程序实现细节仍存在差异。数据存储为Microsoft Access的MDB文件。如图 1 所示。
　　软硬件环境　Win95 +Pentium 200 CPU，32M内存。
　　测试内容　建立数据立方，作聚集计算、使用采掘周期规律。前一个等待本机上由 RegisterRemoteProc() 和 DelRegistration() 发出请求，以维护远程调用过程表记录当前最新信息。可见EN23算法比N23算法提高效率一个数量级。还能给出出拟周期值(关于采掘周期规律的算法另文叙述)。 
　　不论在 Unix 还是在 Windows NT 上，如一个进程需要被异地调用时，必须使用 RegisterRemoteProc() 注册，之后此过程可被任意系统上的 CallRemoteProc() 调用。
作者简介：唐常杰　教授。
杨峰　硕士。
于中华　相利民　副教授。
左　硕士研究生。研究方向均为数据库、知识工程。
作者单位：四川大学计算机系　四川.成都（610064）
参考文献
［1］　W.H.Inmon. Building the Data Warehouse. Q.E.D Technical Publishing Group, Wellesley, Massachusetts,1992
［2］　R.Kimball. The Data Warehouse Toolkit. John Wiley & Sons, New York, 1996
［3］　S.Chaudhuri, U.Dayal. An overview of data warehousing and OLAP technology. ACM SIGMOD Record, 1997;26:65-74
［4］　R.Agrawal, R.Srikant. Mining sequential patterns. In Proc. 1995 Int. Conf. Data Engineering, March,1995; 3-14
［5］　唐常杰,等.从Web数据中采掘逆周期规律.数据库研究进展98――第十五届全国数据库学术会议论文集，成都：1998
［6］　Hongjun Lu, Jiawei Han. Stock Movement Prediction And N-Dimensional Inter-Transaction Association Rules. Simon Fraser University,1998
收稿日期:1999-06-28
