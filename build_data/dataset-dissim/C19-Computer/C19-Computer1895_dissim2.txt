微型机与应用
WEIXINGJI YU YINGYONG
2000　Vol.19　No.5　P.7-8,27




用VRML实现网上动画的方法
林冬梅　王东　朱丽清
摘 要：用VRML生成网上动画的几种常用方法，说明了每种方法的工作原理及主要部分编码实现，并对这几种方法进行了比较。
关键词：VRML工具 Internet 3D图形
　　Internet技术发展到今天，网页设计和制作得到了极大的丰富和发展。
9　用COUNT（*）代替COUN（［字段名］）
　　微软的数据库引擎对COUNT（*）特别关照，使得COUNT（*）执行时比COUNT（［字段名］）快得多。在VRML规范确立以前，人们主要采用GIF、Java等制作动画，采用这些技术的前提是：首先制作预播放的各幅静态图像，然后按指定的顺序逐次播放。其弊端是设计工作量大、直观效果不好、交互性较差。VRML的出现解决了上述问题。
　　VRML是在WWW上创建3D图形的工具，其主要特点是描述动态运动的实体，即动画。VRML中引入了视点、绑定、插值器等概念，在动画实现机制上与前面提到的方法有很大不同。ISO和IEC组织于1997年对VRML 1．0进行了修改和扩充，形成了ISO／IEC 14772－1：1997规范，即VRML97标准。
1 相关术语
　　（1）插值器：插值器节点由4个域组成，即：关键码、关键码值、eventIn（扇入）事件、eventOut扇出事件。关键码就是一系列值，关键码值是一系列用于插值的值，当插值器收到eventIn事件时，就依次将关键码对应的关键码值通过eventOut发送出去。
　　（2）化身：当采用步行界面在三维世界漫步时，事实上已将自己嵌入到三维世界中，这称为化身。
　　（3）绑定：VRML提供了能够控制用户的化身并带领用户在世界中漫游的机制，此机制称为绑定。
　　（4）路由：使动画和用户交互成为可能的路线，在VRML中用ROUTE实现。使用ROUTE时，必须具备1个EventIn（结点接收的事件）和EventOut（结点发送的事件）。
2 实现动画的方法
2．1 视点移动
　　景物不变视点是人们在三维世界中观察场景时眼睛所在的位置和所看的方向、视角等。使用FIRST（）累计函数有助于减少GROUP BY语句中字段的个数。当进入一个世界后，把化身放在文件中遇到的第1个ViewPoint节点中。由于绑定的存在，可以通过将能够控制用户视点的事件发送给ViewPoint。随着视点的变化，化身的位置也发生变化，因此观察到的场景也不断变化，从而实现了动画。
　　用此方法实现动画，需定义1个ViewPoint（VP）节点，用于移动对象的插值器PositionInterPolator（P）节点，用于旋转对象的插值器OrientationInterPolator（O）节点，以及作为set＿fraction eventIn资源的TimeSensor（Time）节点。建立的主要路由如下：
　　ROUTE Time．fraction＿changed TO P．set＿fraction
　　ROUTE Time．fraction＿changed TO O．set＿fraction
　　ROUTE P．value＿changed TO VP．set＿position
　　ROUTE O．value＿changed TO VP．set＿orientation
　　这里用OrientationInterPolator和PositionInterPolator共同工作，使得当化身绕对象转身时，保证化身始终面对它们。
9　用COUNT（*）代替COUN（［字段名］）
　　微软的数据库引擎对COUNT（*）特别关照，使得COUNT（*）执行时比COUNT（［字段名］）快得多。
2．2 视点不变
　　景物移动这是一种与视点有关的实现动画的方法，它将用户绑定到固定的视点，通过物理对象位置的移动或旋转实现动画。位置移动的对象定义在Transform（T）节点中。
2　压缩数据库
　　压缩数据库有二点好处：（1）随着数据库中数据量的增加，原有的优化方案可能不再有效，压缩数据库可以最大限度地克服这个缺点。建立的主要路由如下：
　　ROUTE Time．fraction＿changed TO O．set＿fraction
　　ROUTE O．value＿changed TO T．set＿rotation
　　这种实现动画的方法，比较适合动画中包含的立体景物较少的情况，如球体的转动等。
2．3 使用纹理坐标的动画
　　在VRML中可以用ImageTexture节点为对象添加纹理。一般是采用缺省设置添加纹理，但也可以对纹理进行缩放、平移、旋转，这些操作通过TextureTransform节点实现，即通过这个节点控制纹理到对象映射的s和t坐标(纹理坐标)。
　　另外一种方法是：通过TextureCoordinate节点在1个形状的每一个顶点控制s和t坐标。只有IndexedFaceSet和ElevationGrid节点允许使用该节点。这些形状中的每一个顶点都有1个texCoord域，其中可放入TextureCoordinate节点。TextureCoordinate节点定义如下：
　　TextureCoordinate｛
　　　 ExposedField MFVec2f Point［］
　　　　｝
　　point域中的值是在每一个坐标处使用的s和t值。如果使用1个路由到set＿point eventIn的插值器，便可以选择纹理坐标。这个EventIn是1个MFVec2f。VRML并没有1个内部节点用于执行这种插值，因此，只能用Script节点完成。把带有GROUP BY子句的SECECT语句作为1个嵌套查询加入到上层查询的非分组表中。
2．4 使用BackGround节点创建动画
　　VRML中的Background（B）节点为虚拟世界提供背景颜色或图像。
　　SELECT Ord．CustID，
　　　　　　FIRST（Cust．CustName）AS CustName，
　　　　　　SUM（Ord．Price）AS Total
　　FROM Cust INNER JOIN Ord ON Cust．CustID＝Ord．CustID
　　GROUP BY Ord．CustID
5　分组字段越少越好
　　GROUP BY中的字段越多，查询花费的时间越长。
　　为了接收颜色插值器value＿changed事件产生的颜色值，定义1个Script节点如下：
　　DEF S Script｛
　　EventIn SFFloat fraction
　　EventOut MFColor color
　　Field SFNode CI USE CI
　　url ″vrmlscript：
　　　function fraction（）｛
　　　　color［0］＝CI．value＿changed；
　　　　color［1］＝CI．value＿changed； 
　　｝″｝
　　ROUTE TS．fraction＿changed TO CI．set＿fraction
　　ROUTE TS．fraction＿changed TO S．fraction
　　ROUTE S．color TO B．set＿skyColor
2．5 帧动画
　　利用VRML中的角色（1个平坦的始终面向用户的图像）和Switch节点便可在VRML中实现帧动画。具体做法为首先创建一系列图像；用它们制作一些角色，使这些角色成为Switch的子节点；当在这些子节点之间快速切换时，便形成动画。本人在总结了多年的使用心得后，全面介绍了查询优化的方法。
1　表设计
　　在设计表中字段时，尽量选择长度较短的数据类型，这样可以增加每页中存放的记录个数。
3 几种方法的比较
　　上面介绍了用VRML生成动画的几种方法，由于它们的工作机理不同，因而应用环境也略有不同。把带有GROUP BY子句的SECECT语句作为1个嵌套查询加入到上层查询的非分组表中。
　　视点不变、景物移动这种实现动画的方法是化身不动，物理对象的位置发生改变，因而对动画中包含的立体景物较少时适用。
　　帧动画是将一幅幅图像逐次播放，当用于形成动画的对象方便创建成图像时，可以用此方法。
2　压缩数据库
　　压缩数据库有二点好处：（1）随着数据库中数据量的增加，原有的优化方案可能不再有效，压缩数据库可以最大限度地克服这个缺点。
林冬梅（黑龙江省安达市大庆石油学院计算机科学系151400）
王东（黑龙江省安达市大庆石油学院计算机科学系151400）
朱丽清（黑龙江省大庆石油管理局采油三厂地质大队）
收稿日期：1999－12－10
