微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
1999年 第18卷 第1期 Vol.18 No.1 1999



现代微型计算机总线技术的发展
闫长青　吴石增
　　摘　要：对现代微型计算机的总线技术进行了概述，并对随微型计算机不断发展所采用的几种典型的总线进行了介绍，重点介绍了新近应用较多的PCI和AGP总线。同时对各种总线的性能进行了综合对比。
　　关键词：总线技术　PC/XT总线　ISA总线　PCI总线　AGP总线　EISA总线
　　近十几年来，微型计算机有了迅猛的发展，引发了新的技术革命，甚至引起了人们生活方式的巨大变革。微型计算机之所以有如此大的能力，与计算机结构技术的不断革新、发展是密切相关的。而总线技术正是计算机结构技术中一个十分重要的组成部分。
　　采用总线技术，是现代计算机技术发展的必然。由于总线技术的应用，简化了系统设计，便于组织各模块的专业化生产，也便于产品的升级换代，同时也能得到众多计算机厂商的支持。
　　在一般的微型计算机系统中，往往具有不同层次的总线结构，以386微机系统为例，它就支持以下4种总线：
　　(1)CPU总线：具有32位地址线(CAB)和32位数据线(CDB)，它用来连接CPU和外围芯片。也有文章[1][2][3]介绍了一些很好的解决方法，但大都需要较高的Windows或特定语言(如Visual C＋＋)的编程技术。
　　(3)系统总线：也称I/O通道总线，用来与扩充槽上的各扩充板卡相连。所谓线程，简而言之就是运行在应用程序中的独立进程，它只是代码的执行体，其处理时间由操作系统控制而不是程序控制。
　　(4)外部总线：具有24位地址线(XAB)和8位数据线(XDB)，用来与主机板上的I/O控制器和键盘控制器相连接。
　　在以上几种总线中，CPU总线、存储总线、外部总线在系统板上，不同的计算机系统采用的芯片组不同。所以这些总线均不完全相同，也没有互换性问题。
　　而系统总线则不同，它是与I/O扩展插槽相连接的。I/O插槽中可以插入各种扩充板卡，作为各种外设的适配器与外设连接。为了对数据文件能同时进行读写操作，文件必须以共享方式在2个应用程序中同时打开――即共享文件。本文所述数据采集方法已成功应用于作者的项目开发中，对其它Windows环境下的应用程序开发也有一定参考价值。下面将对微机总线发展过程中的几种典型总线技术进行逐一介绍，重点是新近采用的PCI及AGP总线技术。
1　PC/XT总线、ISA(AT)总线、及EISA总线
　　这几种总线为较早在微机系统上采用的总线标准。其中，ISA(AT)总线至今仍有一定的应用。
1.1　PC/XT总线
　　最早的PC机的系统总线是IBM公司于1981年推出的基于准16位机PC/XT的总线，也称PC总线。PC/XT总线支持8位数据传输和20位寻址空间。其特点是把CPU视为总线的唯一主控设备，其余外围设备均为从属(Slave)设备，包括暂时掌管总线的DMA控制器或协处理器。DOS I／O接口程序通过对I／O口的直接读写完成数据采集并以采集的数据不断更新采集数据文件中的数据。其价格低、可靠简便、使用灵活、且对插板兼容性好，因此有许多厂家生产该总线的兼容产品，品种范围广泛。起初，IBM PC总线产品主要用于办公自动化，后来很快扩大到实验室或工业环境下的数据采集和控制。
1.2　ISA(AT)总线
　　1984年IBM公司推出了16位PC机PC/AT，其总线称为AT总线。后来为了统一标准，便将8位和8位/16位兼容的AT总线命名为工业标准结构(ISA――Industrial Standard Architecture)。
／／－－－－－－－－窗体Form1应用程序代码－－－－－－－－－／／
＃include ＜vcl.h＞
＃pragma hdrstop
＃include ＜dos.h＞
＃include ＜STDLIB.H＞
＃include ＜conio.h＞
＃include ＜io.h＞
＃include ＜fcntl.h＞
＃include ＜sys＼stat.h＞
＃include ＜share.h＞
＃include ＜stdio.h＞
＃include ″thread1.h″
＃pragma package(smart＿init)
＃pragma resource ″*.dfm″
TForm1 *Form1；
TadaThread *adaThread；
FILE fADout，*fDAin，*fCtrl；
int chv，cht，da1，da2；
／／－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
＿fastcall TForm1(TForm1(TComponent* Owner)
　　　　：TForm(Owner)
{
}
／／－－－－－－－－－－窗体Form1创建时响应事件－－－－－－－－－－／／
void ＿fastcall TForm1::FormCreate(TObject *Sender)
{
　　　　adaThread＝new TadaThread)(false)； ／／启用DOS
　　　　　　　　　　　／／I／O接口程序线程
　　　　adaThread－＞Resume()；
　　　　fCtrl＝＿fsopen(″Ctrl.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　／／建立控制数据共享文件
　　　　fseek(fCtrl，SEEK＿SET，0)；
　　　　fprintf(fCtrl，″％d＼n″，1)；／／写入控制字初值“1”
　　　　fDAin＝fsopen(″DAin.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　／／建立D／A数据共享文件
　　fADout＝＿fsopen(″ADout.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　／／建立A／D数据共享文件
}
／／－－－－－－－－－－－每0.2s一次的响应事件－－－－－－－－－－－／／
void ＿fastcall TForm1::Timer1Timer(TObject *Sender)
{
　　da1＝10；
　　da2＝20；
　　fseek(fDAin，SEEK＿SET，0)；
　　fprintf(fDAin，″％d ％d＼n″，da1，da2)； ／／将D／A变
　　　　　　　　　　　／／换数据写入D／A数据文件中
　　fseek(fADout，SEEK＿SET，0)；
　　do {
　　　　fscanf(fADout，″％d ％d＼n″，＆chv，＆cht)；
　　　　　　　　／／从A／D数据文件中读取A／D变换数据
　　　　if(chv＝＝5) ／／A／D通道号为5时
　　　{
　　　ListBox1－＞Items－＞Add(FloatToStr(chv)＋
　　　　　　　　String (″  ″)＋FloatToStr(cht))；
　　　　／／在窗体Form1的ListBox1中显示A／D通道
　　　　　　　　　　　／／5的采集数据
　　　break；
　}
　}while(chv＜15)；
}
／／－－－－－－－－－－窗体Form1关闭时响应事件－－－－－－－－－－／／
void ＿fastcall TForm1::FormClose(TObject*Sender，
　　　　　　　　　　　TCloseAction ＆Action)
{
fseek(fCtrl，SEEK＿SET，0)；
fprintf(fCtrl，″％d＼n″，0)；／／写入终止程序运行控制字“0”
fclose(fDAin)；
fclose(fADout)；
fclose(fCtrl)；
}
／／－－－－－－－－－－－线程thread1程序代码－－－－－－－－－－－－－／／
＃include ＜vcl.h＞
＃pragma hdrstop
＃include ″thread1.h″
＃pragma package(smart＿init)
／／－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
＿fastcall TadaThread::TadaThread(bool CreateSuspended)
：TThread(CreateSuspended)
{
}
／／－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
void＿fastcall TadaThread::Execute())
{
system(″ada.exe″)；／／运行DOS I／O接口应用程序
}
　　为程序略去了采集卡的初始化程序和部分关系不大的语句，为读者在实际应用时应作相应增改。8位扩展I/O插槽由62个引脚组成，用于8位的插接板；8/16位的扩展插槽除了具有1个8位62线的连接器外，还有1个附加的36线连接器。该采集卡具有2个D／A和16个A／D通道，其I／O口基地址为0x300，0x300～0x301为A／D通道的高／低位数据和通道号端口地址；0x304～0x307为2个D／A通道的高／低位数据端口地址。
　　ISA总线具有以下的主要性能指标：
　　.I/O地址空间0100H～03FFH；
　　.24位地址线，可直接寻址的内存容量为16MB；
　　.8/16位数据线；
　　.62+36引脚；
　　.最大传输率8Mb/s；
　　.中断功能；
　　.DMA通道功能；
　　.开放式总线结构，能使多个CPU共享系统资源。本文所述数据采集方法已成功应用于作者的项目开发中，对其它Windows环境下的应用程序开发也有一定参考价值。


图1　ISA总线结构示意图
　　从表面看，ISA(AT)总线是在PC/XT总线基础上增加了1个36线插座形成的。但实际上，ISA(AT)总线比PC/XT总线不仅增加了数据线宽度和寻址空间，还加强了中断处理和DMA传输能力，并且具备了一定的多主功能。
本文使用DOS环境下的Borland C＋＋和Windows环境下的Borland C＋＋ Builder进行程序编制，但若使用的是DOS环境下的BASIC、PASCAL或Windows环境下的VB、VC＋＋等，同样可以采用本文所介绍的方法。
1.3　EISA总线
　　扩展工业标准结构(EISA――Extend Industrial Standard Architecture)，是由COMPAQ牵头的一个联合组织共同制定的一组总线标准。

图1  原理框图
　　数据采集卡通过DOS I／O接口程序，对I／O口进行读写操作交换数据；而DOS I／O接口程序与Windows应用程序之间却是通过共享数据文件交换数据。与ISA总线相比，EISA总线数据传输速度更快，且支持多主控总线功能，可使普通微机的单处理器系统升至多处理器工作状态，使运行达到峰值，其峰值总线数据传输率达33Mb/s。
2　PCI局部总线
　　进入1993年后，由于微处理器的飞速发展，使ISA、EISA总线均显落后。微处理器的高速度和总线的低速度不同步，造成硬盘、图形卡和其它外设只能通过1个慢速且狭窄的瓶颈发送和接收数据。因此推出了一项新技术――局部总线。
　　从结构上看，局部总线是在ISA总线和CPU总线之间增加1级总线。
＃include ＜stdio.h＞
＃include ＜dos.h＞
＃include ＜STDLIB.H＞
＃include ＜conio.h＞
＃include ＜share.h＞
＃include ＜io.h＞
typedef unsigned int word；
const int BASE＝0x300； ／／设置I／O口基地址
void main(){
int status，dtl，dth，adl，adt，c＿reg，chv，i，Tn；
word da1＝0x0，da2＝0x0；
FILE *fADout，*fDAin，*fCtrl；
fDAin＝＿fsopen(″DAin.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开D／A共享数据文件
fADout＝＿fsopen(″ADout.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开A／D共享数据文件
fCtrl＝fsopen(″Ctrl.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　／／打开控制共享数据文件
do {
　　fseek(fCtrl，SEEK＿SET，0)；
　　fscanf(fCtrl，″％d＼n″，＆Tn)；
　　if(Tn＝＝0)／／DOS程序接到Windows终止运行控制
　　　　　　　　　　　／／字“0”时，执行相应操作
　{
　　　　fclose(fDAin)；
　　　　fclose(fADout)；
　　　　fclose(fCtrl)；
　　　　exit(0)；
　　　　return；
　}
　　fseek(fDAin，SEEK＿SET，0)；
　　fscanf(fDAin，″％d ％d＼n″，＆da1，＆da2)； ／／从D／A数
　　　　　　　　　　　／／据文件中读取D／A数据da1、da2
outportb(BASE＋4，(da1＆0xf＜＜4))； ／／写D／A通道1
　　　　　　　　　　　／／数据低位值
outportb(BASE＋5，da1＞＞4)； ／／写D／A通道1数据
　　　　　　　　　　　／／高位值
outportb(BASE＋6，)da2＆0xf＜＜4)； ／／写D／A通道2
　　　　　　　　　　　／／数据低位值
outportb(BASE＋7，da2＞＞4)； ／／写D／A通道2数据
　　　　　　　　　　　／／高位值
fseek(fADout，SEEK＿SET，0)；
i＝0；
do {
　　outportb(BASE＋8，0)；
　　outportb(BASE，0)；
　　do {
　　　　status＝inport(BASE＋8)；
　　　　delay(1)；
　　　}while((status ＆ 0x10)＝＝0)；
　　dtl＝inportb(BASE)； ／／读A／D通道i数据低位
　　　　　　　　　　　／／值和通道号
　　dth＝inportb(BASE＋1)； ／／读A／D通道i数据
　　　　　　　　　　　／／高位值
　　adl＝dtl／16；
　　adt＝dth*16＋adl； ／／A／D转换值
　　chv＝dtl－adl16； ／／A／D通道号
　　fprintf(fADout，″％d ％d＼n″，chv，adt)；　／／将A／D
　　　　　　　　　　　／／通道号及转换值写入A／D数据文件
　　} while(i＋＋＜15)；
　}while(i＞－1)；
　　　　／／死循环，以保证采集过程一直进行，除非收到控
　　　　　　　　　　　／／制字“0”，才结束程序运行
　　return；
}
　　程序编制完成后形成可执行文件(本文为ada.exe)，并在Windows下右击该文件名，选择“属性”项，将程序运行属性设为“最小化”，并选择退出时关闭，以使Windows应用程序启用该线程对象时，不至于使Windows窗口被DOS运行窗口遮挡，并在终止该程序运行时能正常关闭DOS窗口。该采集卡具有2个D／A和16个A／D通道，其I／O口基地址为0x300，0x300～0x301为A／D通道的高／低位数据和通道号端口地址；0x304～0x307为2个D／A通道的高／低位数据端口地址。本文所述数据采集方法已成功应用于作者的项目开发中，对其它Windows环境下的应用程序开发也有一定参考价值。其特点是在CPU和外设之间插入1个复杂的管理层，以协调数据传输并提供总线接口。由于采用了信号缓冲，PCI能支持10种外设，并在高时钟频率下保持最高的传输速率。
周开利(北京理工大学五系97研100081)
汪云(北京理工大学五系97研100081)
参考文献
1，黄晓勇．Windows工业控制应用探讨．工业控制计算机，1997；（4）：25
2，何海波．数据采集软件开发中问题的分析．微计算机信息，1999；15（2）：27
3，袁志勇．用VC＋＋编写Windows硬件I／O接口程序．电脑 学习，1998；（6）：24
4，Telle M．Borland C＋＋ Builder高级编程指南．北京：中国 水利电力出版社，1998
收稿日期：1999－12－20
。PCI控制器可以用32位或64位(这取决于设备)与系统的CPU交换数据。另外，还允许智能化的PCI辅助适配器采用一种称为总线管理(bus mastering)的技术协助CPU执行各种任务。PCI规范允许复用，即在1个时间内允许有1个以上的电信号出现在总线上。
　　PCI总线较以前的总线具有独特优点：
　　.高性能的多媒体技术。高性能图形、视像、网络对处理器提出很高的要求。PCI局部总线提供了很宽的通路，允许这些应用程序相当平滑的执行。
　　.真正的兼容性。与其它总线标准不同，任何与PCI相兼容的机器可用于任何遵从PCI的系统而不论其总线类型或所用的处理器。
　　.与Intel处理器一起工作。PCI总线可与Intel处理器协同工作，而不论其兆赫值从Intel 486SX处理器直至奔腾及未来的版本。
　　.增长的余地。PCI能以32Mb/s的速率传送数据，远比ISA总线的5Mb/s快，这使PCI可处理极高的容量，如用于全屏幕高质量视频的级别。
　　可见，PCI局部总线为外设提供了访问微处理器更宽、更快的通路，有效地克服了数据传输的瓶颈现象。在目前一段时间内，PCI局部总线接口是许多适配器的首选接口，如网络适配器、内置MODEM卡、声音适配器等，且目前绝大多数主板上均带有PCI插槽。
3　AGP总线
　　AGP加速图形端口(Accelerated Graphics Port)是一种用来连接CPU和图形加速器、比PCI更快的总线。它是由主要的图形器件厂商及全球的PC机和OEM厂商组成的AGP执行者论坛(AGP―IF)在1996年8月提出的。Intel公司决定将AGP技术主要用于基于Pentium Ⅱ处理器的平台上。
3.1　AGP总线特点
　　AGP是专门为点对点的图形器件设计的，并非为了替代PCI总线，它是PCI总线的增强和扩充。为了对数据文件能同时进行读写操作，文件必须以共享方式在2个应用程序中同时打开――即共享文件。
　　在PCI总线下，许多外设如高速硬盘驱动器、高速网络适配卡、调制解调器、声卡等均需使用PCI总线传输数据，而PCI的数据带宽有限(峰值传输率为132Mb/s)，若再加上1个需大量数据传输的3D显示卡，PCI总线就会不堪重负，因此导致了AGP总线的产生。故AGP的设计核心是在PC机上实现高性能的3D图像。
　　AGP性能特点：
　　.为3D图形显示提供高带宽(为PCI的4倍)，使突发数据传输率达526Mb/s。
　　.采用了管线技术、边带寻址，在时钟上升沿和下降沿可同时存取数据。
　　.可直接对系统内存中的纹理图像进行处理。因为AGP允许图形控制器与系统内存的无缝连接，不必将纹理数据预载到本地显存上。
　　.减少了总线阻塞，提高了处理效率。
1  基本原理
　　本文采用的方法如图1所示。
1  基本原理
　　本文采用的方法如图1所示。AGP总线对此作了很大的改进，AGP更像一条高速公路，不但改善了路面质量提高了车速(提高了时钟频率)，而且增强了总线控制器的功能，这样使得从AGP显示卡可以连续发出多辆车，减少了等待内存的寻址时间，大大提高了处理效率。
　　AGP与PCI总线相比具有更高的时钟频率和数据传输率。对于1个系统基频为66MHz的奔腾级计算机来说，PCI的工作频率为基频的1/2即33MHz，相应的峰值数据传输率为132Mb/s；而AGP有3种模式：×1模式、×2模式和×4模式，工作频率分别达66MHz、133MHz和266MHz，相应的峰值数据传输率为264Mb/s、528Mb/s和1Gb/s。工业控制领域的用户也不例外，但由于Windows操作系统是以非抢占事件(消息)驱动为主要特征，强调设备无关性风格，不鼓励用户开发直接面向硬件设备的用户程序，因此试图在Windows环境下开发数据采集软件，往往使习惯DOS编程的一般用户感到无从下手。
　　当AGP总线工作在DMA模式时，AGP总线先将系统内存中的纹理和其它数据装载到图形加速器的本地内存中，接着图形加速器的各种处理工作如纹理映射、明暗度调整、Z向缓冲等都在本地内存中执行。在此模式下，AGP与基于PCI的图形加速器的工作方式大致一样。图形加速器只是拥有了AGP总线高速数据传输的优势。
　　当AGP总线处于执行模式时，图形的数据可直接在系统内存中执行而不需要将原始数据全部传输到图形控制器。例如3D图形的一些特定操作如传输量最大的纹理映射可在系统的主存中直接处理，然后图形控制器将处理过的数据传输到显示缓冲区。这样做的好处是可减少主内存和图形控制器之间的数据传输量，同时也节省了图形控制器的本地内存。
　　为实现以上功能，就要求图形控制器必须能访问系统的主内存，能在主内存和显示内存之间传送数据。
2  软件编程
2.1 DOS部分
　　本文以市售PCLS－718数据采集卡为例，使用DOS环境下的Borland C＋＋进行软件编程。
　　图形处理器要能访问系统内存，首先必须得到系统的支持，目前Windows 95中的OSR 2.1能够支持AGP的执行模式；还需要有名为“USBSUPP.EXE”的程序，它从表面看是USB设备的支持程序，实际上包括了1个新的虚拟内存管理器VMM32.VXD，主要增加了几个对AGP专用内存进行分配和管理的API接口，使AGP显示卡的驱动程序可通过这几个API接口给AGP在系统内存分配AGP专用内存。另外，在微软提供的多媒体编程接口Direct 5.0中，包括有DirectDraw，其中新增了支持AGP的DIME功能，使程序员不需直接访问硬件就可利用AGP的优点。此外，随AGP显示驱动程序同时安装的还有“VGARTD.VXD”的虚拟设备管理程序，它是AGP执行DIME模式的关键所在。
　　AGP的DIME执行过程如下：3D程序开始运行，先通过DirectDraw的API分配1个足够大的显示内存缓冲区。DirectDraw缺省的内存分配方式为：先分配显示缓冲器的本地内存，根据相应的显示分辨率和色彩深度计算好显示中常用的缓冲区大小，在本地内存中优先分配，然后将剩下的缓冲区分配给纹理缓冲区。一般3D应用程序的纹理数据相当大，显示控制器的本地内存放不下时，就在系统主内存中给AGP分配“AGP主内存”。由于Windows 95采用虚拟地址映射方式，所以可将暂时不用的内存存储在硬盘上，在需要时再调入内存，若AGP主内存也被操作系统存入硬盘再调入，会影响图形显示效果，故AGP主内存是被操作系统锁定的，使其不能被交换到硬盘。　　
　　内存分配好后，图形控制器可把在系统内存中的AGP主内存当作显示卡的本地内存一样使用，且AGP主内存是1块连续的内存区。由于在PCI控制芯片组中有1个图形地址重映射表(Graphics Address Remapping Table)的硬件，它可将图形控制器要寻址的内存地址转换成相应的物理地址，又因为图形地址重映射表和CPU的地址映射表均由操作系统来管理，故图形控制器和CPU均能访问相同的AGP主内存。图形控制器访问AGP主内存，把AGP主内存中显示需要的纹理转换成硬件能直接显示的格式，存入显示缓冲区，再进行显示，这样可大大减少数据传输量。
2  软件编程
2.1 DOS部分
　　本文以市售PCLS－718数据采集卡为例，使用DOS环境下的Borland C＋＋进行软件编程。此外，在3D应用程序结束后，可以释放AGP主内存。
3.3　AGP的应用展望
　　虽然AGP总线拥有很高的速度和优越的性能，但其应用还有赖于计算机系统其它部分的技术发展。
＃include ＜stdio.h＞
＃include ＜dos.h＞
＃include ＜STDLIB.H＞
＃include ＜conio.h＞
＃include ＜share.h＞
＃include ＜io.h＞
typedef unsigned int word；
const int BASE＝0x300； ／／设置I／O口基地址
void main(){
int status，dtl，dth，adl，adt，c＿reg，chv，i，Tn；
word da1＝0x0，da2＝0x0；
FILE *fADout，*fDAin，*fCtrl；
fDAin＝＿fsopen(″DAin.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开D／A共享数据文件
fADout＝＿fsopen(″ADout.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开A／D共享数据文件
fCtrl＝fsopen(″Ctrl.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　／／打开控制共享数据文件
do {
　　fseek(fCtrl，SEEK＿SET，0)；
　　fscanf(fCtrl，″％d＼n″，＆Tn)；
　　if(Tn＝＝0)／／DOS程序接到Windows终止运行控制
　　　　　　　　　　　／／字“0”时，执行相应操作
　{
　　　　fclose(fDAin)；
　　　　fclose(fADout)；
　　　　fclose(fCtrl)；
　　　　exit(0)；
　　　　return；
　}
　　fseek(fDAin，SEEK＿SET，0)；
　　fscanf(fDAin，″％d ％d＼n″，＆da1，＆da2)； ／／从D／A数
　　　　　　　　　　　／／据文件中读取D／A数据da1、da2
outportb(BASE＋4，(da1＆0xf＜＜4))； ／／写D／A通道1
　　　　　　　　　　　／／数据低位值
outportb(BASE＋5，da1＞＞4)； ／／写D／A通道1数据
　　　　　　　　　　　／／高位值
outportb(BASE＋6，)da2＆0xf＜＜4)； ／／写D／A通道2
　　　　　　　　　　　／／数据低位值
outportb(BASE＋7，da2＞＞4)； ／／写D／A通道2数据
　　　　　　　　　　　／／高位值
fseek(fADout，SEEK＿SET，0)；
i＝0；
do {
　　outportb(BASE＋8，0)；
　　outportb(BASE，0)；
　　do {
　　　　status＝inport(BASE＋8)；
　　　　delay(1)；
　　　}while((status ＆ 0x10)＝＝0)；
　　dtl＝inportb(BASE)； ／／读A／D通道i数据低位
　　　　　　　　　　　／／值和通道号
　　dth＝inportb(BASE＋1)； ／／读A／D通道i数据
　　　　　　　　　　　／／高位值
　　adl＝dtl／16；
　　adt＝dth*16＋adl； ／／A／D转换值
　　chv＝dtl－adl16； ／／A／D通道号
　　fprintf(fADout，″％d ％d＼n″，chv，adt)；　／／将A／D
　　　　　　　　　　　／／通道号及转换值写入A／D数据文件
　　} while(i＋＋＜15)；
　}while(i＞－1)；
　　　　／／死循环，以保证采集过程一直进行，除非收到控
　　　　　　　　　　　／／制字“0”，才结束程序运行
　　return；
}
　　程序编制完成后形成可执行文件(本文为ada.exe)，并在Windows下右击该文件名，选择“属性”项，将程序运行属性设为“最小化”，并选择退出时关闭，以使Windows应用程序启用该线程对象时，不至于使Windows窗口被DOS运行窗口遮挡，并在终止该程序运行时能正常关闭DOS窗口。预计随着系统内存访问速度的提高，AGP总线的优越性将体现得更加明显，其应用也会越来越广泛。
4　总结
　　现将几种总线的性能列于表1加以比较，供感兴趣的同行参考。而当你熟悉的Windows开发环境不适于采用上述方法时，本文介绍的方法也许不失为一种简单易行的方法