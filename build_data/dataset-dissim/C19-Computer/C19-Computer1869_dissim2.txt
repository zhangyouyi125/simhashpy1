微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000 Vol.19 No.3 P.43-45



基于3层C/S结构的数据库管理系统的实现
刘华蓥　韩建民　薛继伟
　　摘　要：3层C/S结构的应用程序的组成及优点,说明了Delphi下开发3层C/S结构应用程序的方法。
　　关键词：3层C/S结构 分布式数据库 ActiveXForm 组件
　　客户/服务器计算机系统是20世纪90年代分布式处理的主流系统。而且,服务器作为本系统的控制中心需要管理整个分布式网络环境中的所有JavaBeans组件,包括组件监控、配置、访问控制和组件升级等,这些功能保证了整个企业应用具有良好的可管理性。但随着应用系统的不断扩大,2层C/S结构表现出效率低下、维护困难、安全性差和伸缩性差等缺点。3层C/S结构的出现明显地改善了2层C/S结构的性能。本文论述了3层C/S结构的组成及特点,并论述了一个基于3层C/S结构的数据库管理系统的设计方法。
　　针对以上的系统功能需求,平台中的组件载体必须支持事件在分布式范围内的传播,以触发分布式环境中其它组件的相应动作,而且组件能够提供远程调用接口,使得服务器能够进行统一的、有序的、合理的管理,这样可以使系统中所有组件都运行在1个虚拟的统一地址空间中。
　　第三步:系统运行过程中,临时事件监听器监听到相应组件的特定事件后,事件监听器将事件包装成标准的扩展事件形式,通过α通道转发给规则引擎。通常实现用户界面,它提供了一个可视化接口,用来表示信息和收集数据,它只与应用服务器打交道,确保用户与应用服务器紧密结合。（2）应用服务器。通常实现应用逻辑（又称商业规则）,是连接客户和数据库服务器的桥梁。它响应用户发来的请求,执行某种业务任务。它与数据库服务器打交道,而客户不能直接与数据库服务器打交道。（3）数据库服务器。实现数据的定义、维护、访问、更新以及管理,并响应应用服务器的数据请求。它的物理实现可以在某种数据库管理系统中,也可以是一个异种数据库的集合,这种数据库可以驻留在多种平台上。

图1 3层C/S结构组成图

　　3层C/S结构和2层C/S结构相比,优势主要表现在:（1）效率高。应用服务器减轻了客户端的负担,也降低了与数据库服务器的连接代价,从而实现真正的“瘦客户”。（2）易于维护。应用逻辑集中在中间层,因而,当应用逻辑变化时,仅需修改应用服务器,从而提高了可维护性,也增强了数据的一致性。（3）可伸缩性。3层结构强调的是逻辑意义而不是物理意义,它说明如何设计应用程序,而不是如何具体部署。事件的包装在客户端进行。
　　第四步:规则引擎端的事件监听器收到扩展事件后,对该事件进行解包,由规则虚拟机中运行的业务逻辑确定下一步的操作。
　　以上介绍的组件运行平台为企业管理提供了一个开放的、集成的、灵活的、可扩展的分布式计算环境。应用服务器主要包含1个远程数据模块,它通过数据集组件负责与BDE的联系,并利用Tprovider组件提供Iprovider接口,在客户程序与应用服务器之间传递数据。在业务逻辑的驱动下,运行于各地的分布组件在服务器与客户端之间建立的分布式总线上进行透明的互操作。

图2 Delphi下实现3层C/S结构原理图
　　客户程序通常包含二类模块:一类是窗体模块,它们为用户提供数据维护的界面;另一类是数据模块,它一般包括以下几类组件:（1）连接组件,负责连接应用服务器;（2）客户数据集组件,它一般从应用服务器接口获取数据;（3）数据源组件,负责连接数据集组件与数据控制组件。
2.3 所涉及的组件
　　（1）远程数据模块（REMOTE DATA MODULE）
　　它与普通的数据模块有些相似,不同的是它可以作为COM服务器或CORBA服务器,让客户程序访问它的接口。对于各种共享重用的组件,采用延迟绑定的动态连接方式运行,保证了组件动态、快速升级的特性。
　　（2）提供器组件
　　有二种提供器组件:Tprovider,Tdatasetprovider。这2个元件用在应用服务器上,主要作用是提供Iprovider接口,通过它直接控制数据包中所包含的信息,响应客户数据请求,更新数据,定位记录,并将数据打包后传送给客户。
　　（3）客户数据集组件（TClientDataset）
　　它是1个从Tdataset继承下来的组件,通常用于客户端。它最大的特点是不依赖BDE,但它需要1个动态链接库（即DBCLIENT.DLL）的支持。
　　第二步:客户代理中的组件容器解析组件的JAR文件,获得组件接口信息,据此为该组件生成临时事件监听器。图1所示为整个平台的系统结构图,规则引擎是整个应用系统的控制中心,客户代理实现了“零管理”,应用系统的所有功能组件都存储在服务器端,在需要时动态、即时地加载到客户代理端运行。
　　（4）MIDAS连接组件
　　客户与应用服务器之间,可以根据选用通信协议的不同,使用不同的连接方式。Delphi 4.0提供了6种连接组件。分别是:
　　TDCOMConnection按DCOM方式连接。
　　由于本平台是分布式计算环境下的组件化应用平台,企业业务逻辑装载在服务器端由规则虚拟机解释执行,功能组件分布在各客户端运行,通过分布式对象总线与服务器端的业务逻辑中的相应接口实现动态联编,各组件通过各自的接口在分布式对象总线上实现透明地互通信和互操作。
　　TSOCKETConnection按TCP/IP方式连接。应用服务器必须运行1个专门的运行期软件SCKTSRVC.EXE或SCKTSRVER.EXE。SCKTSRVC.EXE只适合于Windows NT,可以作为1个服务器在后台运行。
　　TOLEnterpriseConnection按OLEnterprise方式连接。应用服务器和客户端都必须运行1个运行期软件。
　　TCORBAConnection按CORBA方式连接。需要ORB的支持。在此平台之上,应用系统中的各功能组件根据商业规则的驱动在分布式计算环境中动态地组合起来,并具有组件动态升级和组件之间的动态业务重组等关键特性,支持企业业务变化需求驱动下的系统快速重组和进化。
2.4 自定义应用服务器
　　远程数据模块是应用服务器的核心部件,它提供了应用服务器和客户程序通信的接口。为了使客户能方便地访问数据模块,可以对数据模块接口进行扩展,添加一些方法让客户程序调用。
　　要向接口中添加属性和方法,首先应打开类型库编辑器;利用工具栏上的New Method或New Property命令,加入新的方法或属性,并设置有关属性。
　　组件技术为整个软件行业带来了新的生命力,组件的可重用性、可管理性和可替代性大大改善了软件本身的结构特征,能够有效地解决软件规模日益庞大所带来的种种问题。
　　对于基于DCOM的远程数据模块来说,新的成员将出现在接口的实现单元和类型库的描述文件中。在业务逻辑语法中,JavaBeans组件的接口和使用语法与在Java语言中基本保持一致,但语义实现却有许多不同。调用Iprovider接口有3种方式:
　　（1）通过TClientDataset的Provider属性获取Iprovider接口,然后直接访问Iprovider接口。
　　（2）通过调用TClientDataset的属性和方法,间接调用Iprovider接口。因为大部分对Iprovider接口的调用已封装在TClientDataset的属性和方法中。
　　（3）通过MIDAS的连接组件的Appserver属性可以获得应用服务器上的远程数据模块接口,通过此接口可以调用远程数据模块中的方法。
3 教职工信息管理系统的设计与实现
3.1 总体设计
　　教职工信息管理系统实现了对教职工数据库的综合管理。主要完成对数据库的维护和查询,代码库、结构库及系统字典的维护,报表的打印等功能。
刘启文（沈阳宝钢东软集团软件中心110006）
傅韶勇（沈阳宝钢东软集团软件中心110006）
杨利（沈阳宝钢东软集团软件中心110006）
参考文献
1，Schmide R.Concepts for Developing Component-Based Systems.International Workshop on Component-Based Software Engineering,1998
2，徐征,刘晓铭,刘积仁.一种构件化的动态软件系统模型.小型微型计算机系统,1992;(2)
3，麦中凡.基于分布式对象的软件构件.计算机科学,1994;24(4)
收稿日期：1999-10-20
。由于客户端中执行的组件是不可预知的,而且组件发出的事件各有不同,因此客户端的事件捕获功能必须具有通用性。系统中客户与应用服务器的连接采用DCOM协议。系统的软件层次结构如图3所示。

图3 教职工管理系统结构图
3.2 3层C/S结构设计
　　1.创建数据库服务器
　　数据库服务器采用Windows NT上的SQL Server,包含的库主要有:
　　数据库:存储教工信息的所有数据库,包括教工基本信息表、工资表、培训出国情况表等。
　　代码库:系统管理员管理的数据,包含各个数据库中所用到的代码含义。
　　结构库:系统管理员管理的数据,与数据库对应,描述数据库的结构的数据库。
　　数据库目录字典:所有数据库及所在服务器的目录。
　　代码库字典:所有代码库的目录。
　　3.事件监听器的注册和注销。针对当前企业级应用的特点,开发了基于JavaBeans组件模型的组件化分布式应用运行平台,为企业系统管理提供了一个灵活的、可扩展的、集成的分布式组件框架。
　　2.应用服务器的建立
　　创建1个3层的C/S应用程序,应先创建应用服务器,然后注册或安装应用服务器,只有在应用服务器已注册并正常运行的情况下,才能创建客户程序。对于客户程序来说,既可以在设计期,也可以在运行期连接应用服务器。
　　创建应用服务器时,首先创建1个新工程,在工程中,创建1个远程数据模块,在远程数据模块上添加所需组件,包括:（1）数据集组件;（2）提供器组件。提供器组件必须与1个数据集组件对应。添加完提供器组件后,在组件上单击右键,在弹出菜单中选择“Export from <name> in DataModule”,引出Iprovider接口在类型库中注册。然后编写代码,实现业务规则。最后保存、编译、注册或安装应用服务器。如果使用DCOM,TCP/IP作为通信协议,应用服务器就好象1个自动化服务器一样必须注册。如果服务器没使用DCOM,就必须安装有关运行期软件。本系统使用了DCOM协议,因此,只需安装DCOM95就可以了。
　　3.客户程序的建立
　　本系统采用Browser/Server结构,即采用浏览器-Web服务器-应用服务器-数据库服务器的结构。Delphi 4.0提供了ActiveXForm,可以很容易地创建基于Browser/Server结构的“瘦客户”应用程序。要创建这种应用程序,首先应新建1个ActiveXForm,它将显示在浏览器中。在ActiveXForm中用程序创建主窗体,主窗体和其它窗体应该用一般的Form。然后编写代码,保存和编译工程,最后应该用Delphi的发布功能将其发布到Web服务器上。
　　在3层体系结构中,客户程序至少需要1个TClientDataset组件,其作用是引用数据集。创建1个客户程序,首先新建1个工程,加入了1个数据模块。然后向数据模块中加入组件,包括:（1）连接组件,系统中选择TDCOMConnection组件,并设置它的ServerName属性,指定和连接应用服务器,可以从其下拉列表中选择应用服务器;（2）TClientDataset组件,设置其Remoteserver属性为指定的连接组件,设置其ProviderName属性指定应用服务器上的提供器组件,可从下拉列表中选择。这样,客户程序就可以通过Iprovider接口与应用服务器通信;（3）TdataSource组件,设置它的Dataset属性指定TClientDataset组件,连接数据集组件与用户界面的数据控制组件。
　　本系统是在校园网的环境下开发的,采用分布式数据库系统。本系统的成功开发和应用,证明了在大型应用系统中,3层C/S结构具有效率高、易于维护、可靠性高等优点。
　　第五步:规则引擎中的组件处理器得到规则虚拟机解释执行中触发的组件操作信息,包装成组件标准的扩展操作形式,通过β通道传送到指定的客户代理