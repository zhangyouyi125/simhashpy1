计算机工程
COMPUTER ENGINEERING
1999年  第25卷 第7期 Vol.25 No.5 1999



Windows NT环境下远程诊断系统的实现
魏小勇 张根度
摘要 详细阐述了NT下SNMP的工作原理,并讨论了基于SNMP的远程诊断系统在Windows NT环境下的构造方法,包括NT对远程访问的支持、NT的SNMP实现框架等内容。
关键词 远程诊断 简单网络管理协议 MIB 远程访问服务 Windwos NT
The Implementation of Remote diagnostic System under Windows NT
Wei Xiaoyong Zhang Gendu
Network Center of Fudan University Shanghai 200433
Abstract：This paper discusses the implementation of a remote diagnostic system based on SNMP.It is comprised of the topic on NT's support of remote access and the main frame of SNMP implementation under the Windows NT environment.
Key words：Remote diagnosis;SNMP;MIB;RAS;Windows Nt
1　远程诊断的提出
　　在应用软件市场竞争日益激烈的今天，售后服务和技术支持逐渐成为衡量软件产品质量的重要标准之一。软件厂商为了提高自己产品的竞争力，往往需要投入大量资金和人力用于技术支持人员的培训和提供迅捷的服务响应。为了提高服务效率，降低技术支持成本，有必要对应用系统运行中的故障加以分类，并对不同类别的问题施以不同的解决对策。
　　应用系统投入现场运行后，用户可能提出的问题很多，其诱发原因大体上可分为以下3类：①用户对软件的使用不熟练，不知道如何操作以完成所需功能；②软件参数配置不当或外部的软/硬件故障；③软件内部逻辑错误。
　　第一类问题可以通过加强用户培训，编写清晰详尽的用户手册来解决；第三类问题只能通过开发人员的查错纠错来解决。在应用系统经过实践考验，逐步趋于稳定运行之后，第二类问题就成为系统故障的主体。对这类问题，如果事先由应用软件自身的状态判断出故障原因，然后根据具体问题制订相应的解决对策(如远程修改参数配置、指导用户自行解决、派出技术人员现场处理等)，无疑能够大幅度提高服务响应速度，减少技术支持人员派遣的盲目性。Solaris1.x（SunOS4.1.x）和Solaris2.x（SunOS5.x）的链接程序通过生成PIC码(position independent code)使动态链接码作到最大限度的共享。例如，如果系统在/usr/lib目录中同时存在静态数学函数库libm.a和动态数学函数库libm.so，则命令%cc prog.c -o prog -lm自动链接libm.so，生成动态链接可执行程序。
2　基于SNMP的远程诊断
2.1　远程诊断与SNMP
　　远程诊断的关键在于，诊断主机能够取得被诊断系统的实时运行状态。诊断主机与被诊断系统之间的信息交换涉及到诊断信息结构、诊断信息传输协议和底层通信等几个方面。简单网络管理协议SNMP为这几个方面制订了统一的标准。
　　关键词　动态链接，动态链接库，动态链接接口函数

　　动态链接技术是计算机系统软件的一项重要技术，它采用动态代码共享技术，不但使整个系统资源得到有效使用，而且增强了应用程序的通用性、稳定性和可扩展性。在现代UNIX操作系统中，系统软件和大型应用软件都采用动态链接技术。
　　被管理节点可以是主机、路由器、网桥、网络打印机或其他有能力与外界交换状态信息的网络设备。在远程诊断中，被管理节点主要指运行被诊断系统进程的主机。为了能够直接被SNMP管理，被管理节点必须运行一个SNMP管理进程，又称为SNMP代理(Agent)。代理维护一个描述本机状态变量的数据库。
　　 
4　结束语
　　建立和使用动态链接函数库是现代程序设计的重要技术，它对提高程序的灵活性和高效性都起到了非常重要的作用，特别对于大型应用程序的设计尤其重要，应引起我们足够的重视。在远程诊断中，管理机就是运行专用诊断软件的通用计算机。为了保证代理的简单性，并使得代理对宿主设备的性能影响最小化，所有的管理智能都集中在管理机上。被管理节点只需要准确报告自己的运行状态，如何通过这些状态信息确定系统故障原因是管理机的责任。
　　每个被管理设备维护一个或多个变量用于描述自身状态。在SNMP术语中，这些变量被称为"对象"。
2.1　Solaris1.x中动态链接库的建立
　　设需要建库的C语言子程序为f1.c、f2.c、…、fn.c（注意，这些程序中不包含main函数且各源程序文件中没有外部参考全局变量），要建立的动态链接库的名称为mylib，根据UNIX系统函数库的命名规则［1］，要建立的动态链接库的文件名为libmylib.so，建库的步骤和命令如下：
　　* 生成PIC格式的目标码：
　　% cc -pic -c *.c
　　* 将PIC目标码链接成动态链接库：
　　% ld -o libmylib.so.1.1 -assert pure-text *.o
　　* 使用符号链接生成所需要的动态链接库文件：
　　% ln -s libmylib.so.1.1 libmylib.so
　　Solaris1.x生成动态链接库时，版本信息需要一个主号(major)和辅号(minor)，即文件名libmylib.so.1.1的版本号“1.1”中，前一个“1”为主号，后一个“1”为辅号，Solaris2.x中只使用主号。管理机使用SNMP协议与代理进行交互，询问代理维护的对象状态，或在必要时修改它们的值。代理也可以在非常事件发生时主动向管理机报告，这种报告称为SNMP陷井(Trap)。
　　SNMP模型的核心是一组由代理维护，并由管理机读写的对象。为了便于不同厂商产品的交互，这些对象必须用一种独立于厂商的标准来定义。另一方面，网络传输也需要一种标准对所传数据进行编码。SNMP使用OSI的ASN.1(Abstract Syntax Notation)作为对象定义和编码的标准。ASN.1并非完美的数据表示方法，它的编码规则以减少网络传输量为优化基准，却忽视了传输双方CPU为编码和解码所付出的高昂代价。
2.3　SNMP实现的难点
　　从以上叙述可以看出，要实现基于SNMP的远程诊断系统，必须完成以下工作：①诊断主机与被诊断系统之间的TCP/IP通信支持；②被诊断系统的SNMP代理；③ASN.1的编码与解码；④被诊断系统MIB模块的定义及其对象的维护；⑤综合管理信息判断系统故障原因。
　　其中，前3项工作对于任何一个SNMP系统都是相同的，只有最后两项因不同的SNMP应用而异。通过系统提供的链接程序(link editor)、共享函数库(shared library)和运行时链接器(runtime linker)，我们可以方便地建立和运行动态可执行程序。另外，由于SNMP与ASN.1本身所固有的复杂性，使得在缺乏系统软件支持的PC上，前3项工作可占去整个系统开发工作量的80～90%，然而只有最后两项才被认为是系统的目标。这样的工作量比例使技术决策人员难以下决心来使用SNMP作为构造个人计算机应用系统远程诊断的基石，即使SNMP有诸多理论上的优点。
　　令人欣慰的是，Windows NT 4.0对基于PSTN的TCP/IP和SNMP的支持使这种局面得到了彻底改观。现在，软件开发人员只要集中精力在最后两项工作，也是一个诊断系统的实质性工作上，就能够建造一个简洁、高效、具有SNMP所有优点的远程诊断系统。下面讨论如何在Windows NT下具体实现一个远程诊断系统。
3　NT下基于SNMP远程诊断系统的实现
3.1　中心诊断主机与远程被诊断系统之间的TCP/IP通信
　　Windows NT支持远程访问服务RAS(Remote Access Service)。RAS使远程计算机能够像直接连在局域网上一样使用网络资源。RAS以PSTN作为物理信道，向上层提供数据链路层服务。例如，如果系统在/usr/lib目录中同时存在静态数学函数库libm.a和动态数学函数库libm.so，则命令%cc prog.c -o prog -lm自动链接libm.so，生成动态链接可执行程序。在RAS基础上，NT可以将TCP/IP协议同时绑定到常规网卡和Modem上去。Windows NT 4.0的自动拨号特性(AutoDial Feature)使得常规网卡与Modem的区别对上层TCP/IP用户完全透明。
　　假设有一套远程诊断系统。中心诊断主机与各被诊断系统都通过Modem连接在公用电话网上。定时器触发诊断主机A向被诊断主机B查询状态信息。动态链接可执行程序在运行时还要由系统运行时链接程序动态调用所需要的动态链接共享库［1］。
　　
2　建立动态链接库
　　采用动态链接技术设计程序时，除了使用系统提供的标准动态链接库之外，建立用户自己的动态链接库、使用动态链接程序设计接口设计程序是一项十分重要的技术。
　　如果新建的libmylib.so放到/home/lib目录中，使用该库时的编译命令如下：
% cc prog.c -o prog -L/home/lib -lmylib
　　此时的函数库没有在标准目录位置，编译时应使用-L选项指明其所在位置，运行时应设置LD_LIBRARY_PATH环境变量指明该共享库的位置［1］。动态链接可执行程序在运行时还要由系统运行时链接程序动态调用所需要的动态链接共享库［1］。
3.2　Windows NT环境下SNMP的实现框架
　　NT对SNMP的支持主要实现在以下几个系统模块中：
　　(1) SNMP.EXE：它以NT Service的形式存在，是可扩展的SNMP代理。它处理代理方的ASN.1的编码与解码，并将管理机发出的GET、GETNEXT、SET命令映射成SNMP扩展动态库中的相应函数调用。
　　关键词　动态链接，动态链接库，动态链接接口函数

　　动态链接技术是计算机系统软件的一项重要技术，它采用动态代码共享技术，不但使整个系统资源得到有效使用，而且增强了应用程序的通用性、稳定性和可扩展性。
　　(3) SNMPTRAP.EXE：它以NT Service的形式存在，处理被管理节点发出的SNMP陷井。本文以Sun工作站使用的Solaris操作系统为例分析其动态链接环境、动态链接库的建立及其使用方法。
　　(4) SNMPAPI.DLL：它是SNMP的外围动态库，提供了一组工具函数，以期简化扩展代理库及管理程序的开发。这些工具函数包括内存管理、对象标识符管理、变量链表管理等。
　　在用户开发的远程诊断系统中，为了支持自定义的MIB，必须为该MIB编写一个动态连接库，然后将此动态库联入SNMP服务。一个SNMP扩展动态库可以同时支持ASN.1对象命名树中的多棵子树。以下假设用户编写了一个支持ASN.1对象命名树中根为 .1.3.6.1.4.1.12 的子树的SNMP扩展动态库，动态库名为USERMIB.DLL。下面说明NT下SNMP的工作机制。
　　图1示出了一个简单的SNMP诊断系统的框架。为了使示意图简洁，在此略去了与SNMP工作机制无关的SNMPAPI.DLL。图中，若模块A位于模块B上方，则表明A使用B提供的服务，或A调用了B提供的函数。椭圆形表示NT提供的系统模块，矩形表示需要用户自己开发的模块。

图1 简单SNMP诊断系统的框架
　　用户开发的USERMIB.DLL必须遵循NT-SNMP扩展动态库的规范，为了理解方便，有必要对此规范及MGMTAPI中的服务函数做简单介绍。SNMP扩展动态库是Win32的动态连接库，因此，它必须遵循Win32 DLL的开发规范[3]。接口函数包括建立动态链接dlopen()、返回共享码地址dlsym()、关闭动态链接dlclose()和动态链接错误处理dlerror()四个函数。扩展库通过此函数通知代理自己所支持的视图(ASN.1对象命名树中某子树的根节点)，并返回一个陷井事件句柄。本文对Solaris 系统动态链接库的建立方法、使用动态链接程序设计接口函数进行了讨论。扩展库在此函数中完成对象的查询或设置，再将结果返回给可扩展代理。
　　(3) SnmpExtensionTrap：可扩展代理一旦检测到某扩展库的陷井事件句柄上有信号(Signal)，就调用该扩展库的SnmpExtensionTrap函数来收集它所产生的一系列陷井。
　　MGMTAPI.DLL为管理方提供了一组函数，用于完成SNMP管理操作。下面举例说明他们的用法。
　　(2) SnmpMgrRequest：在指定代理上执行一次SNMP Get、GetNext或Set操作，并返回操作结果。
　　(3) SnmpMgrClose：关闭通信套接字，释放相关系统资源，结束SNMP会话。
　　
2　建立动态链接库
　　采用动态链接技术设计程序时，除了使用系统提供的标准动态链接库之外，建立用户自己的动态链接库、使用动态链接程序设计接口设计程序是一项十分重要的技术。
　　(5) SnmpMgrGetTrap：当Trap发生时，管理进程调用此函数取得具体的Trap信息。
　　下面举例说明诊断主机A与被诊断主机B使用SNMP通信的具体过程。
　　通常情况下，诊断进程由定时器触发，启动一次诊断会话。本文以Sun工作站使用的Solaris操作系统为例分析其动态链接环境、动态链接库的建立及其使用方法。主机B上的可扩展代理收到相应的SNMP请求，发现被操作对象包含在USERMIB.DLL所支持的视图中，于是调用USERMIB.DLL的SnmpExtensionQuery函数来获取相应的对象状态，再将结果返回给诊断主机A。主机A格式化返回结果，作为SnmpMgrRequest的返回值传送给诊断进程。状态信息收集完成后，诊断进程调用SnmpMgrClose结束本次SNMP会话。状态信息交换过程所涉及的ASN.1的编码与解码在诊断主机上由MGMTAPI.DLL完成，在被诊断主机上由可扩展代理SNMP.EXE完成。
　　主机B上的被诊断进程若发现自身故障，也可使用SNMP Trap主动向诊断主机报告。被诊断进程设置USERMIB.DLL中的陷井事件句柄为有信号状态，可扩展代理检测到该信号，就会向诊断主机发送UDP报文。主机A上的SNMP Trap Service收到UDP报文后，将诊断进程通过SnmpMgrTrapListen传送给MGMTAPI.DLL的陷井监听事件句柄设置为有信号状态。该信号触发诊断进程的一系列SnmpMgrGetRrap调用，这些调用导致被诊断主机上可扩展代理对USERMIB.DLL中SnmpExtensionTrap的函数调用。被诊断进程在SnmpExtensionTrap中将发生的具体陷井信息返回给可扩展代理，再由代理经诊断主机的MGMTAPI.DLL传送给诊断进程。
4　结束语
　　目前，Microsoft Windows系列对SNMP的支持仅限于NT4.0，而一般的应用系统既包含运行NT的高档服务器，也包含运行Windows 95和Windows  3.x的中低档计算机。如何将这些中低档计算机纳入NT的SNMP管理范围，仍是一个值得探索的问题。
　　总而言之，NT4.0对RAS与SNMP的全面支持使远程诊断系统的开发变得规范、易行，在此基础上开发标准化的远程诊断系统是一件很有意义的工作，它将使基于个人计算机的应用软件的技术支持走上一个新台阶。在现代UNIX操作系统中，系统软件和大型应用软件都采用动态链接技术