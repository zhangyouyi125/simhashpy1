计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



用OpenGL开发虚拟制造环境（一）
周杰韩　杜润生　吴波
　　摘　要　本文介绍了几何图形信息的数据结构、存储与显示基本原理。从应用程序角度论述Windows图形设备接口GDI的客户服务器本质及虚屏幕显示技术。CAD/CAPP数据接口子系统将CAD模块输出的图形信息转换成CAPP可以接收识别的数据格式，实现了CAD和CAPP之间信息的提取、交换、共享和处理。
　　关键词　虚拟制造，客户/服务器，OpenGL图形库
1　计算机图形
1.1　几何图形信息的数组结构
　　图形显示是从点的显示开始的。线段是所有在它上面的点的集合。几何学上的点是没有大小的。线段的显示实际上用有限个点来产生图形，因而每个点都有一定的大小。此时的点不再是真正的几何点，而是像素（图像基本元素）。每个像素是显示屏上可以编址的最小单元，也是在显示屏上能够被控制的最小部分。显示屏如同由像素组成的二维数组。（二次、三次曲线均由圆弧或直线插补构成）。由于钣金加工特点(板材均匀性)，因此可以简单按二维图形处理。像素亮度值对应元素值。设定显示屏上每一像素的亮度可以产生一幅图像。
1.2　几何图形信息的存储

图1　帧缓冲器与图像显示
　　一幅图像是由有限数量的像素组成。一个分辨率较高的显示设备若在x和y方向各有1000个像素，则这个显示屏将含有100万个像素。为了显示每一点的亮暗，每一像素至少需要1比特的亮度信息，其存储空间至少需要100万/8个字节。用来存储像素亮度数组的存储器称为帧缓冲器。帧缓冲器是指显视卡上的显视存储器。
1.3　几何图形信息的显示
　　光栅显示是用得较多的图形显示方法。光栅显示是利用扫描发生器每秒钟扫描帧缓冲器30到60次，将代表像素亮度的信息一行一行取出，然后送往显示器。帧缓冲器的存取地址与光栅扫描信号同步地产生。帧缓冲器的内容用来输出视屏信号控制阴极射线管电子束强度。强度大小决定像素的显示明暗。帧缓冲器地址用来输出水平与垂直偏转信号控制阴极射线管电子束的偏转。电子束的偏转决定像素的屏幕坐标（x，y）。每一次扫描帧缓冲器都使屏幕得到刷新。由于光栅显示系统利用直接存储器存取（DMA）硬件不断地扫描帧缓冲器，并把图形显示出来，因而图像生成不受中央处理器（CPU）控制。
1.4　显示设备驱动程序与应用程序的可移植性
　　应用中，应用程序编写的几何图形信息不是直接改变帧缓冲器的内容而是作为标准显示指令存入显示文件中，然后利用显示设备驱动程序解释显示指令以产生需要的图象。显示文件驱动程序形成图形应用程序与显示设备之间的接口。若应用程序可以产生标准显示文件代码，那么每个带有驱动程序的具体显示设备就能正确地运行应用程序，从而提高了应用程序的可移植性。显示设备与显示驱动程序通常由硬件商一起提供。（二次、三次曲线均由圆弧或直线插补构成）。图形应用程序的实现步骤包括：首先由初始化程序分配显示设备和存储器。其次应用程序把图形信息写入帧缓冲器，由帧缓冲器直接传送到显示设备。
　　. 缺少方向判定
　　对于旋转冲床的工艺编程必须确定冲头的加工走向，以便加工出内轮廓或外轮廓。而且，无论是冲孔还是落料，其轮廓都构成闭环,它是由直线或圆弧首尾相连构成的图形(或是一个整圆)。
　　如果N1为圆，则此零件外加工环S0即此圆。
2.2　建立独立的数据接口
　　该方法的思想是在CAD子系统中充分利用AutoCAD的开发平台，暂不考虑CAPP子系统的要求。首先在多任务Windows环境下物理视屏是一个共享资源。而且，无论是冲孔还是落料，其轮廓都构成闭环,它是由直线或圆弧首尾相连构成的图形(或是一个整圆)。任何试图绕过API函数都视为扰乱系统的行为。其次在Windows环境下屏幕操作根本不写到物理视屏上，即使使用API函数时也是这样。应用程序请求写文本或图形的操作，都是将信息写到虚拟屏幕也称为设备环境DC。最后Windows把虚拟屏幕映像到物理显示屏上。
2.2　图形用户接口（GDI）的客户/服务器本质
　　Windows将应用程序从具体输出设备中分离出来。在MS-DOS中，应用程序负责为所有输出设备编程。Windows应用程序不负责对输出设备编程。图形用户接口GDI为应用程序提供了一套独立于设备的标准绘图指令集。并且由于钣金产品设计加工的自身特点，以*.DXF文件作为数据文件直接作为CAPP子系统的输入信息存在许多问题。Win32应用程序在Windows95环境下都被分隔成了用户模式与核心模式。在用户模式下禁止直接取用图形设备资源，而是交给操作系统核心模式来完成。这种模式称为GDI的客户/服务器模式如图2。GDI的客户/服务器模式有效地将应用程序彼此分离，从而提高了Windows 环境的安全特性。而且任何访问输出设备的函数都留在GDI的服务器方，从而保证了入侵应用程序不能直接访问到其它应用程序的屏幕数据。

图2
3　OpenGL应用程序的图形支持
3.1　OpenGL图形软件在应用中的地位
　　OpenGL是SGI公司的IRIS GL图形工作站的分支。近年来，作为工业标准图形程序库，在CAD/CAM等需要高级的三维对象可视化和图形绘制领域得到广泛应用。OpenGL为应用程序员提供了程序和图形输入输出设备之间的功能接口，定义了一个独立于语言的图形核心系统。编写应用程序过程中，用符合语言的约定方式把OpenGL嵌入到相应的语言之中。
3.2　几何信息提取模块
　　图形实体经打碎后成为“LINE”、“ARC”、“CIRCLE”三种类型(经研究发现，对V13.0图形实体打碎到最后均为LINE、ARC、CIRCLE，如Fit拟合的Pline解碎后为Arc，Spline拟合的Pline解碎后为Line等)。由于OpenGL本身与硬件及操作系统的底层软件无关，从而使图形应用程序获得较高的可移植性。

图3
3.2　OpenGL客户/服务器图形显示方式
　　OpenGL通过客户/服务器方式实现图形显示。对于CAPP子系统，做一个数据接口软件，其任务是对零件展开图的*.DXF文件做进一步处理，内容包括：剔除非加工信息（包括不必要的工艺信息和技术说明）；修正消除几何不重合点，建立拓扑关系，找出加工环；按照事先约定指出加工环走向。OpenGL客户模块同OpenGL服务模块通信并发出应用程序的OpenGL命令。对于三个实体组成的环，直接两实体叉乘，运用右手定则判断环的走向；对于一般实体环寻找环内点，引直线进行叉乘计算判断环向，再按照约定格式输出数据到数据文件中，并将数据文件传送到CAPP子系统。一个OpenGL服务程序往往同时维护几个OpenGL环境。如不能保证闭环，更不能保证组成环的各图形元素之间的拓扑关系。OpenGL环境又叫着色环境，是OpenGL与Windows系统之间的桥梁。所有的OpenGL调用都通过着色环境来完成。OpenGL着色环境与设备环境有相同的像素格式。在为一个设备环境设置好了像素格式后就可以产生一个与之接近的着色环境。通过给出的设备环境，着色环境就可以在设备环境指出的设备上绘图。其逻辑模式如图4。

图4
　　用OpenGL去着色一个Windows窗口的典型操作过程如下：
　　. 建立正确的窗口格式；
　　. 建立像素格式；
　　. 创建设备环境；
　　. 创建一个着色环境；
　　. 将着色环境设为一个线程的当前着色环境；
　　. 线程进行有关OpenGL的初始化；
　　. 线程调用OpenGL着色函数；
　　. 当OpenGL处理结束后，将着色环境设为非当前使用的（断开与着色环境的联系）；
　　. 释放着色环境与设备环境。
3.4　数据输出模块
　　在输出时判断环的走向。
作者简介：周杰韩　博士研究生。
2.2　建立独立的数据接口
　　该方法的思想是在CAD子系统中充分利用AutoCAD的开发平台，暂不考虑CAPP子系统的要求。
作者单位：华中理工大学机械科学与工程学院　湖北.武汉(430074)
收稿日期:1999-01-27(修改稿)
