计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第9期 Vol.19 No.9 1999



数据仓库数据模型的设计
张玉芳　熊忠阳
　　摘　要　本文首先就数据仓库与传统关系数据库作了一个简单比较，然后介绍了一种适合于数据仓库设计的方法。
作者单位：北京邮电大学计算机学院　北京（100876）
参考文献
［1］　Data Warehouses and Data Marts: A Dynamic View, Author: Joseph M. Firestone, Ph. D., Executive Information System Inc. White Paper 3, March 27, 1997;(3)
［2］　Building the Data Mart, Author: Marc Demarest, DBMS Magazine, 1999;7(8):44
［3］　A Metadata Management How-To, Author: Terry Moriarty, Database Programming & Design，Feburary 1997: 57-60 
收稿日期:1999-05-07(修改稿)
。其重点在于完成事务处理，在瞬间的时间里给予用户响应。关系数据库能够处理大型数据库，但不能将其简单地堆积就直接作为数据仓库进行使用。
　　数据库主要操作对象是多维数据，因此也称为多维数据库。多维数据库的情形正好相反，其数据以阵列方式存储，既没有统一的规律可遵循，也没有统一的多维模型可遵循，更没有统一的存取数据语言或编程语言接口（API）可利用，多维数据库只能按其所属类别进行归类。对于应用来说，多维数据库应该具备极强的查询能力，因此与关系数据库相比，多维数据库中存储的信息多而广，但由于其完成的是一种联机分析处理OLAP（On-Line Analysis Process），因此不追求瞬间响应时间，在有限的时间里给予响应即被认可。实际上，OLAP包含交互式的数据查询，伴随着多种分析方法，例如下钻（drill-down）式成功地钻入到最底层的细节信息上。因此数据仓库中的信息尽管是多维的，它仍然可以用形象化的表格表示。
作者简介：杨光　硕士研究生。
表1　数据仓库与数据库中数据的比较

比较内容 操作数据仓库数据
存在时间生存期短，经常变化长期存在，相对静态
存取结果记录层的存取需求以聚集方式的集合存取，因此比RDB友好
存取方式反复的事务存取模式定期地报告式的特定查询
修改方式实时修改周期性地大批量修改装入
驱动方式事件驱动：过程产生数据数据驱动：数据支配过程
操作读写操作只读
规模几个GB可达100GB+

　　尽管数据仓库与传统数据库之间存在着如此大的差异，但我们设计数据仓库并不是完全另起炉灶，而是利用现有的传统操作数据，从中进行信息的集成，从而构造出满足不同需求的数据仓库。

图2　“自顶向下”模式
3.2　“自底向上”模式
　　“自底向上”模式（见图3）是从建立各个部门或特定的商业问题的数据集市开始，全局性数据仓库是建立在这些数据集市的基础上。从理论上说：从操作数据中策略性地引入到期的数据可以完成这个转变，但是由于受到实际存储容量和技术的限制，实际上是不可能的，而必须从操作数据中分离和提取数据进入数据仓库。
　　鉴于以上各种因素，为保证OLTP的性能，必须将数据仓库与传统操作数据相分离，为了获得数据仓库中的数据，首先必须进行数据仓库的设计。
2　数据仓库的设计
　　本文介绍的是面向主题的自顶而下的设计方法，其实面向主题就是面向对象。这些来自不同操作数据库系统的数据在经过提取(extraction)、清洁(clean)、聚集(aggregation)、转换(transformation)等操作后被存入数据仓库。终端用户通过各种维度来获取商业数据，其中时间是最基本、最关键的维度。数据仓库的设计方法同传统的数据库设计一样经历了概念模型设计、逻辑模型设计和物理模型设计三个阶段，对于面向主题的数据仓库，分别对应数据仓库中的信息包图设计、星型图模型设计和物理数据模型设计。表2给出了数据仓库和数据库开发过程中建立数据模型各阶段采用的设计方法。
表2　数据仓库与数据库各阶段的设计方法

设计阶段数据仓库数据库
概念模型信息包图数据流程图
逻辑模型星形图模型实体关联图
物理模型物理数据模型物理数据模型

　　下面分别介绍数据仓库三个模型设计阶段采用的各种技术。
2.1　概念模型设计――信息包图
　　概念模型设计也就是通常所说的需求分析，在与用户交流的过程中，确定数据仓库所需要访问的信息，这些信息包括当前、将来以及与历史相关的数据。
　　元数据是关于数据的数据，即描述数据的数据。
　　由于数据仓库的多维性，利用传统的数据流程图进行需求分析已不能满足需要。超立方体（hypercube）用超出三维的表示来描述一个对象，显然具备多维特性，完全可以满足数据仓库的多维特性。但是在开发的过程中人们发现了一些问题。
　　由于超立方体在表现上缺乏直观性，尤其当维度超出三维后，数据的采集和表示都比较困难，因此我们可以采用一种称为信息包图的方法在平面上展开超立方体，即用二维表格反映多维特征。经过调整，可以使下一阶段全局数据仓库的建设相对顺利地进行。
　　信息包图拥有三个重要对象：指标、维度和类别。指标表明在维度空间衡量商务信息的一种方法，而类别是在一个维度内为了提供详细分类而定义的，其中的成员是为了辨别和区分特定数据而设。信息包图集中在用户对信息包的需要，它定义主题内容和主要性能测试指标之间的关系，其目标就是满足用户需要。利用信息包图设计概念模型需要确定三大内容：
　　. 确定指标。指标是访问数据仓库的关键所在，是用户最关心的信息。成功的信息包可以保证用户从信息包中获取需要的各个性能指标参数。
　　. 确定维度。维度提供了用户访问数据仓库信息的途径，对应超立方体的每一面，位于信息包图的第一行的每一个栏目中。
　　. 确定类别。类别表示一个维度包含的详细信息，一个维度内最底层的可用的分类又称为详细类别。
　　从上所述可以看出：在一张平面表格上描述了元素的多维性，其中的每一个维度用平面表格的某列表示，通常的维度是：时间、地点、产品和顾客，而细化本列的对象就是类别，例如时间维度的类别可以细化到年、月、日，甚至小时。平面表格中的一个元素（对应超立方体中的一个单元格）可以表示：某年某月份，在某商店的某类产品的销售额。创建信息包图时需要确定最高层和最低层的信息需求，以便最终设计出包含各个层次需要的数据仓库。

图3　“自底向上”模式
3.3　“平行开发”模式
　　“平行开发”模式(见图4)是指在一个全局性数据仓库的数据模型的指导下数据集市的建立和全局性数据仓库的建立同时进行。
2.2　逻辑模型设计――星形图设计
　　在传统的数据库逻辑模型设计中，根据需求分析阶段获得的数据流程图，利用实体关联方法将概念模型转换为实体关联E―R图。从前所述数据仓库的需求分析阶段获得的是信息包图，同时数据仓库主要提供的是查询操作，而最便于执行查询操作的逻辑模型设计工具是星形图，因此可以利用星形图来设计数据仓库的逻辑模型。
　　星形图因其外观似五角星而得名，它支持以商务决策者的观点定义数据实体，满足面向主题数据仓库设计的需要，而信息包图又为星形图的设计提供了完备的概念基础。同信息包图中的三个对象对应，星形图拥有三个逻辑实体：维度、指标和类别。
　　位于星形图中心的实体是指标实体，对应信息包图中的指标对象，是用户最关心的基本实体和查询活动的中心，为用户的商务活动提供定量数据。每个指标实体代表一系列相关事实，完成一项指定的功能，在一般情况下代表一个现实事务的综合水平，仅仅与每个相关维度的一个点对应。

图7　“有反馈的平行开发”模式
　　事实上，在“平行模式”的开发过程中并不一定要求在开发部门数据集市之前完成整个数据仓库的数据模型的开发。另外一个实体是详细类别实体，它对应信息包图中的类别对象。一个维度内的每个单元就是一个类别，代表该维度内的一个单独层次，要求更加详细的信息才能满足用户的需要，与对应的事务数据库结构产生映射。
　　从概念模型――信息包图转换成逻辑模型――星形图，需要确定三大实体:
　　. 定义指标实体。但是在开发的过程中人们发现了一些问题。
　　. 定义维度实体。一个维度实体对应指标实体中的多个指标。用户利用维度实体来访问指标实体，其实质对应着逻辑数据实体，一个维度实体对应信息包图中的一个列。
　　数据集市有以下优点：
　　数据集市的建设周期短（只需几个月），投资小，见效快；
　　部门用户完全拥有自己的数据集市可以根据需要定制其中的数据；
　　部门用户可以自由地选择适合自己的数据集市的决策分析工具；
　　数据集市的使用可以解决各部门对数据仓库资源的竞争，提高处理速度。

图6　“有反馈的自底向上”模式
3.6　“有反馈的平行开发”模式
　　在“有反馈的平行开发”模式（见图7）中，在开发的初始阶段，开发人员主要是在全局性数据仓库数据模型的指导下建立部门数据集市，并把在建立过程中所遇到的问题及其解决方案以及用户的意见等信息，反馈给全局性数据仓库数据模型。
　　在星形图中，用户通过维度实体获得指标实体数据，其中指标实体与维度实体间的联系通过每个维度中的最低一层的详细类别实体连接。
　　当多个信息包图转换成星形图时，可能出现维度实体的交叉重叠，为了保证实体的一致性需要进行统一处理，确定它们是同一实体在不同层次上的数据反映，还是两个不同的实体。当多个维度实体相关并且存在共性时，可能需要将其合并为一个指标实体。
2.3　数据库物理模型设计――星形图转换为数据模型
　　从逻辑模型――星形图转向物理模型设计，完全遵循传统的数据库设计方法。一般来说，星形图中的指标实体和详细类别实体通常转变为一个具体的物理数据库表，而维度实体则作为查询参考、过滤和聚合数据使用，因此通常并不直接转变为物理数据库表。这是因为一方面对减少数据集市之间的数据冗余和数据的不一致来说并不需要一个完全建立好的全局数据模型，全局数据模型在指导数据集市建设的同时还要不断听取开发人员和用户的反馈信息来调整自己；另一方面部门数据集市在开发和使用过程中所得到的经验有助于开发人员在设计全局数据模型时更好地了解用户的需求。数据库及数据仓库是信息系统和决策支持系统的基础设施，没有完善的数据库或数据仓库，再好的分析工具也发挥不了作用。
3　小结
　　随着信息技术突飞猛进地发展，如何存储、管理、维护和使用信息变得越来越重要，因此数据仓库的建设就显得越来越必要。本文介绍了一种面向对象的数据仓库设计方法，在数据仓库的不同设计阶段，围绕面向主题的数据仓库，与传统数据库设计阶段相对应，介绍了各阶段的具体设计方法。
作者简介：张玉芳　讲师，在职博士研究生。这个全局的数据仓库将提供给用户一个一致的数据格式，一致的软件环境。
熊忠阳　副研究员。主要从事网络信息系统和并行技术等方面的研究工作。
作者单位：重庆大学计算机科学与工程学院　重庆（400044）
参考文献
［1］　Tom Hammergren，著. 数据仓库技术.北京：中国水力水电出版社，1998,2 
收稿日期:1999-03-12(修改稿)
