考虑AAAI会议资源,它提供了分段的会议论文,包括作者、论文名称等信息软件学报
Journal of Software



多模式下的反合一算法
许锡春　胡运发　施伯乐
摘　要　证明了多模式环境下存在最小反合一,提出了一种反合一算法,并介绍了多模式下反合一的应用。
关键词　合一,反合一,多模式,算法,相似。
中图法分类号　TP301
Anti-Unification Algorithm Based on Multi-Pattern
XU Xi-chun　HU Yun-fa　SHI Bai-le
(Department of Computer Science　Fudan University　Shanghai　200433)
XU Xi-chun
(Computing Center　Shanghai Maritime University　Shanghai　200135)
Abstract　In this paper, the existence of the least anti-unification in multi-pattern is proved and an algorithm for the anti-unification is proposed。 In addition, the application of the anti-unification in multi-pattern is also introduced。
Key words　Unification, anti-unification, multi-pattern, algorithm, similarity。特定的标记表示其中嵌入的单词或短语是一个标题,一个标题的出现就意味着一个新段的开始,因此,识别标题就是识别一页中的段。合一操作在定理证明、自动推理等方面起到重要的作用,反合一同样也是一种非常有用的操作,可以应用于类似推理、程序重写、机器学习等方面。这些年来,对反合一的研究正在加强。反合一最早是由Plotkin［1］和Reynolds［2］分别提出来的。与合一一样,反合一也存在各种形式。对于出现字体大小标记的情况,找出资源中所有字体尺寸,并且从大到小排列,对于各个尺寸字体依次生成各层对象,对于相邻的两种字体,较大字体生成的对象值作为较小字体生成对象时的资源。Page［3］研究了基于各种约束形式的反合一,基于约束的反合一可以避免过分抽象(overgeneralization)。Hasker［4］研究了二阶反合一,提出二阶反合一可以包含更多的信息,但不存在二阶最小反合一,并通过增加限制来保证得到明确的反合一。Pfenning［5］研究了基于类型的、以λ演算为基础的反合一,并提出类型也是一种约束,同样可以避免过分抽象。这些研究都有一个共同的特点：逻辑结构都是在单模式下,即对于谓词P,其模式P(a1,a2,...)是唯一的。但是，在不同的应用中可以有多种模式,例如,在面向对象的系统中允许操作重载；在类似推理中,有时一个问题可以有多种描述形式。当然,也可以用不同的谓词来表示,但是这样做,一方面,其共性不能表示；另一方面,必使谓词数目成倍增加。
　　本文对多模式下的反合一进行了研究,证明了在多模式下存在着最小反合一,并提出了计算最小反合一的算法。
关键词　启发式规则,数据抽取格式,对象交换模型。在此基础上,我们定义有关概念。
　　定义1。 模式。谓词P的模式为P（x1:t1,x2:t2,...,xn:tn),其中xi为变量,ti为类型。
　　我们采用表达式即类型的思想,把每一谓词也看作类型,即谓词P也称为类型P,并且模式也可以表示为P(t1(x1),t2(x2),.,tn(xn)),因此,模式中的参数也可以是另一模式,类似于关系数据库中的非第一范式。我们可以把（）看作是一种操作。但是,由于信息的数目巨大,网上新资源频繁加入,现存资源的格式经常变动,对WEB文档结构信息手工抽取是不实际的。 多模式。谓词P存在多个模式,其表示可以有以下两种形式：

其中［ ］表示可选。
　　定义3. 导出模式。假设P的模式为P(t1(x1),t2(x2),...,［ti(xi)］,...,tn(xn)),则P(t1(x1),t2(x2),...,ti(xi),...,tn(xn))和P(t1(x1),t2(x2),...,ti-1(xi-1),ti+1(xi+1),...,tn(xn))都是模式P(t1(x1),t2(x2),...,［ti(xi)］,...,tn(xn))的导出模式。
　　定义4. 模式包含。对于模式P1(x1,x2,...,xn),P2(y1,y2,...,ym),若P1,P2相同,对任何i∈(1,n),存在j∈(1,m),xi=yi,且对于i1<i2,有j1<j2。
　　定义5. 模式的合并。为了将用户需要的所有数据都抽取出来,并且构造出适用于各种页面格式的抽取算法,我们设计了HTML文本中各个数据片断的抽取算法,该算法采用用户指定的数据抽取格式作为输入,并结合启发式规则进行抽取处理。
　　定理1. 模式的合并是唯一的。
　　定义6. 实例。对于出现缩进标记的情况,找出资源中所有缩进距离,并且从小到大排列,对于各个缩进距离依次生成各层对象,对于相邻的两种缩进距离,较小缩进距离生成的对象值作为较大缩进距离生成对象时的资源。
　　但是当完全依靠上面的启发式规则识别一个新页结构时,可能选择出和用户意图不一致的段标题,因为段表达式和启发式规则不能覆盖所有的情况。
　　定义7. 项。项可以有以下几种形式：(1)为项；(2) 常量为项；(3) 变量为项；(4) 模式P的实例为项。 
2　反合一问题
　　反合一计算的是两个实例的最小上界。为了比较大小,类似于合一运算,可以利用替换来定义一个实例序。
　　定义8. 实例序。对于两个项t,s,若存在替换σ,使得σt=s,则定义实例序为t大于s,记为t≥s。由于在WWW上的主要信息是半结构化的［4］,不像传统数据库中的数据那样具有规则的和静态的结构,而斯坦福大学提出的OEM模型非常适于描述半结构化数据,因此抽取器的输出是OEM格式的数据。

Fig.2　HTML fragments of AAAI conference homepage
图2　AAAI会议主页的HTML文本片断

Fig.3　OEM objects extracted from AAAI homepage
图3　AAAI页面抽取出的OEM对象
1.4　结合数据抽取格式描述和启发式规则的算法
　　输入：数据抽取格式SECTXT1,SECVAR1,SOURCE1,...,SECTXTM,SECVARM,SOURCEM
　　　　　SECTXTi,SECVARi,SOURCEi分别代表第i行的段文本,段变量,资源
　　输出：页面的OEM数据OEMdata
　　OEMdata EXTRACTOR(SECTXT1,SECVAR1,SOURCE1,...,SECTXTM,SECVARM,SOURCEM)
　　按照SOURCE1的网络地址获取HTML文本
　　抽取SECTXT1中描述的左右分割符之间的文本段作为根对象值
　　创建标记为SECVAR1的根对象R0
　　将根对象SECVAR1名称和值Value记录在已处理表中
　　While(数据抽取格式描述行未处理完)
　　　　｛将已处理表中第1个记录作为当前项
　　　　While(在当前项中存在和SOURCEm一致的SECVARm对应的值Value)
　　　　　　｛将Value作为资源
　　　　　　如果SECTXTm不出现字体大小标记、缩进标记组合
　　　　　　　｛按照SECTXTm从资源中获取各文本段作为标记为SECVARm的各个对象值
　　　　　　　　如果SECVARm为常数字符串,所有子对象标记都是SECVARm
　　　　　　　　否则按照SECVARm从Value值中获取各个对象标记
　　　　　　　　　　生成对象作为标记为SECVARm对象的亲子
　　　　　　　　　　将这些亲子的SECVARm和值Value记录在已处理表中
　　　　　　｝
　　　　如果SECTXTm出现字体大小标记的组合,用启发式确定层次结构
　　　　　　｛在资源中获取所有尺寸的字体标记,从大到小记录在字体列表中
　　　　　　将字体列表中首记录作为当前字体记录
　　　　　　While(当前字体记录不为空)
　　　　　　　　｛按照当前字体标记从资源中获取各文本段作为各个对象值
　　　　　　　　按照SECVARm从资源中获取各个对象标记
　　　　　　　　生成对象作为标记为SECVARm对象的亲子
　　　　　　　　　将这些亲子的SECVARm和值Value记录在已处理表中
　　　　　　　　　将所有Value作为资源列表
　　　　　　　　　字体列表记录下移一个记录作为当前字体记录
　　　　　　　　｝
　　　　｝
　　如果SECTXTm出现缩进标记的组合,用启发式确定层次结构
　　　　　　｛在资源中获取所有尺寸的缩进标记,从小到大记录在缩进列表中
　　　　　　将缩进列表中首记录作为当前缩进记录
　　　　　　While(当前缩进记录不为空)
　　　　　　　　｛按照当前缩进标记从资源中获取各文本段作为各个对象值
　　　　　　　　按照SECVARm从资源中获取各个对象标记
　　　　　　　　生成对象作为标记为SECVARm对象的亲子
　　　　　　　　　将这些亲子的SECVARm和值Value记录在已处理表中
　　　　　　　　　将所有Value作为资源列表
　　　　　　　　　缩进列表记录下移一个记录作为当前缩进记录
　　　　　　　　｝
　　　　　　｝
　　已处理表下移一个记录作为当前项
　　　　｝
　　　　　读取下一个数据格式描述行
　　　　｝
　　　　Return OEMdata
　　该抽取算法将启发式规则纳入数据抽取格式中,即当抽取格式段文本SECTXTm中出现字体大小标记的组合、缩进标记的组合时,用启发式确定层次结构。
　　定义9. 反合一。对于两个项t,s,若存在替换σ,θ及项g,使得σg=t,θg=s,则g为t,s的反合一。
　　合一操作一般计算最大的共同实例(基于实例序),同样地,反合一操作一般计算最小反合一。
　　定义10. 最小反合一。若g为t,s的反合一,对于任何t,s的反合一q,有g≤q,则称g为t,s的最小反合一。
　　定义11. 多模式下的反合一。对于谓词P的模式的两个实例t,s,若存在替换σ,θ及P的模式的实例g,使得σg=t,θg=s,则g为t,s在多模式下的反合一。
　　由于P也是一种类型,允许g为P(x),其中x为变量。替换可以有以下几种形式：(1) x→,(2) x→Q(...),(3) x→(t1,t2,...,tn)。下例说明从AAAI-97页面的内容中创建OEM对象的数据抽取格式。
　　根据文献［1,4］的研究,在单模式下,有下面的结论。
　　定理2. 存在最小的一阶反合一。
　　定理3. 不存在最小的二阶反合一。
　　在多模式下,我们可以得出定理4。
　　定理4. 多模式下存在最小反合一。
　　证明：对于模式P的实例A,B,可以有下列3种情况：
　　(1) A,B为P的同一模式的实例。
　　(2) A,B分别为P的两个导出模式的实例。
　　(3) A,B为P的两个模式的实例(即除了(1),(2)之外的情况)
　　我们分别对这3种情况进行证明。这里,运用启发式规则,按照字体大小生成该页面的初步层次结构,对于AAAI的页面来说,存在〈h2〉、〈h3〉和〈h4〉这3种类型的字体,所以在根节点下生成3层亲子节点。
　　对于情况(2),假设P的两个导出模式为P1,P2。首先可以得到P1,P2的并集P0,根据定理1,P0是唯一的。但是,由于信息的数目巨大,网上新资源频繁加入,现存资源的格式经常变动,对WEB文档结构信息手工抽取是不实际的。根据数据格式描述行进行段变量的创建和赋值,结合启发式规则,确定各个段之间的层次结构,该页面最多有6层结构,即root→〈h2〉#〈/h2〉→〈h3〉#〈/h3〉→〈h4〉#〈/h4〉→Section→｛author,Title｝。但是,对于结构不相似的资源,例如,上海交通大学研究项目、《中国青年报》和《人民日报》抽取格式的差异很大。显然,这样构造的A0i是唯一的。各个OEM对象包含1个标记、1个类型和1个值。根据定义11,P(x)是A,B的反合一。根据数据格式描述行进行段变量的创建和赋值,结合启发式规则,确定各个段之间的层次结构,该页面最多有6层结构,即root→〈h2〉#〈/h2〉→〈h3〉#〈/h3〉→〈h4〉#〈/h4〉→Section→｛author,Title｝。
　　设P(x)不是最小反合一,则必定存在另一反合一P(y1,y2,...,yk),且k一定大于1。由于A,B为不同模式的实例,因此A,B中必存在i,使得ai,bi的类型不一致,在替换中,yi不能是yi→ai,yi→bi,只能是yi→,yi→bi（或yi→ai,yi→）。如果剩余部分能匹配(类型一致),则B的模式必包含A的模式,这与条件不符。如果剩余部分还是不能匹配,那么同样地,若存在反合一P(y1,y2,...,yk),则A的模式与B的模式必为另一模式的导出模式。另外,抽取时间不仅和文件本身的大小有关,而且和页面的层次结构有关,它随着页面层次的增加而增加。
□
3　反合一算法
　　根据上节的介绍,在多模式下,存在最小反合一,其求解算法如下。
　　算法1。 反合一算法AU
　　输入：谓词P的模式及P的模式的两个实例α1,α2
　　输出：α1,α2的最小反合一α
　　(1) 若α1,α2为谓词P的同一模式的实例，则
AU(α1,α2)＝P(...AU(xi,yi)...)；
　　(2) 若α1,α2为谓词P的一个模式的不同导出模式P1,P2的实例，
　　计算P1,P2的合并模式P0，
　　把α1,α2转化为P0的实例α11,α12，则
AU(α1,α2)＝AU(α11,α12)＝P(...AU(x1i,y1i)...)；
　　(3) 若α1,α2为谓词P的不同模式P1,P2的实例，则
AU(α1,α2)＝P(x),
其中x为一个新变量。
　　定理5。 算法AU是正确的。
　　证明：可以从定理4的证明直接导出。
4　应　用
　　多模式下的反合一可应用于许多方面。下面介绍利用多模式下的反合一来计算两个英文句子的相似性。
　　对于t,s的反合一g,也就是t,s的概括(抽象),g与t,s越接近,说明t,s越相似,t与s的相似性可以用替换δ,θ来刻画：

　　我们采用文献［6］介绍的衍生句法中的深层结构来表示英文句子,采用模式描述短语规则。例如,句子S的一个模式为

　　例1：“You and John are happy”与“I studied English yesterday”这两个句子可表示为
　　
　　反合一的结果为
　　
相似度为

　　例2：“They wrote letters yesterday”与“I studied English yesterday”这两个句子可以表示为

反合一的结果为：

相似度

　　从直觉上看,第1组是完全不相似的,而第2组是很相似的,计算结果与我们的直觉是一致的。
5　结　论
　　反合一与合一一样,是一种非常有用的操作。虽然我们可以利用现有的众多搜索引擎进行有效信息的查询,但是查询结果往往是互不相关的HTML页面,要直接查询页面上精确的信息十分困难。本文还介绍了用多模式下的反合一算法作为案例的相似性计算的方法,这一方法正应用于目前正处于实现阶段的基于案例的英汉翻译系统中。