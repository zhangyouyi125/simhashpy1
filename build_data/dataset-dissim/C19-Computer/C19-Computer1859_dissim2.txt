微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000 Vol.19 No.3 P.19-20



32位Windows应用程序的实例检测技术
高升　邱湘茹　唐世伟　贾文举
　　摘　要：对32位Windows中的实例检测技术进行了研究,并对各种检测技术进行了对比。
　　关键词：Windows95 串行通信 工业监控系统
　　目前Windows95在工业生产监控管理系统中已成为主流平台,Windows95环境下的上位机与下位机之间的串行通信是设计与开发监控管理系统和集散控制系统的重要组成部分。在一些实际系统中,经常要对实例进行控制,例如控制只启动应用程序的1个实例时,在进程中要检测是否已有1个实例启动。在16位Windows应用程序中,通过检测操作系统传送给WinMain函数的第2个参数hPrevInstance,来检测其它实例的存在。例如:
　　……
　　OVERLAPPED wrOverlapped;
　　COMMTIMEOUTS timeOver;
　　memset（&timeOver.0.sizeof（timeOver））;
　　DWORDtimeMultiplier,timeConstant;
　　timeOver.ReadTotalTimeoutMultiplier=timeMultiplier;
　　timeOver.ReadTotalTimeoutConstant=timeConstant;
　　SetCommTimeouts（hComport,&timeOver）;
　　wrOverlapped.hEvent=CreateEvent（NULL.TRUE,FALSE,
　　　　　　　　　　　　NULL）;
　　……
　　ReadFile（hComport,inBuffer,nWantRead,&nRealRead,
　　　　　　　　　　　　　　　　　　　&wrOverlapped）;
　　GetOverlappedResult（hComport,&wrOverlapped,& nRe-
　　　　　　　　　　　　　　　　　　　　alRead,TRUE）;
　　……
　　ResetEvent（wrOverlapped.hEvent）;
　　……
　　wrOverlapped是1个OVERLAPPED结构变量,OVERLAPPED结构用于指出读写操作与其它操作的重叠。另外,可充分利用Win32的多任务的特点,编写出强壮性较高、实时性较好的通信程序。例如:
　　……
　　COMMTIMEOUTS timeOver;
　　memset（&timeOver,0,sizeof（timeOver））;
　　DWORD timeMultiplier,timeConstant;
　　timeOver.ReadTotalTimeoutMultiplier=timeMultiplier;
　　timeOver.ReadTotalTimeoutConstant=timeConstant;
　　SetCommTimeouts（hComport,&timeOver）;
　　……
　　ReadFile（hComport,inBuffer,nWantRead,&nRealRead,
　　　　NULL）;
　　……
　　COMMTIMEOUTS结构用于设置超时,指定读写函数的等待时间。
1 窗口查找法
　　如果应用程序已经有1个实例在运行,那么通过调用FindWindow这个API函数可以检测到该实例的窗口句柄。与写操作相关的函数还有:SetCommBreak函数用于将写操作挂起;ClearCommBreak函数用于恢复写操作;TransmitCommChar函数用于在发送输出缓冲区中的数据之前先发送1个字符。经过分析用Windows SDK编制的程序,发现第1个实例负责向Windows注册窗口类,其它实例在创建窗口之前,总是要检测窗口类是否已经注册,若没有注册,则说明本次启动是应用程序的第1个实例。在实时性要求较高的场合建议采用这种方式。Windows95通信一般都以WOSA（Windows Open Services Architecture,即Windows开放式服务体系）模型为基础,在此模型中位于上层的应用程序通过调用各种通信API（Application Programming Interfaces,即应用程序接口）与位于下层的设备驱动程序进行数据交换!因为在工程文件打开的情况下,内存中始终存在1个应用程序设计时刻的主窗口。
2 枚举窗口法
　　窗口查找法无法区分应用程序的前窗口实例与IDE环境中的设计时的窗口实例,Windows API函数EnumWindows对这个方法进行了改进。窗口枚举函数EnumWindows需要2个参数,第1个参数指向1个实际将要查找的目标窗口与当前所有正在运行的窗口进行匹配操作的回调函数MatchProc的内存地址,第2个参数则用于返回找到的目标窗口的句柄。操作系统顺序地将当前正在运行的每个窗口传递给回调函数MatchProc,直到接收到的返回值为真;这个函数将接收到的窗口与目标窗口进行比较,若成功匹配,则返回假,以通知操作系统继续传递下1个窗口;否则返回真,以通知操作系统停止传递。
　　//Test2.DPR
　　var hWnd:Thandle;
　　begin
　　　　　hWnd:=0;
　　　　　EnumWindProc（
　　　　　　　@MatchProc,
　　　　　　　LONGINT（@hWnd）
　　　　　）;
　　　　　if hWnd=0 then begin
　　　　　Application.CreateForm（
　　　　　TMyMainForm,
　　　　　MyMainForm
　　　　）;
　　　　Application.Run;
　　End.
　　//进行匹配的回调函数
　　function MatchProc（
　　　　　　hWndFromOS:THandle;
　　　　　　hMatchedWnd:^HWND）;
　　　　　　bool;
　　　　　　stdcall;
　　var str1,str2:string100;
　　begin
　　　　Result:=True;
　　　　//获得窗口类名称
　　　　GetClassName（
　　　　　　hWndFromOS,
　　　　　　PChar（str）,
　　　　　　100
　　　）;
　　　str1:=PChar（str）;
　　　if str1=′TmyMainForm′ then begin
　　　　　　//若窗口类名称匹配,则继续比较可执行文件名
　　　　　　GetModuleFileName（
　　　　　　　hInstance,
　　　　　　　PChar（str1）,
　　　　　　　100
　　　）;
　　　str1:=PChar（str1）;
　　　GetModuleFileName（
　　　　　GetWindowLong（
　　　　　　　HWndFromOS,
　　　　　　　GWL_HINSTANCE
　　　　　）,
　　　　　PChar（str2）,
　　　　　100
　　　）;
　　　str2:=PChar（str2）;
　　　if str1=str2 then begin
　　　　　hMatchedWnd^:=hWndFromOS;
　　　　　Result:=False;
　　　　end;
　　　end;
　　end;
　　上述匹配过程,除了像窗口查找法那样进行窗口类名称比较外,还比较应用程序可执行文件的名称,因而克服了窗口查找法的不足。即使在设计时刻的Delphi IDE环境内,也可以正常工作。注意,WaitCommEvent函数第3个参数1pOverlapped可以是1个OVERLAPPED结构的变量指针,也可以是NULL。当应用程序启动时,首先调用API函数CreateMutex,以某一名称（本文中为FirstInstance）创建1个互斥信号量,然后发出WaitForSingleObject API调用,如果互斥信号量没有被其它进程占用,则WaitForSingleObject立即返回;反之,如果互斥信号量已被其它进程占用,WaintForSingleObject会等待,直至互斥信号量被释放。这样,在异步读写完成时,Windows95发送该事件信号。解决这一问题的方法是检查COMSTAT结构的cbInQue成员（COMSTAT结构存放端口状态信息,可以通过调用ClearCommError函数获取其值）,该成员的大小即为接受缓冲区中处于等待状态的数据的实际个数