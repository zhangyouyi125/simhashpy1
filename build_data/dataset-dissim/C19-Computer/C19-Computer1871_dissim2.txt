微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000 Vol.19 No.3 P.45-48



建立3层结构企业信息平台的方法与研究
刘茂诚
　　摘　要：提出了二种3层结构信息平台Unix操作系统下的ORACLE WEB SERVER 2.0和WINDOWS NT4.0上的IIS4.0(Internet Information Server 4.0)的应用实例,阐述了3层结构的实用性和科学性,并提出了一些技术疑难的解决方法。
　　关键词：3层结构 企业信息平台 数据库
　　20世纪80年代兴起的客户机/服务器（Client/Server,简称为C/S）结构应用,是伴随着网络数据库技术的应用发展起来的。它将1个复杂的网络应用和生动、直观的用户界面相分离,将大量数据运算交给了后台去完成,提高了用户交互反应的速度,应用开发简单,开发工具种类多而成熟,对网络数据库的应用起到了较大的推动作用。
　　随着信息技术的进一步发展,C/S结构暴露出一些问题,即客户端需要安装大量的软件,机器需要较高的配置,客户端的维护频繁,用户需要进行专门培训才能操作。这样,系统运行成本就一直呈上升趋势,从某种程度上限制了网络的应用范围,必须对原来基于C/S的MIS进行改进。为此,我们建立了目前流行的3层结构应用,既充分利用原来的资源,又排除了原系统的弊端,达到科学性、实用性和经济性三统一的目的。
1 3层结构简介
　　随着Internet/Intranet技术的发展,人们已不再满足于静态的信息发布,开始将Web与数据库相结合,形成了基于数据库的Web计算模型,并将这种计算模型应用到Internet/Intranet中,最终成为3层客户机/服务器的应用结构。可以说,没有数据库,也就没有3层结构的应用。
　　JNIEXPORT jint JNICALL Java_jMPI_Get_processor
　　_name（JNIEnv env,jobject obj,jstring jname,jint jlen）
　　｛
　　　　char＊cName;
　　　　jint＊jval;
　　　　/＊Get string information＊/
　　　　cName=（char＊）getJavaString（jName）;
　　　/＊Call MPI routine＊/
　　　jval=（jint）MPI_Get_processor_name（cName,jlen）;
　　/＊Free memory＊/
　　releaseJavaString（jName,cName）;
　　return jval;
　　2.在Java端,编写Java程序jMPI.java实现jMPI类。

图1 3层结构图
　　3层结构是这样划分的:第1层是表示层浏览器,主要完成用户和后台的交互及最终查询结果的输出功能。过程如下:
　　javac jMPI.java
　　javah-jni jMPI
　　4.编译jMPIInterface.c文件并把它生成动态链接库libjMPI.so。第2层是具有CGI或ODBC接口的Web服务器,属于功能层。然而,从头到尾用Java来编写1个jMPI类是没有必要的,可以利用Java的JNI技术,在编写jMPI的方法时通过调用相应的MPI C函数库来完成对应的Java MPI功能。Web服务器接受客户申请,首先需要执行CGI或其它服务程序,与数据库连接,进行申请和运算,最后将处理结果返回Web服务器,再由Web服务器传至客户端。第3层数据库服务器是数据层。数据库服务器接受客户请求后独立地进行各种运算。由于处理完全交给了数据层完成,功能层发生变化不会影响到数据层的改变,因此,3层结构在软、硬件环境发生变化时的适应能力比C/S模式的2层结构强得多,即具有更强的可伸缩性。
2 3层结构的开发、运行平台的选择
　　解决应用系统对后台数据库的访问是3层结构的开发中的核心问题,我们通过深入调研,结合自己的网络应用实际,确定了2种平台,下面做详细介绍。
2.1 Oracle Web Server2.0（以下简称Web2）的应用
　　我们在原来的MIS开发中,数据库平台选用了Oracle,所以首选的3层结构开发平台是Web2,Web2是Oracle数据库厂商1996年推出的专用Web服务器,它采用了WRB（Web Request Broker,Web请求代理）技术,支持基于Oracle数据库的WEB开发应用。Web2是一个高性能、多线程和多进程的HTTP服务器,直接通过WRB提供动态的HTML页面,WRB将所有的服务器扩展都作为1个单独的进程执行。客户机的请求直接分布到Oracle服务器执行而不需编写繁琐的CGI程序。
2.1.1 Oracle Web Server2.0的工作过程
　　Oracle Web Server2.0的工作原理示意图如图2所示。

图2 Oracle Web Server2.0工作原理图
　　（1）在Web浏览器上,用户单击包含后台应用的URL。这种特性为将可执行软件包传输给网络上的每个用户提供了一个简单、直接的方法。使用Java语言编写MPI应用程序将解决原有MPI应用程序的平台兼容问题。
　　MPI与其它并行编程环境（如PVM,express等）相比,使用简单、编程方便。转接器会找1个空闲的、配置成运行所需要的WRB服务执行引擎,并把执行权交给该引擎,结果是监听器能接收并确认请求的统一资源定位有效,而每1个请求被传递到在后台执行该请求的进程。
　　（4）每个WRB执行引擎使用WRB应用编程接口和Web请求代理组件（WRB Cartridge）接口。在编写MPI程序时,首先必须要调用MPI_Init库函数初始化,然后才可以调用MPI库函数MPI_Comm_rank获得进程标识,并通过MPI库函数MPI_Send和MPI_Recv发送和接收消息,程序的结束必须调用MPI_Finalize库函数。
　　PL/SQL代理（PL/SQL Agent）:该组件执行存储在数据库中的PL/SQL命令。它比Java组件更优化了对数据库的访问,但它不具有Java的全部功能。在该程序中用native关键字来声明在jMPIInterface.c中实现的本地方法。使用它可以从Java中执行PL/SQL命令。
　　LiveHTML解释器:该组件是Oracle在工业标准服务器端内置（SSI,Server Side Includes）功能的实施和扩展。LiveHTML可以将用户操作系统能运行的任何程序的输出结果包含在用户的Web页面之中。
　　MPI与其它并行编程环境（如PVM,express等）相比,使用简单、编程方便。如Java Applet可以嵌在HTML主页中,由支持Java的浏览器自动下载和执行。1个统一资源定位（URL）在请求PL/SQL代理时必须在其中指明相应的与数据库连接的描述文件,这个文件是1个由Web Server维护的系统文件,该文件提供建立数据库连接的用户名、口令、数据库名及其它一些访问数据库所需要的信息。该描述文件决定了PL/SQL代理在执行该请求时,能访问哪一个数据库以及能访问数据库中的哪一部分。在编写MPI程序时,首先必须要调用MPI_Init库函数初始化,然后才可以调用MPI库函数MPI_Comm_rank获得进程标识,并通过MPI库函数MPI_Send和MPI_Recv发送和接收消息,程序的结束必须调用MPI_Finalize库函数。例如,配置的DCD文件名是“glxx”,那么统一资源定位就应该是:http//servername（或地址）/owa/glxx/package_name。
　　（2）创建可以在Oracle数据库中执行的PL/SQL程序包（Package）,可以使用任何文本编辑工具完成,该包体包括二部分,一部分对数据库进行操作,另一部分将操作结果按HTML标准格式转化成可供浏览的页面。在编写MPI程序时,首先必须要调用MPI_Init库函数初始化,然后才可以调用MPI库函数MPI_Comm_rank获得进程标识,并通过MPI库函数MPI_Send和MPI_Recv发送和接收消息,程序的结束必须调用MPI_Finalize库函数。在系统应用过程中,返回给用户的是HTML文件,不产生额外的物理文件。
2.1.2 Oracle Web Server2.0的应用分析
　　（1）Web2上的编程思路依托于Oracle库,对Oracle访问速度快,所以对Oracle应用密集的区域和精通Oracle的开发者来说,选择Web2作为3层结构平台是一个理想的选择。
　　MPI与其它并行编程环境（如PVM,express等）相比,使用简单、编程方便。尤其在多用户对其并发访问时,容易产生难以释放的进程,大大降低了服务器的吞吐能力,甚至可能导致数据库停止工作,这是Web2的一个致命弱点。而选用Oracle8没有发生过上述故障。
　　（3）Oracle Web Server只能够为Oracle的数据库提供Web服务,在实际应用中限制了Web Server对异构数据库的访问,这是一个大的不足。特别是它支持网络的极具吸引力的特征。
　　（4）Oracle Web Server对系统的软、硬件平台要求严格,系统运行成本较高。首先Java的源代码可以被编译成与机器平台无关的字节码形式,字节码对平台的独立性可以保证运行过程与平台的独立;其次,Java广泛的应用环境。从而导致它们不能很好地适应用户的各种异构型网络,特别是Internet网络。
2.2 WEB SERVER IIS4.0的应用
　　IIS4.0及其ASP（Active Server pages）技术的应用运行在Windows NT平台上,用活动数据对象ADO（ActiveX Data Object）组件并通过ODBC（Open Database Connectivity）标准数据库界面访问多种数据库,解释并发布信息。这种模式在WEB开发中应用得越来越广泛。
　　微软的NT 4.0内置IIS 4.0,由其负责接收客户端的WEB请求,调度每一个请求进程,并给予应答。IIS 4.0 Web服务器增加的数据库访问能力,是通过在IIS 4.0服务器上增加了扩展的应用程序ASP服务以及能完成对各种数据源进行访问的活动数据对象（ADO）组件实现的。过程如下:
　　javac jMPI.java
　　javah-jni jMPI
　　4.编译jMPIInterface.c文件并把它生成动态链接库libjMPI.so。
　　（2）Web服务器判断用户请求,如果请求的是一般的静态页面（后缀是.htm）,则在服务器文件系统找到所需的页面作为最终结果返回给用户。如果用户请求的是内嵌在服务器端执行的脚本语言的程序调用（后缀是＊.asp）,则启动相应的ASP服务程序,动态生成页面返回给用户。
　　（3）ASP程序使用ADO来完成对各种数据源的存取。ADO作为Web服务器端的一种扩展,它允许基于Web的应用程序的开发人员编写服务器端的脚本以扩展基于Web的应用程序的能力。当Web服务器得到的请求是含SQL语句的程序时,由该对象组件负责处理页面中内嵌的SQL语句,访问数据库并返回处理信息,将结果组织成标准的HTML文本,返回给浏览器用户。
　　由于以上原因,MPI已成为目前比较流行的网络并行编程环境。服务器端的脚本一般用VB Script来写,这些用高级语言编写的脚本在服务器端执行,所以它们不依赖于任何客户端的操作系统或浏览器。
　　（4）在服务器端基于VB Script建立ADO页面。具体步骤是:创建ADO中的ADODB对象;打开与ADODB对象的连接;在打开的连接上创建数据结果集,对数据结果集里的数据进行操作;最后关闭连接。
　　应用程序对数据库的访问是通过数据库访问ADO实现的,主要包含启动Web服务器和数据库服务器之间的会话,定义数据库服务器的调用,即分析SQL语句的语法有效性;为SQL语句打开光标（Cursor）;把Web应用程序中的变量粘接起来送入数据库服务器共享的存储器中;说明要返回字段的内容,这些字段以服务器的数据结构中的值为依据;在光标存储器空间内执行SQL语句;取1个或多个数据行送入Web应用程序页面中;关闭光标。
　　下面一小段程序代码可以说明上述步骤。
　　Set conn=server.createobject（″ADODB.Connection″）
　　Conn.open ″info_source″,″orauser″,″orapasswd″
　　Set RS=conn.exexcute（″select ＊ from authors″）
　　……
　　Conn.Close
　　可见应用系统是通过ADO对数据库的访问而实现的。一般情况下,ADO并不直接对数据库访问,而是通过对ODBC数据源的访问实现对数据库的访问。具体操作可通过ODBC接口的驱动程序完成。因此要访问不同的数据库只需创建相应的ODBC就行了。这样一来,为开发者提供了简单、标准、透明的数据库连接的公共编程接口,而由数据库厂商根据ODBC标准去实现各自底层的驱动程序,并根据不同的数据库管理系统采用不同的技术加以优化实现。ODBC为异构数据库的互连提供了保证。创建ODBC的过程如下:
　　首先在WEB服务器WINDOWS NT上安装访问数据库的ODBC驱动程序,利用ODBC检测工具软件测试与数据库是否连通（如运行ORACLE ODBC TEST）。在控制面版中参考表1对ODBC进行配制。
表1 Microsoft ODBC
Microsoft ODBC for Oracle安装
数据源名称(N)glxx
描述(D)管理信息
用户名称(U)useriis
服务器(S)Ora8

　　选择该平台的优点之一是ADO对象组件提供了相当多的数据对象操作方法,服务器端的VB脚本语言也提供了相当多的CGI接口函数,应用系统功能的实现比较灵活、容易,可以将应用程序移植于异种数据库平台环境中。本文主要介绍如何实现Java语言的MPI。
3 系统开发过程中的技术问题
3.1 建库（表）过程
　　无论用什么工具进行3层结构的开发,建库过程是必需的一步,如果在浏览器上建立原始库（表）结构,就显得有些迟钝了。最好的方法还是用C/S下的开发工具来帮忙。我们就是选择了用POWERBUILDER建库,速度快,操作又特别简单。
　　在IIS 4.0 WEB SERVER上需要安装Oracle的通信软件SQLNET或NET8,其中可能遇到汉字不能正常显示的现象,这是因为安装过程中选择了错误的字符集所致。下面列出在jMPIInterface.c中jMPI的spawn本地方法的实现代码。解决的方法是:在WIN NT下运行注册表编辑程序REGEDIT,选择HKEY_LOCAL_MACHINE,再选择SOFTWARE,再选择Oracle,然后选择NLS_LANG（语言的国际支持）,键入和服务器端相同的字符集。例如服务器端的字符集为AMERICAN_AMERICAN.US7ASCII,在此也输入此项就行了。
3.2 选择FRONTPAGE98建立页面框架
　　好的开发工具可以大大加快系统的开发进程,降低开发成本,它是影响应用系统开发周期的重要因素。基于ASP技术的开发,目前还没有理想的工具。有一些工具如Frontpage98,可以编辑HTML页面,但难以实现和后端数据库之间的复杂交互。在IIS上的开发,可用Frontpage98编写出页面框架,再将VB Script嵌入,这样既能使页面美观,又能访问数据库。
3.3 WEB页面中帧（Frame）的使用
　　巧妙使用帧可以使界面布局更加合理,带来好的视觉效果。
　　JNI（Java Native Interface）是1个本地编程接口,它定义了一个标准的命名和调用协定,以允许运行在Java虚拟机中的Java代码与用其它语言（C,C++和汇编）写的应用程序和库进行交互。上半部分是用户对话界面,下半部分是返回的输出结果页面,如统计结果。如不采取分帧方式,用户需退出结果页面后,再进入条件输入页面,影响效率。
3.4 3层结构上的Java开发
　　Java已发展成为Internet/Intranet异构网络环境的最热门的程序设计语言,我们主要用Java小应用程序（Java Applet）绘制各种统计图形,数据由Oracle WEB SERVER或IIS提供,根据这些数据,用Java绘出对比图形,可用J++编程。
　　表达统计数据最直观的方式是根据数据绘制曲线,曲线可以是直方图或折线图。
1 实现原理
　　MPI系统使用非常简单,它提供给用户的只是一组库程序（libmpi.a,libampi.a,libmpich.a等）。而且如果采用1个绝对的值,要满足大数据的显示,小的数据看起来就接近于零了,无法对它们再进行比较。因此,采用相对坐标。对Y轴,先选出这一组数据中最大的,它的高度是固定的,然后根据它的值计算出坐标Y轴的刻度,并绘制出其它数据的高度。对X轴,根据每组数据的个数来划分X轴刻度。采用的方法是:标题和统计数据由HTML的param参数标注提供,统计的数据个数没有限制;根据数据的个数（可能是随机的）和取值画出带刻度的X、Y轴;用折线法连接每个数据点的同时标出该点的数据值,或用直方图表示出每个数据点的值。
3.5 系统的安全措施
　　系统的安全性可以从二方面加强,一是使用Web服务器提供的安全机制,对Web服务器的访问基于确定的主机（IP地址）和合法的用户（用户在访问时必须提供用户名和口令）,另一方面开发者通过对应用系统增加安全性功能来实现。具体在本系统中是通过在数据库中增加合法用户表,记录合法用户的单位等信息,以便应用程序按照数据的单位代码属性划分数据,具体过程如下:
　　（1）用户输入单位名称、用户名、口令,并且将输入值进行复杂运算,然后提交Web服务器验证用户的合法性,避免从URL栏里显示出用户口令。
　　（2）Web服务器查询后端数据库中合法用户表,验证3个输入数据正确无误后,提供给用户正常的使用界面。
　　（3）当用户转去使用其它页面功能时,Web服务器负责将加密的用户信息传至下1页,该页在执行时,同样要验证用户的合法性,无误后,用户可以使用该页功能。这种做法,主要考虑到Web计算松散的缺点,防止非法用户从中间切入。
刘茂诚（山东省东营市胜利石油管理局信息中心257001）
收稿日期：1999-09-20
