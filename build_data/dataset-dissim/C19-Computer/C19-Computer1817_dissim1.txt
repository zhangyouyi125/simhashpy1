微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000　No.19　No.1　P.53-54




WINDOWS环境下动态设置打印机参数
铁治欣　陈奇　俞瑞钊
摘 要： 一种动态设置打印机参数的方法。在程序中运用此方法，用户在打印时只需在打印机中放入合适的纸张，而不用考虑打印机的设置。 
关键词： 打印机 注册表 动态设置
1 问题的提出
　　在许多应用系统中，常常需要打印各式各样的票据和报表，它们经常是没有统一的格式，所需的打印纸也就大小不一，有的甚至有专用的格式。因此，如果我们不对打印机的设置进行有效的控制，就要求用户在运行这些系统时不断地更改打印机设置，以适应系统的需要。一般情况下，用户会觉得用这样的软件很麻烦，并且经常会出现错误。主要体现为以下几点：
　　（1）可扩展性差。ActiveX可以做到操作系统级兼容，即在Windows平台下运行，支持Windows平台下的各类开发工具，如Visual C＋＋、Visual Basic、Visual Foxpro和PowerBuilder等等；JavaBean在所有支持Java的平台上皆可运行。基于此，本文给出了一种比较自动和通用的解决方法。
　　目前，用3层C/S结构开发的应用还不太多，一般在下列情况下应考虑采用3层结构。
2 动态设置打印机
　　在WINDOWS 95环境下，与计算机设置有关的信息全部记录在注册表(REGISTRY)中。WINDOWS 95在用到某一设备或程序时，它就到注册表中取出有关这一设备或程序的设置信息。当增加1台设备时，WINDOWS 95就会在注册表中增加相应的项目；当修改某一设备的设置时，WINDOWS 95也会对有关这一设备的注册项目进行修改。所以我们可以通过动态修改注册表中的有关打印机设置的信息来达到动态设置打印机的目的。根据性能和维护的需求、网络带宽以及其它因素，可以在网络上灵活地部署这些组件。在3层C/S结构中，对应用和数据的存取权限可以按层进行设定。
表1 打印机参数表

设置项目偏移量字节数说明
纸张设置0x2F2打印机纸张类型，256为用户自定义纸张，小于256的数值为该打印机能打印的标准纸张的编号，随打印机类型改变。
纸张长度0x312当纸张设置为256（即用户自定义纸张）时才有用，意义为要设置的打印纸的长度（以0．1毫米为单位）。
纸张宽度0x332当纸张设置为256（即用户自定义纸张）时才有用，意义为要设置的打印纸的宽度（以0.1毫米为单位）。
打印方向0x2D20x01-纵向打印，0x02-横向打印。
进纸方式0x3920x04-手动送纸，0x08-传纸器。

　　下面我们给出这种动态设置方法在PowerBuilder(PB)中的实现方法。若业务进一步扩大，用户数进一步增加，则可以继续增加功能层的服务器数目，用以分割数据库。具体应用时，可以用第1个函数将打印设置为我们需要的状态，并将打印机的原状态保存起来，再用第2个函数将打印机状态恢复。这2个函数的具体实现如下所示。
//函数功能：用自定义参数设置打印机
//输入参数：al＿Lengn-打印纸长度，al＿Width-打印纸宽度
//　　　　　ai＿PaperSource-进纸方式，ai＿PrintDirection-
//打印方向输出参数：ablb＿setvalue-打印机的原参数
//返回值：1-成功，0-不成功
Gf＿PrnSetting(long al＿Lengh，long al＿Width，int ai＿PaperSource，int ai＿PrintDirection，blob ablb＿setvalue)
constant string cls＿valuename＝″Default DevMode″
constant uint clu＿pos＿width＝51
constant uint clu＿pos＿length＝49
constant uint clu＿pos＿papersize＝47
constant uint clu＿pos＿papersource＝57
constant uint clu＿pos＿printdirection＝45
constant uint clu＿usersizepaper＝256
blob lb＿value，newvalue
string ls＿key，ls＿printer
int li＿ret
li ret＝RegistryGet(″HKEY＿LOCAL＿MACHINE\Config\0001\
　　　　　　　　System\CurrentControlSet″＋＆″\Control\Print\
　　　　　　　　Printers″，′default′，RegString!
　　ActiveX标准非常适合为企业级的客户/服务器系统构造分离的组件：
　　（1）构造远程组件和构造本地组件的编程方法一模一样，无须特殊的编程经验！″，Excla－ mation!)
　　RETURN 0
END IF
ls＿key＝″HKEY＿LOCAL＿MACHINE\System\CurrentControlSet\
　　　　　control\Print\Printers\″＋ls＿printer
RegistryGet(is＿key，cls＿valuename，RegBinary！，lb＿value)
ablb＿setvalue＝lb＿value
lb＿newvalue＝blobmid(lb＿value，1，clu＿pos＿papersize－1)＋
　　　　　　　blobmid(lb＿value，clu＿pos＿width＋2)
blobedit(lb＿newvalue，clu＿pos＿papersize，clu＿usersizepaper)
blobedit(lb＿newvalue，clu＿pos＿length，al＿Length)
blobedit(lb＿newvalue，clu＿pos＿width，al＿Width)
lb＿value＝lb＿newvalue
lb＿newvalue＝blobmid(lb＿value，1，clu＿pos＿papersource－1)
　　　　　　　＋blobmid(lb＿value，clu＿pos＿papersource＋1)＋
　　　　　　　＆ blobmid(lb＿value，1，clu＿pos＿printdirec－
　　　　　　　tion－1)＋blobmid(lb＿value，clu＿pos＿printdi－
　　　　　　　rection＋1)
blobedit(lb＿newvalue，clu＿pos＿papersource，ai＿papersource)
blobedit(lb＿newvalue，clu＿pos＿printdirection，ai＿printdirection)
ls＿key＝″HKEY＿LOCAL＿MACHINE\System\CurrentControlSet\
　　　　　Control\Printers\″＋ls＿printer
li＿ret＝RegistrySet(ls＿key，cls＿valuename，RegBinary!由于采用ActiveX技术，每个功能层部件都有标准的接口，这样就可以将系统中的一些部件接口，提供给客户进行2次开发，客户可以重写自己的客户端程序和自己的浏览器程序，也可重写满足特殊需要的功能层部件，此外还可添加新的部件！
　　3．数据层
　　数据层就是数据库管理系统（DBMS），负责管理数据的定义、维护、访问和更新，以及管理并响应业务服务的数据请求！)
　　RETURN 0
END IF
RETURN 1
//函数功能：恢复原打印机设置
//输入参数：ablb＿setvalue-打印机原设置串
//输出参数：无
//返回值：1-成功，0-不成功
Gf＿PrnSettingBack(blob ablb＿setvalue)
int li＿ret
string ls＿printer，ls＿key
constant string cls＿valuename＝″Default DevMode″
li＿ret＝RegistryGet(″HKEY＿LOCAL＿MACHINE\Config\0001\
　　　　 System\CurrentControlSet″＋＆″\Control\Print－
　　　　 ers″，′default′，RegString!，ls＿printer)
IF li＿ret＜＞1 THEN
　　MESSAGEBOX(″系统提示″，″打印机未设置！″， Exclamation!)
　　RETURN 0
END IF
ls＿key＝″HKEY＿LOCAL＿MACHINE\System\CurrentControlSet\
　　　　　Control\Print\Printers\″＋ls＿printer
li＿ret＝RegistrySet(ls＿key，cls＿valuename，RegBinary!，
　　　　　lb＿newvalue)
if li＿ret＜＞1 then return 0
return 1 
　　本文所提供的程序在1台内装WINDOWS 95操作系统的PentiumⅡ266计算机上用PowerBuilder 6．0和Epson LQ－1600K打印机调试通过，并在我们开发的MRP/ERP系统中得到应用，效果良好。对于其它开发工具及其它打印机型号，其实现方法和上面给出的相类似。它是单一服务器且以局域网为中心的，所以难以扩展至大型企业网或Internet