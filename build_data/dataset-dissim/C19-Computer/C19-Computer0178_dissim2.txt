软件学报
JOURNAL OF SOFTWARE
宽带IP路由器的体系结构分析
徐恪　熊勇强　吴建平
摘　要：随着宽带技术的不断发展,组建主干网的路由器必然需要以千兆比特以上的速率转发分组,而基于总线和中央处理器的路由器具有无法克服的局限,这就对传统的路由器体系结构提出了严峻的挑战。该文全面综述了近年来在宽带IP(Internet protocol)路由器方面研究的最新进展,详细分析了用于主干网互连的宽带IP路由器的体系结构设计,最后,指出了该领域中需要进一步研究的问题。
关键词：宽带,IP(Internet protocol),路由器,体系结构。另外,随着电子商务等关键性应用在网上的运行,任何例外的服务中断都将造成不可估量的损失,因此服务器的可靠性也越来越重要。传统的基于总线和中央处理器结构的路由器由于其体系结构上的局限,已经无法满足组建高速主干网络的需求。近年来,国际上对宽带IP路由器技术的研究也日益活跃,提出了几种不同的研究和设计思路［1,2］,其基本思想主要包括4个方面:（1） 将路由引擎（routing engine）和转发引擎（forwarding engine）分开,将局部转发表从全局路由表中独立出来;（2） 用快速的硬件实现IP报文的报头处理、寻径和转发;（3） 用多个分布式的接口单元加中央控制器的模式取代中央处理器加接口卡的模式;（4） 用交换结构（switch fabric）提高各接口单元之间的数据通信速度。从研究趋势来看,IP路由技术的发展已经和交换技术以及宽带技术的发展有机地结合在一起。本文综述了目前宽带IP路由器所采用的主要的体系结构,详细讨论了其中的技术难点和相应的解决方案,并提出了进一步的发展方向。
　　本文第1节分析IP路由器的4种主要体系结构。第2节论述宽带IP路由器设计中存在的主要问题。③ 系统的可靠性和可维护性差,一台服务器失效或管理员对其进行维护,均会导致域名已被解析到该服务器上的用户出现服务中止。第4节总结了全文,并指出了进一步的研究方向。
1 IP路由器的体系结构分析
　　从体系结构来看,IP路由器经历了从单处理器到并行处理器、从共享总线到交换结构的发展过程。我们可以把它划分为以下4种类型。
　　单处理器共享总线式体系结构。这是第1代路由器主要采用的体系结构:基于单个通用CPU,使用实时操作系统（如图1(a)所示）。采用这种体系结构主要是考虑到网络协议经常发生变化,而运行多个协议的路由器不可能针对某种特定的协议进行优化,此时连接的建立和管理比高转发能力更重要。这种体系结构的路由器可以使用通用计算机来实现,与一般的通用计算机不同的是,它具有多块网络接口卡,网络接口卡之间通过系统总线相连。到达网络接口的报文首先被送到中央处理器,由中央处理器上运行的路由引擎决定下一跳的地址,并把它送到相应的输出网络接口上。路由协议和其他控制协议均在中央处理器上实现。
　　显然,这种路由器的性能主要由共享总线的吞吐率和主CPU转发报文的速度决定。由于主CPU必须执行多个实时操作,因此,操作系统的选择相当重要,而实时操作系统的设计也比较复杂,因此,这种体系结构的可扩展性（scalability）比较差,而且很难与网络接口卡接口速率的提高相适应。
2.3　故障检测
　　我们采用两种方法来检测故障。在第1代路由器中,所有的路由计算都在中央处理器上进行,在高速和动态变化的网络环境下,路由计算的能力将制约路由器的转发速率。第2代路由器（如图1(b)所示）采用的多处理器共享总线式体系结构的路由器把转发计算分布在各个处理器上,从而有效地解决了路由计算能力的问题。
　　在多处理器共享总线式体系结构中,网络接口卡具有本地的快速处理器和高速缓存以及具有独立处理分组的能力:每个连接的第1个包被送到主CPU的路由引擎上进行处理,路由引擎在得到输出接口卡的端口号之后,将其传给输入网络接口卡,输入网络接口卡就在本地高速缓存中增加一个表项。这样,该连接以后的分组就可以直接在网络接口卡之间交换而无需再经过主CPU。
Table 1　Brief testing results of Webserves
表1　Web服务器性能测试结果
　Requests per second (GETs/s)①Throughput (Bytes/s)②Processing delay③(ms)
Single Web Server④97648。我们可以为每个连接建立一项转发表项（one forwarding item per connection,简称OFIPC）,也可以每条路由建立一项(one forwarding item per route,简称OFIPR),如果采用OFIPR,即使连接数非常多,高速缓存表项也不会太大。
　　这种体系结构的主要问题是共享总线的容量限制,共享总线的容量直接限制了路由器的吞吐率,成为系统无法避免的瓶颈。另一个问题是,这种体系结构很难用在主干网络路由器上。由于主干网络路由器往往具有很高的包转发速度,因此,在网络接口卡上的路由一般不具有局部性。测试软件是美国ZD LABS的WebBench 1。为了解决这一问题,可以在每个网络接口卡上都存放完整的路由表,这样可以进一步增强这种路由器的能力。
　　多处理器交换式体系结构。为了解决第2代路由器中的系统总线瓶颈问题,人们提出了多处理器交换式体系结构（如图1(c)所示）。在这种体系结构中,第2类结构中的系统总线被交换结构所代替。交换结构可以提供比共享总线高得多的带宽,足以支持现有的高速网络接口。另外,域名到IP地址映射的TTL(time to live)值较难设定,太大,则负载不平衡更严重;太小,则频繁的域名解析使RR-DNS成为系统中一个新的瓶颈。在这种路由器中,每个报文的处理成了新的瓶颈。为了提高报文处理的速度,人们又提出了新的体系结构。
　　共享并行处理器交换式体系结构。在文献［1］中提出了并行报文处理的方法,使用这种方法可以极大地加快报文处理速度。一种方法是,资源监测器每隔t毫秒对每个服务器发ARP（address resolve protocol）请求,若有服务器过超r毫秒仍没有响应,则说明该服务器已发生故障,资源监测器通知调度器将该服务器的所有服务进程调度从调度列表中删除。其基本思想是：通过RR-DNS服务器把域名轮流解析到这组Web服务器的不同IP地址,将负载分到各台服务器上,从而提高整个系统的性能。客户机是一般的PC,共有6台,运行Windows 95/NT操作系统。需要注意的是,这里只需要把报文的头部送交转发引擎。这样做可以减少互连结构上不必要的报文传输负载。报文体只在接口卡之间传递。
　　在这种体系结构中,只要有足够的转发引擎,就可以使路由器具备高速主干网络需要的转发能力。使用这种体系结构是因为单一的转发引擎没有足够的能力处理所有的网络接口卡的突发性的传输请求。因此需要在多个网络接口卡之间共享多个转发引擎。
　　从物理上来说,转发引擎既可以和网络接口卡做在一起,也可以相互独立。如果转发引擎在物理上是独立的部分,那么通过调整转发引擎和网络接口卡的比例就可以增大或者减少包转发率,文献［3］中讨论的50Gb的IP路由器就使用了这种方案。但是,把转发引擎和网络接口卡分开会给交换结构带来额外的负担,而且在多个转发引擎之间还需要使用负载平衡机制。调度器需要记录各个服务器已建立TCP连接的数目,当某台服务器被调度时,其连接数加1；当连接中止或超时的时候,其连接数减1。对改写后的报文,应用增量调整Checksum的算法调整TCP Checksum的值［8］,避免了扫描整个报文来计算Checksum的开销。实际上,这种体系结构就是多处理机交换式体系结构。使用这种体系结构必须保证单个的转发引擎能够满足网络接口卡的突发性的传送请求。
2 宽带IP路由器设计中的主要问题
　　目前的宽带IP路由器主要采用第1节中提到的第3种和第4种体系结构。下面,我们将主要讨论这两种体系结构的路由器的设计问题。为此,使用基于权值的轮转调度算法,用相应的权值表示服务器的处理性能,将请求数目按权值的比例分配到各服务器。在共享总线式的结构中,这是系统的主要瓶颈。在交换式结构中,由于交换结构的带宽很高,报文转发不再是系统的主要瓶颈。另一处是报文的路由,即在转发表（也称为路由表）中查找路由。当一个报文到达时,路由器必须根据其目的地址在转发表中查找目的端口号。一般来说,转发表按照如下的形式保存路由项:〈目的网络地址/掩码,逻辑端口号〉;当接受到目的地址为A的报文时,输入端口将会遍历转发表,使用掩码和A进行与操作,如果结果和相应的网络地址一样,该端口就成为候选端口之一。最后选择的端口将是所有候选端口中相应的掩码最长的端口,这被称为最长前缀匹配（the longest prefix match）。举例来说,如果一台路由器的路由表中有如下3项:〈166。系统的源程序和使用说明已在网上发布 ,至今已经被访问了6 000多次。1。5/16,1〉,〈166。111。225。0/18,3〉,〈128。0。0。它们都将到达的HTTP请求转发到不同的Web服务器,取得结果后,再返回给用户。那么,一个目的地址为166。111。195。1的报文将会同时匹配前两项。由于端口3对应的路由表项的掩码最长,因此,该报文的目的端口应该是端口3。一般地当服务器组数目增加时,调度器会很快成为新的瓶颈。,n),依次选Ti/Wi最小的服务器为调度对象。为了尽可能提高路由速度,我们必须尽可能减少路由查找的时间。通过在服务机群中透明地加入和删除结点以实现系统的伸缩性;通过检测结点或服务进程故障和正确地重置系统达到高可用性。前面也提到过,在主干网络上,使用路由表高速缓存并不会提高路由表查找的速度。因此,我们还需要使用新的方法来提高路由表的查找速度。假设每台服务器的权值为Wi(i=1,。如果交换结构的带宽大于所有的输入端口的带宽的总和,那么报文就只在输出端口排队,这种路由器被称为输出排队的路由器。否则,报文就会在输入排队,这种路由器就被称为输入排队的路由器。
　　输入排队的路由器和输出排队的路由器都有路由查找的瓶颈,除此之外,它们各自还具有自己特有的性能瓶颈。由于在输出排队的路由器中所有的报文都在输出端口的缓冲区排队,而输出端口缓冲区的存取速度是受动态存储器和静态存储器的访问时间限制的。这最终将会限制输出排队路由器的性能。那么,我们如果把所有的队列都放到输入一端,又如何呢？如果这样做,就需要由仲裁器来解决交换结构和输出线之间的竞争问题,但是设计一个高速而公平的仲裁器是相当困难的［5,6］。另外,随着电子商务等关键性应用在网上的运行,任何例外的服务中断都将造成不可估量的损失,因此服务器的可靠性也越来越重要。
3.1 高效的路由表查找
　　在第2节中我们已经提到,在使用交换式结构的宽带IP路由器中,主要的性能瓶颈就是在路由表中查找与到达报文的目的地址相匹配的最长前缀的路由。我们知道,路由表查找的速度是由查找时需要访问内存的次数和内存的速度共同决定的。首先,系统处理开销特别大,致使系统的伸缩性有限。使用相同的算法,如果使用访问速度为10ns的内存,那么每秒就大约可以执行1250万次路由查找。
　　在设计路由表查找算法时需要考虑的另一个问题是路由表的修改。最近的研究表明,路由表的变化是比较慢的,大约只需要每两分钟更新一次［7］,这就允许我们使用比较复杂的数据结构来提高查找速度,而付出的代价是修改路由表需要更多的时间。
　　常见的保存路由表的数据结构是树,在树中,每条从根节点到叶子节点的路径就对应着路由表中的一项。这样,寻找最长的前缀就转化成为寻找最长的路径［8］。一般来说,基于树的算法从树的根节点开始,使用目的地址中的下若干位来匹配当前节点的子节点,直到找到一个匹配为止。因此,在最坏情况下查找路由表所花费的时间和找到的最长前缀匹配的长度成正比。基于树的算法的主要思想是大多数节点只需要保存很少的子节点而不用保存所有可能的值。这类算法节约了内存,付出的代价是需要进行更多次的内存查找。
　　系统的主要功能模块如图2所示,其中PFVS-Module是虚拟服务器的主控模块,用于截取和改写IP报文;PFVS-table表存放虚拟服务器的规则;Hash of Connections表是用于记录当前连接的Hash表。
　　提高路由表查找性能的方法有多种,我们可以把它们分成以下3类:
　　(1) 基于硬件的技术
　　常用的基于硬件的技术使用相联存储器（content-addressable memories）和高速缓存来提高查找速度。474
Virtual Web Server(3 set)2821930。近来,研究人员提出的基于硬件的策略把内存和逻辑集成到一块芯片中,这样可以极大地减少内存访问时间。
　　第2种基于硬件的技术是通过增大使用的内存来存储路由表,通过空间换取时间。首先,系统处理开销特别大,致使系统的伸缩性有限。达到的性能是在多数情况下,只需要查找一次路由表就可以得到目的端口,在最坏的情况下,也只需要查找两次路由表。通过使用一些优化技术,可以把内存的使用量降到9M,相应的最坏查找时间就会变成3次内存访问时间。该方案的基本思想是:把32位的目的地址分成两部分,前24位是一部分,后8位是另一部分。使用前24位作为地址直接查找路由表,如果目的地址的路由长度小于24位,则会在一次内存访问时间内查找到目的端口。如果目的地址的路由长度大于24位,则在路由表的相应位置会得到一个索引值,利用该索引值和目的地址的最后8位作为地址去查找另一个存储器,这样,在最坏的情况下,也只需要读两次内存。该方案的核心思想就是把路由表分散保存,例如,1条〈166。111。0。93MBytes/s。这样做虽然提高了路由表的查找速度,但却带来了路由表更新的不便。1条路由的改变就需要更新大量的路由表项。于是,为了提高更新的速度,在文献［9］中提出了相应的解决方案。
　　(2) 表紧缩技术
　　表紧缩技术［10］是使用复杂但是紧缩的数据结构来保存路由表。这样,路由表就可以放在处理器的第1级高速缓存中。这种方案可以支持千兆比特速率的路由表查找。24538。
　　(3) 哈希表技术
　　哈希表技术也可以用于路由表查找。寻找最长前缀匹配的需求限制了哈希表技术的使用。在实际使用中,我们并不知道一个目的地址对应的最长前缀匹配是多长。解决这一问题的方法是尝试不同长度的掩码,从中选择最长的匹配。掩码的选择既可以使用迭代方式,也可以使用层次方式,还可以使用地址的前几位指向一个前缀长度列表。根据HTTP协议［9］,从WEB服务器上获取每个对象都需要建立一个TCP连接,同一用户的不同请求会被调度到不同的服务器上,所以这种细粒度的调度完全避免了因用户访问的突发性引起的负载不平衡问题。
　　文献［11］提出了一种可扩展的基于哈希表的查找算法,该算法查找n位地址的最长前缀匹配的步骤为O(logn)。该算法对于每种长度的前缀都使用一个单独的哈希表,查找时并不是从最长的前缀开始,而是根据前缀长度执行折半查找。为了能够执行折半查找,就需要哈希表包含标记字段,标记字段用于指出当查找失败时,是到长度更大的表中查找,还是到长度小一些的表中查找。此外,文献［11］还采用了相应的技术来减少标记字段的存储空间。该算法可以比较容易地扩展到IP v6。
3.2 高速的报文转发
　　交换结构是宽带IP路由器中的关键部分,是解决高速报文转发的主要方式,它的性能直接决定了路由器的性能。交换结构一般可以采用交叉开关和共享内存两种方式来实现。交叉开关的速度受调度器的限制,而共享内存的速度受内存访问速度的限制。Cisco公司推出的高端路由器GSR12000系列,使用了交叉开关作为交换结构［12］,而Juniper公司推出的主干网路由器Juniper M40则使用了共享内存作为交换结构［13］。交叉开关和共享内存都能够达到比较高的吞吐率,即都能够达到每秒40Gbps（当配置8块OC-48线路接口卡时）以上的吞吐率。共享内存的特点是实现简单,也能达到比较高的吞吐率,但是其性能的进一步提高将受到内存访问速率的限制,而且其可扩展性比较差,当线路接口卡数量较多时,性能将受到一定的影响。而交叉开关能够达到比较高的速率,扩展性好,但是需要设计完善的调度算法并用高速硬件实现调度器。随着人们对交叉开关调度算法研究的深入,已经设计并实现了许多性能良好、实现简单的调度算法,因此,目前宽带IP路由器都趋向于使用交叉开关作为交换结构,下面我们将重点讨论交叉开关的设计与实现。
　　使用交叉开关主要基于如下的考虑:首先,交叉开关可以在网络接口卡之间建立点到点的连接,这就意味着网络接口卡之间可以高速传递数据。516
Virtual Web Server⑤(2 set)1901269。其次,交叉开关可以同时提供多路传送,只要源和目的地不冲突,就可以同时传送,这样可以极大地增加带宽。
1 相关的解决方法
　　解决服务器性能瓶颈问题的现有方法主要分为以下3类。在使用定长的分组时,可以根据分组的大小划分时间片,根据时间片一步一步地处理。如果使用变长的分组,那么分组通过交叉开关的时间就是随机的,调度器就必须知道所有输入和输出的状态,这使调度器的设计相当复杂,而且很难做到公平调度。
　　在使用交叉开关时,需要解决以下几个主要问题。
3.2.1 阻塞问题
　　当使用交叉开关作为交换结构时,可能会遇到以下3种阻塞。
　　第1种是线路头部阻塞。
　　(2) 基于RR-DNS的多服务器解决方法。举例来说,如果队列头部的分组要去的端口正忙,那么此分组只能在队列中等待。这时即使它后面的分组要去的端口是空闲的,也没有机会发送。为此,在设计时需要考虑系统的透明性、负载均衡性、容错性和易管理性。在文献［14］中提出了一种称为虚拟输出队列（virtual output queuing,简称VOQ）的机制来解决线路头部阻塞问题。思路是:假设系统中有n个输入端口和n个输出端口,那么每个输入端口都有n个队列分别对应每个输出端口。这样,若一个输出端口发生阻塞对其他的输出端口不会产生影响。客户机是一般的PC,共有6台,运行Windows 95/NT操作系统。
　　第2种是输入阻塞。由于虚拟输出队列对应的交叉开关的线只有1条,因此,每次只能交换一个分组。当虚拟输出队列中有多个分组时,得不到交换机会的队列头部分组就处于输入阻塞状态。输入阻塞不影响交叉开关的流量,只会增大被阻塞的分组的延迟。测试软件是美国ZD LABS的WebBench 1。如果两个输入端口的分组都要去同一个输出端口,就会发生输出阻塞。这种阻塞和输入阻塞一样,不会影响交叉开关的流量,只增大被阻塞的分组的延迟以解决输入阻塞和输出阻塞。在文献［12］中提出了两种解决方案。第1,带优先级的虚拟输出队列。给每个输出队列划分4个优先级,相应的输出队列也就变成4条,高优先级的分组优先发送。这种方案并不能完全解决输入阻塞问题,比如优先级相同的分组之间还是有阻塞,但是它可以保证高优先级的分组的延迟比较小。假设每台服务器的权值为Wi(i=1,。如果交叉开关的交换速度是端口速度的两倍,那么,相对于端口来说,交叉开关能够一次交换两个分组。② 由于用户访问请求的突发性和访问方式不同,即使TTL值为0,各服务器间的负载仍存在较严重的负载不平衡问题。它们都将到达的HTTP请求转发到不同的Web服务器,取得结果后,再返回给用户。
3.2.2 调度算法
　　交叉开关的另一个重要问题就是调度算法。调度算法设计的基本要求是:
　　(1) 效率高。高效率的调度算法应该能够同时匹配尽可能多的输入队列。一般来说,使用硬件很难快速计算出最佳匹配,因此,一般在设计调度算法时总是尽力寻找次优的算法。
　　(2) 稳定性。无论输入队列的情况如何,调度算法都应该迅速找到可行的调度。
　　(3) 不会出现某些队列永远得不到响应的情况。3版本上应用快速报文插入技术,使得进行负载平衡调度的用户进程访问网络设备接近核心空间的速度,降低了上下文切换的处理开销,但并不彻底。为此,在设计时需要考虑系统的透明性、负载均衡性、容错性和易管理性。
　　(5) 易于实现。516
Virtual Web Server⑤(2 set)1901269。实现的复杂性包括调度器维护的状态的数量,基于这些状态作出决策的逻辑的复杂度和修改状态时的通信开销。
　　调度算法可以分成输入排队的调度算法和输出排队的调度算法。长期以来,人们一直认为输入排队的调度算法性能比较差,因而对输出排队的调度算法进行了大量的研究［15～17］。但是,输出排队的调度算法要求输出端的接口速率是输入端的N倍（N是端口数量）,否则就会出现大量丢包的情况。
中图法分类号　TP393
　　当今计算机技术已进入以网络为中心的计算时期,大量的应用都围绕着网络进行,对服务器的性能和可靠性提出了越来越高的要求。因此,研究人员又重新把注意力集中到了输入排队的调度算法上。
　　在文献［18］中提出了一种输入排队的称为iSLIP（iterative round-robin matching with SLIP）的交叉开关调度算法。系统的源程序和使用说明已在网上发布 ,至今已经被访问了6 000多次。每次循环分成3步,第1步是输入端向输出端提出请求;第2步是每个输出端在所有的请求中选择优先级最高的进行回应;第3步是每个输入端从可能的多个回应中选择优先级最高的建立连接。为了保证公平调度,使用了优先级轮转机制。为了能够处理多播传送,文献［18］把iSLIP算法扩展成可以支持多播的ESLIP（extended SLIP）［12］。该算法原理简单,易于用硬件实现,而且具有很好的性能［5］。Cisco公司推出的高端路由器GSR12000系列中的交叉开关调度算法就采用了iSLIP和ESLIP。
　　调度算法的进一步的研究方向是提供对服务质量QoS（quality of service）的支持。在文献［19］中提出了一种结合输入、输出排队的交换结构CIOQ（combined input/output queuing）,并提出了若干调度算法,该交换结构能够在保证高分组交换率的同时提供服务质量支持,该交换结构的加速比为2。在文献［20］中,对输入排队的交换结构的服务质量支持进行了研究,并提出了几种线性复杂性且不需要加速比的调度算法。如何基于流进行支持服务质量的调度将是调度算法的进一步的研究方向。
3.3 高性能的实时路由器操作系统
　　以前的路由器操作系统一般都是一个简单的内核,提供基本的服务原语。随着网络协议的不断发展,对路由器操作系统的要求也越来越高,路由器操作系统需要能够支持路由协议的高性能的执行,需要能够允许上层协议软件的动态升级。这就需要一种高性能的、模块化的、可扩展的操作系统来支持。
　　文献［21］提出了基于plugin的路由器操作系统体系结构,在该体系结构中,上层协议软件可以作为plugin动态加载到操作系统内核中执行,以获得高性能和高可扩展性。24538。516
Virtual Web Server⑤(2 set)1901269。但是这种方式给整个网络带来了很大的安全隐患,能否取得很好的效果还有待于进一步研究。
4 总 结
　　随着计算机网络互联规模的不断扩大,对主干网络路由器的性能提出的要求越来越高。本文综述了近年来国内外在宽带IP路由器研究领域取得的新进展。随着网络技术的发展,我们必须致力于研究自主版权的宽带IP路由器。在国家“九五”规划期间,清华大学计算机科学与技术系设计和开发了性能超过Cisco公司7000系列路由器的高性能路由器［23］,为进一步的研究打下了良好的基础。在高速宽带IP路由器领域中,需要进一步研究的问题有:
　　(1) 如何支持流标识。然而,该方法存在以下一些问题。
5 结束语
　　本文对解决Internet服务器瓶颈问题的已有方法进行分析比较,指出了它们存在的不足；并给出了基于IP层调度的多服务器解决方法,通过网络地址转换、负载平衡调度、故障检测技术,将一组提供并行服务的服务器构成一个高性能、高可用的虚拟Internet服务器。通过定义流,可以优化资源的使用,比如高速缓存表项。通过系统提供的管理程序,管理员可发命令,随时将一台机器加入服务或切出服务。而前面讨论的高速路由算法都很难被修改成分类算法。目前还缺乏通用而有效的流描述。该方法具有良好的伸缩性,也无需对客户机和服务器作任何修改,可适用于任何Internet站点。当服务器性能会成为瓶颈时,最简单的方法是将其升级为更高档的服务器。Internet对资源预留的支持很弱,无论是局域网路由器、广域网路由器还是宽带IP路由器采用的都是尽力传送机制,不支持优先级。随着网络应用的发展,人们对网络的服务质量QoS提出的要求越来越高,为了支持服务质量的要求,需要路由器支持资源预留。支持资源预留首先要解决上面提到的流标识问题,在流标识的基础上,还需要实现灵活而通用的调度和缓冲区管理算法,支持服务质量的交换结构和有效的流隔离机制。
2.2　负载平衡
　　负载平衡调度是以TCP连接为粒度的。以前的路由器往往被看成是转发IP分组的硬件设备。因此,以往的路由器操作系统往往功能很少,而且一般都不提供应用编程接口API（application programming interface）。随着网络应用的发展,端用户和网络管理员越来越需要动态地往路由器中加载软件模块以提供防火墙、流量管理等机制。928
①每秒处理请求数,②吞吐率,③处理延时,④单台Web服务器,⑤虚拟Web服务器。■
基金项目：本文研究得到国家自然科学基金(No．69682002,69725003)和国家“九五”科技攻关
　　　　　项目基金资助．
作者简介：徐恪，1974年生，博士生，主要研究领域为计算机网络体系结构，计算机系统性能评
　　　　　价。
　　　　　熊勇强,1974年生,博士生,主要研究领域为计算机网络体系结构,网络安全技术。
　　　　　吴建平,1953年生,博士,教授,博士生导师,主要研究领域为计算机网络体系结构,网络
　　　　　协议测试。
作者单位：徐恪(清华大学计算机科学与技术系　北京　100084)
　　　　　熊勇强(清华大学计算机科学与技术系　北京　100084)
　　　　　吴建平(清华大学计算机科学与技术系　北京　100084)
