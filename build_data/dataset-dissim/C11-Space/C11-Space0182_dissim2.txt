宇航学报 
JOURNAL OF ASTRONAUTICS
1998年 第19卷 第1期 No1 Vol.9 1998科技期刊

　软件可靠性修改的Schneidewind
增长模型的特性分析
宋晓秋
(北京计算机应用和仿真技术研究所*北京142信箱213分箱2号*100854)
　　摘　要　本文对软件可靠性修改的Schneidewind增长模型进行了详细的数值特性分析,剖析了该模型的参数解结构,从而构造了模型参数估计的高效求解算法,并进行了相应的数值实验。
　　主题词　软件工程　软件可靠性　可靠性模型
ANALYSIS ON NUMERICAL CHARACTERISTIC 
OF MODIFIED SCHNEIDEWIND’S SOFTWARE 
RELIABILITY GROWTH MODEL
Song Xiaoqiu
(Beijing Institute of Computer Application and Simulation Technology*Beijing*100854)
　　Abstract　In this paper,the numerical characteristic of modified Schneidewind's software reliability growth model is analyzed in detail,therefore an efficient evaluation algorithm is constructed based on the theory of this model's parameter solution,and some corresponding numerical experiments are tested for this model.
　　Key words　Software engineering　Software reliability　Reliability model
1　引　言
　　Jelinski和Moranda在1972年给出的软件可靠性增长的JM模型,其基本思想是假设软件当前的故障率正比于错误残留数,在一个错误被修改到下一个错误被发现的时间段内故障率保持为常数,每当一个错误被修改后,故障率都降低一固定值,即每个错误对故障率改善的影响是相同的。这种假设虽然在某些情况下具有一定的代表性,但在许多情况下却是不符合客观实际的。由(2)式计算得到工作半径为r1=b24+b34,r2=｜b24-b34｜。一般来讲,当软件的故障率λ(t)大时,缺陷易于暴露,因此dλ(t)/dt应负得多一些。Schneidewind基于此,假设在不太长的时间区间内,dλ(t)/dt=-βλ(t),其解为λ(t)=αe-βt。在原始的Schneidewind模型中,把时间区间从t=0起分为等长时间间隔,第i个区间的λi=αe-β(i-1)Δt,i=1,2,…,k,利用在第i个区间内发现并纠正的故障统计数,依据最大似然法求出模型参数估计α和β,于是在最后一个区间内即第k个区间的故障率λk=αe-β(k-1)Δt。
　　我们注意到,原始的Schneidewind模型只利用到了每个时间区间内的错误发现并纠正的总统计数,而未利用到每一错误发现并纠正的具体时刻,因此原始统计数据的信息并未利用充分。设第k步算时detJ(k)α=0,则取控制算法
　　　
(8)
(c)Lyapunov方法
　　对于给定负载位姿始末值而对运送路径不作要求时,可运用Lyapunov方法实现避免奇点的路径规划。
　　我们可以看出方程组(1)是关于α和β的非线性方程组,本文着重分析该方程组的解结构,在此基础上构造出实用高效的模型参数估计数值算法,并进行一些相应的数值实验。
2　参数解特性分析
　　将方程组(1)中的α消元得到关于β的单个方程

记

(2)
设x=e-β,代入(2)式得到

(3)
由于发现修改错误的时间ti通常是采用整单位数(如秒、分、日、月、年等)来统计的,所以可以假设ti∈N。令ni=ti-t0,得到

(4)
由前假设x＞0,所以g(x)=0等价于

(5)
的求根问题。对于冗余自由度系统提出近似回避奇点方法;对冗余系统则提出利用运动学冗余顺利实现设计轨迹的控制算法,对平面运动系统还讨论了减少动力学奇点出现的工程方法。
　　证明　因为t0＜t1＜t2＜…＜tk-1,由

可知, 0＜l＜k-1, a0＞0,a1＞0,…,al≥0,al+1＜0,al+2＜0,…,ak-1＜0,所以

即在(0,+∞)上为减函数,又知

所以在［0,+∞)上有且只有一根x1,且

所以在(0,x1)上为增函数,在(x1,+∞)上为减函数,又知

所以在［x1,+∞)上有且只有一根x2,且

由归纳法假设,设nl+1-m＞0,xm-1≥0
　在［xm-1,+∞)上有具只有一根xm,且

可知在(0,xm)上为增函数,在(xm,+∞)上为减函数,又知

所以在［xm,+∞)上有且只有一根xm+1,且

由归纳法可知,当nl+1-m=1时得出:在［0,+∞)上有且只有一根,又因p(0)=a0＞0,所以p(x)在(0,+∞)内有且只有一个根。
　　由软件可靠性故障率的含义可知,当故障率呈上升趋势时显然是所不期望的,一旦软件可靠性的评估结果为故障率单调上升,说明软件本身还没资格到软件可靠性评估这一阶段。故障率不增即为β大于等于0,对于p(x)即为根小于等于1。
　　定理2　如果p(1)＞0,则p(x)在(1,+∞)上必有一根。
　　证明　因为p(1)＞0,p(+∞)=-∞,所以p(x)在(1,+∞)上必有一根。设第k步算时detJ(k)α=0,则取控制算法
　　　
(8)
(c)Lyapunov方法
　　对于给定负载位姿始末值而对运送路径不作要求时,可运用Lyapunov方法实现避免奇点的路径规划。
3　数值算法
　　我们不难看出,关于α和β的非线性方程组(1)的一般性数值求解并非易事。
4　减小动力学奇点影响的方法
　　讨论平面运动情形,设ei1沿0i0i+1方向,由方程(2)得负载质心0c4相对总质心Oc的矢径ρ4,依靠(3)、(4)式计算得到

(10)
由等效惯量Ii(i=1,2,3)定义可知Ii仅是θ2,θ3的函数,与θ1无关。但由于载体的位姿在机械臂工作过程中不断变化,而动量矩守恒方程(3)一般情况下不可积分,故J不仅与q当前值有关,还与由q运动路径及初始值确定的θ1有关,抓手惯性空间坐标与q不存在一一对应关系。往往初值的近似性不好将会导致迭代法的发散。非完整约束使奇点的位置不仅与机械臂转角当前值有关,还由转角的时间历程决定,故动力学奇点是空间机械臂控制中的难点和关键点。
5　算　例
　　设无冗余自由度空间机械臂系统质量几何参数为m1=700kg,m2=10kg,下臂、抓手及负载共计m3=290kg,中心主惯量Ji分别为500、30、300kg*m2,020c2=3m,030c3=5m,0203=6m,铰O3至负载质心P距离5m。但在抓手惯性坐标空间,ρ4与θ2、θ3及e1i(θ1)有关,而θ1与θ2、θ3仅存在非完整约束,故抓手坐标惯性空间与铰空间点无一一对应关系,由qs不能确定惯性空间中动力学奇点。
　　求解非线性方程组效率最高的方法当然是针对方程组的具体特点构造针对性的数值算法。下面我们结合上节对模型参数解结构的分析结果,给出具有针对性的高效数值求解算法。我们之所以称其为高效是因为:首先,它不需初值,任何情况下都会给出满足精度要求的数值解;其次,对故障率单调上升的情况是直接代数式判别,而无需迭代求解;最后,它所具有的［0,1］区间上二分法量级的寻根速度将是386微机上都可接受的速度。
　　算法1
　　设xl=0,xr=1,ex为针对自变量x而给定的误差精度控制值,ey为针对函数值变量y而给定的误差精度控制值。
　　步1:计算
　　　　如果q＞0,则说明故障率单调上升,终止计算
　　　　如果q=0,则root=1,转步4
　　　　如果q＜0,则转步2
　　步2:令,计算
　　　　如果p(xm)＞ey,则xl=xm,转步3
　　　　如果-ey≤p(xm)≤ey,则root=xm,转步4
　　　　如果p(xm)＜-ey,则xr=xm,转步3
　　步3:如果|xl-xr|≤ex,令,转步4
如果|xl-xr|＞ex,转步2
　　步4:β=-ln(root)

终止计算
4　数值实验
　　例1　我们采用美国海军舰队计算机程序设计中心(U.S.Navy Fleet Computer Programming Center)的海军战术数据系统NTDS(Naval Tactical Data System)开发过程中的错误统计数据(只取制造阶段的数据)。错误统计数据见表1,评估结果见表2,故障率图见图1。令,这时系统不受动量矩守恒约束,简化(10)式得到广义Jacobi阵,进而求得detJ*=b24b34sinθ3,同上面分析类似,动力学奇点处于图1中C1、C2圆上。实际中该软件在进一步的测试中又发现了5个错误。
　　例2　我们采用装甲兵工程学院的某软件测试例子(只取前16个数据)。错误统计数据见表3,评估结果见表4,故障率图见图2。
表3　错误统计数据(时间单位:秒)

序 号间 隔 时 间累 计 时 间序 号间 隔 时 间累 计 时 间
11193389
21210190
3131130120
4581222142
54121313155
624361422177
76421577254
81456167261

表4　评估结果

初始故障率α0.14065864
影响故障率比例常数β0.00899166
参数精度(方程组残量的欧氏范数)0.00008883
当前故障率(t=250)0.01345717
平均故障前时间(MTBF)74.30983110
下一故障可能时间335.30983110



图1　故障率图


图2　故障率图
评估的结果表明,该软件系统的平均故障前时间(MTBF)约为74秒,即软件离正式交付尚有一定距离,仍需进一步的测试。实际中该软件在继续进行的测试中下一个错误的发现时间为300秒,与评估预计的335秒相差35秒,所以修改的Schneidewind模型对此软件系统基本适用。
参考文献
  1　何国伟.软件的MTBF及其验证试验.电子产品可靠性与环境试验,1995,(1)
  2　徐仁佐等.软件可靠性模型及应用.清华大学出版社和广西科学技术出版社,1994年
  3　国外软件可靠性资料汇编.全国军事技术装备可靠性标准化技术委员会,R.M.S译文选10,1994年9月
本文于1996年5月28日收到
　　*该项研究得到国防科工委基础研究基金资助
