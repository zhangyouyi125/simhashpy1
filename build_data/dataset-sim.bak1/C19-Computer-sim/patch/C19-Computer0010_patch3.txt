计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



Windows 95下串行通信编程技术及其实现
郭峰林　朱才连
　　摘　要　本文首先简单讨论MSDOS、16位Windows和Windows95下的通信编程差别，然后着重讲述32位Windows95 环境下的通信编程技术，最后给出利用该技术实现串行通信的实例。
　　关键词　API函数，串行通信，中断，查询，线程，同步，异步，阻塞
TECHNIQUE OF SERIAL COMMUNICATION PROGRAMMING
AND ITS REALIZATION IN WINDOWS95
Guo Fenglin　Zhu Cailian
Institute of Geodesy & Geophysics, Chinese Academy of Sciences, Hubei.Wuhan 430077
　　Abstract　This paper discusses the difference of communication programming in the operating system of MSDOS,16 bit Windows and Windows95.Then tells of some problems about serial communication programming technique in 32 bit OS of windows95. Finally, an example of the application of this technique in windows95is provided.
　　Keywords　API function, Serial communication, Interrupt, Poll, Thread, Synchronization, Asynchronization
1　前言
　　Windows95以其形象的图形界面设计、操作简单、功能强大、可靠性高等优点，赢得了越来越多的用户，开发Windows95应用程序已经成为当今的主流。一个管理者负责一个域，域的划分可以根据地理、组织结构或其它规则，因此这种方法非常适合多域网络。然而串行通信编程从MSDOS、Windows3.1到Windows95各不相同，虽然在功能上越来越强，但是编程的复杂度也相应增大。
　　CMsgHead类用于描述消息头类，通信线程在发送数据前都要先发送消息头对象，用以标识将要发送的数据消息类型。
　　当多个信息包图转换成星形图时，可能出现维度实体的交叉重叠，为了保证实体的一致性需要进行统一处理，确定它们是同一实体在不同层次上的数据反映，还是两个不同的实体。该系统采用Windows95下的Visual C++ 5.0编写，由于有关Windows95的串行口通信编程方面的资料少，串行通信编程的实例也不多见，笔者在成功开发“公安110智能报警系统”的基础上，取得了一些经验，现在将有关串行口通信方面的一些关键技术写出来，供广大的编程者借鉴、参考。
2　下串行通信编程特征
　　MSDOS下的串行通信编程较简单，通信编程可以直接对串口的物理地址进行编程操作同时配合BIOS调用，即可实现串行口数据读写。终端用户通过各种维度来获取商业数据，其中时间是最基本、最关键的维度。16位的Windows3.1操作系统提供了专门的串行通信的API函数：OpenComm()、CloseComm()、ReadComm()、 WriteComm()等，通过这些专用API（Application Programming Interfaces）函数来设置和读、写串行口。当用户Agent漫游到某节点时，向该节点的对象管理Agent登记驻留信息。
3　Windows95下串行通信API函数
　　在Windows95中将串行口与文件的统一了起来，对它们的打开、读、写、关闭等操作都使用相同的API函数，但是它们之间又有差别，譬如串行口不能象文件一样可以被删除，这些差别体现在API函数中部分参数的设置上。
　　弄清串行通信API函数的用法是掌握串行通信编程技术的关键。下面介绍几个与串行通信编程密切相关的API函数，着重说明这些API函数在进行串行通信时参数设置需要注意的地方。其它没有提及的函数及参数可以参考Windows95 API函数手册。
　　(3)异步工作方式
　　不要求用户同时工作，用户产生的信息也不是在用户间实时传输。调用CreateFile()打开串口成功，返回一个操作句柄。该句柄供随后对串行口的设置、读写等操作用。
　　CreateFile()函数原型:
　HANDLE CreateFile(LPCTSTR szDevice, DWORD dwAccess,
DWORD dwShareMode, LPSECURITY―ATTRIBUTES lpSA,
DWORD dwCreate, DWORD dwFlagsAndAttributes,
HANDLE hTemplateFile );
　　调用此函数要注意这几个参数的设置：dwShareMode指定该端口的共享属性。该参数是为文件共享提供的，串行口不能作为共享设备。故参数值必须为0，这是文件与通信设备之间的主要差异之一；dwCreate必须为OPEN―EXISTING。因为CreateFile()只能打开存在的端口，而不能象创建新文件一样创建物理上不存在的新串口；dwFlagsAndAttributes描述了该端口的各种属性。对于文件来说，具有多种属性（只读、隐藏、系统）是可能的，但是对于串行口，唯一有意义的设置是FILE―FLAG―OVERLAPPED；参数hTemplateFile必须为NULL。
　　返回值：若成功，返回创建的句柄；否则返回，INVALID―HANDLE―VALUE.
　　举例：打开串行口1
　HANDLE hComm;　　　　　　　　　　　　　　　　　　　　　　　　　　　//定义句柄变量
　hComm = CreateFile( "COM1", 
　GENERIC―READ|GENERIC―WRITE,NULL,NULL,
　OPEN―EXISTING,FILE―FLAG―OVERLAPPED,NULL);
　if (hComm == INVALID―HANDLE―VALUE) {……. 
　// 打开串口错误的处理}
3.2　配置串行口API函数
　　串行口打开成功，接下来可以配置串行口通信参数如波特率、数据位数、停止位、校验位等。修改这些参数时要和设备控制块DCB(Device Control Block)打交道，DCB有近30个数据成员，是一个很复杂的数据结构，全部弄清楚它们的含义相当费时。而对于采用3线方式的串行通信来说，DCB结构中绝大多数参数可以不予考虑，因为只要设置好波特率、数据位、停止位、校验位等几个关键参数就行。这里介绍一种简捷的方法可以做到不了解DCB的详细内容也可以设置好串行通信参数。
　　通过下面的程序来说明串行通信参数的设置方法。例程中利用BuildCommDCB函数来设置DCB，然后用函数SetCommState()配置串行通信口。
DCB dcb ;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//定义设备控制块
GetCommState(hComm,&dcb);　　　　　　　　　　　　　　　　　//取出系统缺省设备控制块
BuildCommDCB("COM2:9600,N,8,1",&dcb); 　　　　　　　　　　　　　　　//设置DCB主要参数
SetCommState(hComm,&dcb);
3.3　超时设置API函数
　　编写通信应用程序的一个很关键的问题就是如何处理通信中的不可预测的事件。譬如接收数据过程中突然被中断，或者发送数据突然停止等等。
　　目前，CSCW已广泛应用于CAD、远程医疗诊断、多媒体协同编著、电子会议等领域。Windows95对于这类问题提供了安全措施，它让你通过超时设置来决定通信是否异常并作相应处理。在 MA&C系统中，Agent之间的通信方式有多种：个别辅导时采用 - 私线 - 方式，而群体指导以及自由讨论时采用 - 黑板 - 方式。
　　超时设置过程分为两步，首先设置COMMTIMEOUTS结构中的五个变量，然后调用SetCommTimeouts()函数设置超时值。COMMTIMEOUTS结构的定义如下：
　typedef struct ―　COMMTIMEOUTS {
DWORD ReadIntervalTimeout; 　　　　　　　　　　　　　　　　　　　　　//读端口间隔超时
DWORD ReadTotalTimeoutMultiplier;　　　　　　　　　　　　　　　　//读端口总超时乘数
DWORD ReadTotalTimeoutConstant; 　　　　　　　　　　　　　　　//读端口总超时常数(ms)
DWORD WriteTotalTimeoutMultiplier; 　　　　　　　　　　　　　　　//写端口总超时乘数
DWORD WriteTotalTimeoutConstant;　　　　　　　　　　　　　　　//写端口总超时常数(ms)
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
3.4　读串口API函数
　　串行口打开后，可以对它进行读写操作。读串行口的函数原型：
　BOOL ReadFile (HANDLE hFile, LPVOID lpBuffer,
DWORD nNumberOfBytesToRead,
LPDWORD lpNumberOfBytesRead, 
LPOVERLAPPED lpOverlapped data);
　　其中,第一个参数hFile是由CreateFile()返回的句柄。参数lpBuffer是读取的数据缓冲区指针，要注意给该数据缓冲区分配足够的空间；参数nNumberOfBytesToRead是要读取的字节数；参数lpNumberOfBytesRead是实际读取的字节数；最后一个参数lpOverlapped 是指向一个可重叠I/O(异步)的数据结构指针。
　　“平行开发”与“自底向上”模式的区别在于，它用一个统一的全局性数据仓库的数据模型来指导各部门数据集市的建设，可以解决数据集市之间数据的不一致和减少数据集市之间的数据冗余问题。
3.5　写串口API函数
　BOOL WriteFile (HANDLE hFile,　　　　　　　　　　　　　// 由CreateFile()返回的句柄
　　　　　　　　　　　　　　LPCVOID lpBuffer,　　　　　　　　　　　　// 写缓冲区指针
　　　　　　　　　　　DWORD nNumberOfBytesToWrite,　　　　　　　　　// 要写的字节数
　　　　　　　　　　　LPDWORD lpNumberOfBytesWritten,　　　　　　　// 实际写的字节数
　　　　　　　　　　　LPOVERLAPPED lpOverlapped　　// 指向一个可重叠I/O的数据结构);
　　　　　　　　　　　　WriteFile()函数的工作方式选择与ReadFile()的相同,在此不重复。
1.5 并行计算模型小结
　　与BSP相比，LogP在三方面有所不同：(1)LogP采用基于pairwise同步的消息传递方式；(2)LogP增加参数o，以表示发送消息时所需额外开销，而BSP中除应用于单个消息通信外，这个参数一般可以忽略；(3)LogP模型中的g是从局部的角度来定义的。所以打开串口后，一定要关闭串口。关闭串口函数较简单。一旦全局性数据仓库建立好后，各部门的数据集市将成为全局数据仓库的一个子集，全局数据仓库将负责为各部门已建成和即将要建的数据集市提供数据。返回值非0，则调用成功。
4　Windows95的串行通信工作方式
　　串行通信会话以调用CreateFile()函数打开串行口开始，接着设置串行口波特率、数据位、校验位、停止位等参数以及超时参数，最后选择一种工作方式读、写串行口。在Windows95中，串行通信有两种工作方式可供选择：查询方式和事件驱动方式。这两种工作方式各有优缺点，用户可以根据应用程序的实际需要选择其中的一种工作方式，下面对这两种工作方式分别介绍。
4.1　查询方式
　　对于从串口读取数据来说，查询是最为直接、易于理解的技术。但是查询会占用大量的CPU时间，效率较低。利用查询方式读取串口数据时通常要建立一个线程，建立线程使用CreateThread()函数。循环查询在线程里进行。举例：（假设端口已经打开)
　DWORD ReadThread(LPDWORD lpdwParam)
{ BYTE Buff［100］; 　　　　　　　　　　　　　　　　　　　　　　　　　//读数据缓冲区
DWORD nBytesRead; 　　　　　　　　　　　　　　　　　　　　　　　　//实际读取的字节数
COMMTIMEOUTS Timeouts;　　　　　　　　　　　　　　　　　　　　　　　　　　//超时设置
Memset(&Timeouts,0,sizeof(COMMTIMEOUTS));
Timeouts.ReadIntervalTimeout = MAXDWORD;
SetCommTimeouts(hComm,&Timeouts);
While(bReading){
if(!ReadFile(hComm,Buff,100,&nBytesRead,NULL))
{………　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//读取数据出错处理}
else{………　　　　　　　　　　　　　　　　　　　　　　　　　　//正确读取数据的处理}
}
PurgeComm(hComm,PURGE―RXCLEAR);
return 0;
}
　　例程中，线程的退出由bReading标志控制，当bReading为TRUE时，循环串口；当breading为FALSE时，线程退出。
4.2　事件驱动方式
　　事件驱动I/O方式是指线程通过监视通信资源中的一组事件来进行I/O操作，这种方式类似于MSDOS下的中断工作方式，效率高。可被监视的事件列表如下：

事件掩码含义
EV―BREAK检测到输入终止
EV―CTSCTS(清除发送)信号改变状态
EV―DSRDSR(数据设置就绪)信号改变状态
EV―ERR发生了线路状态错误
EV―RING检测到振铃
EV―RLSDRLSD信号改变状态
EV―RXCHAR收到任何字符并放进输入缓冲区
EV―RXFLAG收到事件字符，并放进输入缓冲区
EV―TXEMPTY输出缓冲区中最后一个字符发送出去

　　实际编程中，对串行口的读、写操作需要建立两个工作者线程。在读或写线程中可以通过SetCommMask()函数设置事件屏蔽来监视指定通信资源上的事件。LogGP的算法与LogP的优化算法相比，执行速度和性能有较大提高，但随着模型的进一步复杂化，LogGP上的算法设计和分析也更为复杂。用户不需要详细指明这些信息。如果指定为NULL，该函数就是同步的，必须等到SetCommMask()中指定的事件有一个发生时它才返回；如果指定了一个OVERLAPPED结构，该函数即工作在异步方式。通常将该函数工作在同步方式。
　　下面的例程演示了利用事件驱动I/O方式从串行口读取数据。
1 常用网络管理系统体系结构模型
　　网络管理系统体系结构模型有许多!ReadFile(hComm,Buff,1,&nBytesRead,NULL))
{……　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//处理读错误}
else{……　　　　　　　　　　　　　　　　　　　　　　　　　　　　//正确接收字符处理}
}else{……　　　　　　　　　　　　　　　　　　　　　　　　　//非EV―RXCHAR事件的处理} 
}}
PurgeComm(hComm,PURGE―RXCLEAR);
return 0;}
　　在上面的例程中，设置EV―RXCHAR事件掩码，则告诉Windows无论何时接收到一个字节，就产生一个事件。其成员和方法与CMsg类相近。
5　效果
　　作者在开发的“公安110智能报警系统”时利用事件驱动方式的串行通信编程技术处理多种系统设备间频繁的数据交换任务，应用非常成功。系统可实时地监控从市话网上不断传来的报警电话。
作者简介：郭峰林　硕士研究生。在多Agent 系统中，Agent的协作是通过Agent之间的交互来实现的。
作者单位：中国科学院测量与地球物理研究所　湖北.武昌(430077）
参考文献
［1］　Microsoft Corporation,著.Win32程序员参考大全(二). 欣　力,等译.北京：清华大学出版社，1995，4
［2］　Microsoft Corporation. Microsoft Developer Network
［3］　Peter W.Gofton,著.精通串行通信.王仲文,等译.北京：电子工业出版社,1995，2
［4］　Charles A.Mirho, Andre Terrisse,著. Windows95通信编程.贺　军,等译.北京：清华大学出版社，1997，12
［5］　Scott Stanfield, RalphArvesen,著. Visual C++4开发人员指南.北京：机械工业出版社1997，6
收稿日期:1999-03-11(修改稿)
