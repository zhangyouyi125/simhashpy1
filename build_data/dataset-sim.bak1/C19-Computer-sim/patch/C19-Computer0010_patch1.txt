计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



Windows 95下串行通信编程技术及其实现
郭峰林　朱才连
　　摘　要　本文首先简单讨论MSDOS、16位Windows和Windows95下的通信编程差别，然后着重讲述32位Windows95 环境下的通信编程技术，最后给出利用该技术实现串行通信的实例。通信线程类从CWinThread类派生，以下简要论述其实现的基本步骤：
1.1从CSocket类派生CListeningSocket类和
　　CConnectedSocket类
　　CListeningSocket类对象用于服务器侦听网络连接请求。在诸多的应用开发中，与外部硬件设备通信是常见的应用，而串行通信以其简单的硬件连接方式常常成为应用开发者的首选。然而串行通信编程从MSDOS、Windows3.1到Windows95各不相同，虽然在功能上越来越强，但是编程的复杂度也相应增大。
　　笔者最近在Windows95环境下开发一套“公安110智能报警系统”，该系统需要对报警电话进行实时监控，以便能实时地进行接警和处警。报警电话的监控是通过检测从电话交换机中馈送的RS232标准的串行通信信号，其中串行口通信采用3线方式。该系统采用Windows95下的Visual C++ 5.0编写，由于有关Windows95的串行口通信编程方面的资料少，串行通信编程的实例也不多见，笔者在成功开发“公安110智能报警系统”的基础上，取得了一些经验，现在将有关串行口通信方面的一些关键技术写出来，供广大的编程者借鉴、参考。
2　下串行通信编程特征
　　MSDOS下的串行通信编程较简单，通信编程可以直接对串口的物理地址进行编程操作同时配合BIOS调用，即可实现串行口数据读写。
　　在Windows下，串行口作为系统资源，由设备驱动程序统一管理，用户不能象在MSDOS下一样直接对串行口硬件端口进行编程。16位的Windows3.1操作系统提供了专门的串行通信的API函数：OpenComm()、CloseComm()、ReadComm()、 WriteComm()等，通过这些专用API（Application Programming Interfaces）函数来设置和读、写串行口。
总之，通过动态组合语义光标技术，WBTool工具为协作者提供了比较完美的WYSIWIS效果。位于星形图星角上的实体是维度实体，对应信息包图中的维度对象，其作用是限制用户的查询结果，将数据过滤使得从指标实体查询返回较少的行，从而缩小访问范围。由于执行的主体程序在服务器上，所以必须在服务器上安装所需要的服务进程。下面介绍几个与串行通信编程密切相关的API函数，着重说明这些API函数在进行串行通信时参数设置需要注意的地方。其它没有提及的函数及参数可以参考Windows95 API函数手册。
3.1　打开串行口API函数
　　Windows95通信会话以调用CreateFile()函数打开串行口开始。调用CreateFile()打开串口成功，返回一个操作句柄。该句柄供随后对串行口的设置、读写等操作用。
　　CreateFile()函数原型:
　HANDLE CreateFile(LPCTSTR szDevice, DWORD dwAccess,
DWORD dwShareMode, LPSECURITY―ATTRIBUTES lpSA,
DWORD dwCreate, DWORD dwFlagsAndAttributes,
HANDLE hTemplateFile );
　　调用此函数要注意这几个参数的设置：dwShareMode指定该端口的共享属性。该参数是为文件共享提供的，串行口不能作为共享设备。故参数值必须为0，这是文件与通信设备之间的主要差异之一；dwCreate必须为OPEN―EXISTING。因为CreateFile()只能打开存在的端口，而不能象创建新文件一样创建物理上不存在的新串口；dwFlagsAndAttributes描述了该端口的各种属性。对于文件来说，具有多种属性（只读、隐藏、系统）是可能的，但是对于串行口，唯一有意义的设置是FILE―FLAG―OVERLAPPED；参数hTemplateFile必须为NULL。
　　返回值：若成功，返回创建的句柄；否则返回，INVALID―HANDLE―VALUE.
　　举例：打开串行口1
　HANDLE hComm;　　　　　　　　　　　　　　　　　　　　　　　　　　　//定义句柄变量
　hComm = CreateFile( "COM1", 
　GENERIC―READ|GENERIC―WRITE,NULL,NULL,
　OPEN―EXISTING,FILE―FLAG―OVERLAPPED,NULL);
　if (hComm == INVALID―HANDLE―VALUE) {……. 
　// 打开串口错误的处理}
3.2　配置串行口API函数
　　串行口打开成功，接下来可以配置串行口通信参数如波特率、数据位数、停止位、校验位等。修改这些参数时要和设备控制块DCB(Device Control Block)打交道，DCB有近30个数据成员，是一个很复杂的数据结构，全部弄清楚它们的含义相当费时。而对于采用3线方式的串行通信来说，DCB结构中绝大多数参数可以不予考虑，因为只要设置好波特率、数据位、停止位、校验位等几个关键参数就行。在系统中，域的划分根据网络地址进行划分。
2 异构环境中的BSP模型和开销计算
　　异构BSP模型(HBSP)中计算由一系列连续的超步组成。例程中利用BuildCommDCB函数来设置DCB，然后用函数SetCommState()配置串行通信口。
DCB dcb ;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//定义设备控制块
GetCommState(hComm,&dcb);　　　　　　　　　　　　　　　　　//取出系统缺省设备控制块
BuildCommDCB("COM2:9600,N,8,1",&dcb); 　　　　　　　　　　　　　　　//设置DCB主要参数
SetCommState(hComm,&dcb);
3.3　超时设置API函数
　　编写通信应用程序的一个很关键的问题就是如何处理通信中的不可预测的事件。譬如接收数据过程中突然被中断，或者发送数据突然停止等等。如果不认真对待，这些情况可能会引起I/O线程挂起或者线程被无限阻塞。Windows95对于这类问题提供了安全措施，它让你通过超时设置来决定通信是否异常并作相应处理。因此超时设置在串行通信中显得尤为重要。
　　超时设置过程分为两步，首先设置COMMTIMEOUTS结构中的五个变量，然后调用SetCommTimeouts()函数设置超时值。COMMTIMEOUTS结构的定义如下：
　typedef struct ―　COMMTIMEOUTS {
DWORD ReadIntervalTimeout; 　　　　　　　　　　　　　　　　　　　　　//读端口间隔超时
DWORD ReadTotalTimeoutMultiplier;　　　　　　　　　　　　　　　　//读端口总超时乘数
DWORD ReadTotalTimeoutConstant; 　　　　　　　　　　　　　　　//读端口总超时常数(ms)
DWORD WriteTotalTimeoutMultiplier; 　　　　　　　　　　　　　　　//写端口总超时乘数
DWORD WriteTotalTimeoutConstant;　　　　　　　　　　　　　　　//写端口总超时常数(ms)
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
3.4　读串口API函数
　　串行口打开后，可以对它进行读写操作。读串行口的函数原型：
　BOOL ReadFile (HANDLE hFile, LPVOID lpBuffer,
DWORD nNumberOfBytesToRead,
LPDWORD lpNumberOfBytesRead, 
LPOVERLAPPED lpOverlapped data);
　　其中,第一个参数hFile是由CreateFile()返回的句柄。BSP模型主要由3个参数表示，分别是：p为处理单元的数目；g为整个系统的计算能力与网络传送消息的通信能力的比值，更形式化一些，系统需要gh个时间单位来完成h-relation操作。如果lpOverlapped设置为NULL，则ReadFile()工作在同步方式；如果lpOverlapped指向一个重叠结构，则工作在异步方式。
3.5　写串口API函数
　BOOL WriteFile (HANDLE hFile,　　　　　　　　　　　　　// 由CreateFile()返回的句柄
　　　　　　　　　　　　　　LPCVOID lpBuffer,　　　　　　　　　　　　// 写缓冲区指针
　　　　　　　　　　　DWORD nNumberOfBytesToWrite,　　　　　　　　　// 要写的字节数
　　　　　　　　　　　LPDWORD lpNumberOfBytesWritten,　　　　　　　// 实际写的字节数
　　　　　　　　　　　LPOVERLAPPED lpOverlapped　　// 指向一个可重叠I/O的数据结构);
　　　　　　　　　　　　WriteFile()函数的工作方式选择与ReadFile()的相同,在此不重复。
3.6　关闭串口API函数
　　串行口是非共享资源，某应用程序打开串行口后，即独占该资源，使其它应用程序无法再访问，直到该应用程序释放串口。所以打开串口后，一定要关闭串口。
4　结束语
　　目前，网络技术的迅速发展，使得在大规模网络上构造复杂的分布式应用系统成为可能。函数原型：BOOL CloseHandle( HANDLE hObject );其中hObject参数为CreateFile()返回的端口句柄。返回值非0，则调用成功。
4　Windows95的串行通信工作方式
　　串行通信会话以调用CreateFile()函数打开串行口开始，接着设置串行口波特率、数据位、校验位、停止位等参数以及超时参数，最后选择一种工作方式读、写串行口。在Windows95中，串行通信有两种工作方式可供选择：查询方式和事件驱动方式。这两种工作方式各有优缺点，用户可以根据应用程序的实际需要选择其中的一种工作方式，下面对这两种工作方式分别介绍。在“平行开发”模式中数据集市的这种相对独立性有利于全局性数据库的建设。但是查询会占用大量的CPU时间，效率较低。利用查询方式读取串口数据时通常要建立一个线程，建立线程使用CreateThread()函数。循环查询在线程里进行。第二阶段部门数据集市把自身的需求变化反馈给全局性数据仓库，全局性数据仓库再做出相应的变化!ReadFile(hComm,Buff,100,&nBytesRead,NULL))
{………　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//读取数据出错处理}
else{………　　　　　　　　　　　　　　　　　　　　　　　　　　//正确读取数据的处理}
}
PurgeComm(hComm,PURGE―RXCLEAR);
return 0;
}
　　例程中，线程的退出由bReading标志控制，当bReading为TRUE时，循环串口；当breading为FALSE时，线程退出。信息包图提供了一个多维空间建立用户信息模型的方法，它提供了超立方体的可视化表示。
2.3 动态组合语义光标技术
　　为了更好地进行协同工作，协作者需要知道同组内其他用户的存在、行为及状态，这种感知能力是CSCW系统区别于非协同系统的显著标志之一。在读或写线程中可以通过SetCommMask()函数设置事件屏蔽来监视指定通信资源上的事件。指定一组事件后，线程可以使用WaitCommEvent()函数等待其中一个事件发生，在等待过程中它将花费极少的CPU时间。注意：WaitCommEvent()函数和读写操作函数一样可以同步使用，也可以异步使用，这主要取决于在第三个参数中是否指定OVERLAPPED结构。如果指定为NULL，该函数就是同步的，必须等到SetCommMask()中指定的事件有一个发生时它才返回；如果指定了一个OVERLAPPED结构，该函数即工作在异步方式。 
1　MA&C 模型结构
　　基于 MultiAgent 和 CSCW 的观点，以现代的网络技术、超媒体技术为基础，采用面向对象的设计方法，提出了一个具有客户 / 服务器模式的多媒体教学模型--MA&C模型。
　　下面的例程演示了利用事件驱动I/O方式从串行口读取数据。
DWORD ReadThread(LPDWORD lpdwParam)
{ BYTE Buff［100］; 　　　　　　　　　　　　　　　　　　　　　　　　　//读数据缓冲区
DWORD nBytesRead, dwEvent, dwError;
COMMTIMEOUTS Timeouts;　　　　　　　　　　　　　　　　　　　　　　　　　　//超时设置
Memset(&Timeouts,0,sizeof(COMMTIMEOUTS));
Timeouts.ReadTotalTimeoutMultiplier=5;
Timeouts.ReadTotalTimeoutConstant=100;
SetCommTimeouts(hComm,&Timeouts);
SetCommMask(hComm,EV―RXCHAR);　　　　//设置EV―RXCHAR掩码，当任何字符到达时产生事件
While(bReading){
if(WaitCommEvent(hComm,&dwEvent,NULL))
{　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//接收缓冲区有字符到达
if(dwEvent & EV―RXCHAR)
{ 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//确认是EV―RXCHAR事件
if(!ReadFile(hComm,Buff,1,&nBytesRead,NULL))
{……　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//处理读错误}
else{……　　　　　　　　　　　　　　　　　　　　　　　　　　　　//正确接收字符处理}
}else{……　　　　　　　　　　　　　　　　　　　　　　　　　//非EV―RXCHAR事件的处理} 
}}
PurgeComm(hComm,PURGE―RXCLEAR);
return 0;}
　　在上面的例程中，设置EV―RXCHAR事件掩码，则告诉Windows无论何时接收到一个字节，就产生一个事件。在WaitCommEvent()返回后，比较该函数返回的事件掩码，如果是EV―RXCHAR，则说明接收缓冲区中至少有一个字符处于等待状态；否则，就是错误事件，需要进行错误处理。
　　ConnectSocket( )连接请求消息处理函数：客户窗口通过发送此消息向服务器发出连接请求。系统可实时地监控从市话网上不断传来的报警电话。
3.3 DBHA体系结构的优点和特色
　　(1)网络规模的可扩充性：若网络规模和复杂性增加，可通过创建更多的域、相应的管理者和多个MOM来实现管理。
朱才连　博士生导师，研究员。此外，Agent的智能性更好地体现了个体在协同工作中的重要作用