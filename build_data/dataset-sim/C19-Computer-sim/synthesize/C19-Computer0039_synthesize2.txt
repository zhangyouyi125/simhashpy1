构件可以是.exe或.dll文件、数据库触发器和存储过程的集合，或者任何几个其它物理软件实体计算机应用
 Applications
1999年 第19卷 第7期  Vol.19 No.7 1999



及其在三层虚拟化/服务器中的应用*
宋晓梁　刘东生　许满武
　　摘　要　本文介绍了企业级的五种类别及其各自的特点，并讨论了中间件在三层的客户机/服务器模型中应用的一个示例。
　　　中间件，客户机/服务器模型
　　
MIDDLEWARE AND ITS APPLICATION 
IN A THREE TIER C/S MODEL

Song Xiaoliang　Liu Dongsheng　Xu Manwu
Computer Science and Technology Department, 
National Key Laboratory for Computer Software, Nanjing University, Jiangsu*Nanjing 210093

　　Abstract　In this paper,we discuss the five kinds of the middleware and give a sample of the 
middleware′s application in a three tier C/S model.
　　Keywords　Middleware，Client/server model

　　随着以网络计算为中心的应用系统规模的扩大和软硬件的日趋复杂多样，应用程序和服务器端的负担也日益繁重，并且传统软件的移植性、互操作性和重用性也都不能满足现在的需求，为此人们提出了介于客户端和服务器端的软件――中间件。。。但是，只有客户机/服务器以及downsizing的概念提出之后，中间件的概念才被人们广泛地关注。在客户机/服务器下，一般将中间件放在位于客户机和服务器之间的中间层，负责应用逻辑的处理，从而使客户端变得精干。
　　. 图像由图像通讯接口录入，通过图像处理模块提取出运动部分，即与背景库不同的部分，经数据压缩后存入运动视频库。。
　　中间件具有如下特点：
　　易于集成　中间件能无缝地连入应用开发环境中，应用程序可以很容易地定位和共享中间件提供的应用逻辑和数据。
　　易于移植　中间件使与平台有关的细节对于应用程序来说是的，因此可以在不改变应用程序代码的情况下改换计算机底层硬件、操作系统或通信协议。
　　高可靠性　中间件应该是可靠的，需要提供接管和恢复功能，保证事务及关键性业务不被丢失。代理负责路由消息给相应的程序。构件是由它所提供的服务以及它和其它构件的相互作用来定义的。它将用户从复杂的平台、网络、选择中解放出来。。
1.1　基于数据库的中间件
　　基于数据库的中间件是所有中间件中最普遍、最成熟的一种。基于数据库的中间件允许应用程序同本地或异地的数据库进行通信。它提供了一系列应用程序接口API，通过中间层而不考虑操作系统及网络来访问数据库。并且在很多情况下，API被隐藏在开发工具之中而不被开发者了解。
　　泛型、JDBC都是基于数据库的中间件标准。通过ODBC访问数据库的形式是绝大多数应用程序使用数据库的方式，它通过使用BIOS(driver)来提供数据库的独立性，驱动程序与具体的数据库有关，它是一个用以支持ODBC函数调用的模块(通常是一个DLL)，应用程序通过调用驱动程序所支持的函数来操作数据库，若想使应用程序操作不同类型的数据库，就要动态地链接到不同的驱动程序上。
　　不能管理　由于不能封装商业规则，也不能对这些规则进行集中配置，所以常用程序的重用也不方便。JDBC定义了一个Java开发的CLI。。
　　ODBC的结构图如下：　


图1　ODBC结构图
　　现在，Microsoft又提出了OLE-DB。OLE-DB提供了不同数据源的统一的访问点。OLE-DB的目标是提供通过OLE Automation来访问多种数据库，或在应用程序和数据库之间提供一个COM层，通过COM层的对象访问数据库。
　　在基于数据库中间件领域中，目前还提出了应用分割，即将用户的一些应用逻辑放到中间层，为客户机“减肥”，这也为NC(Network Computer)等的引入打下了基础，并增强了应用程序的处理性能、安全性和并发性。目前，很多数据库前端开发工具都支持应用分割技术。
　　但是，在基于数据库的中间件模型中，数据库作为信息的中心单元，中间件负责数据间的同步及点到点通信。尽管数据访问得到了简化，但却缺乏灵活性，我们通常无法对自己与数据源的交互作用进行完全的控制，因为这种控制是自动的。目前，ORB存在两个彼此竞争的标准： ORB和DCOM ORB。当使用RPC时，只需要编写很少的网络程序代码，大部分代码由IDL(Interface Define Language)生成。。。
　　RPC一般采用Call/Return模式，多用于应用程序之间的通信，而且采用同步方式。RPC程序之间的同步通信一般采用Request-Wait-Reply方式， 因此，对小型简单的不需要采用异步通信方式的应用比较适合，但对大型复杂的应用不太适合，因为它需要程序员考虑网络或系统的故障、处理多个网络、可移植性、缓冲及流量控制和之间的同步等多种问题。
1.3　基于 SSI 的中间件
　　Lite Monitor是一种复杂的中间件产品，它为应用处理提供了一种通信机制，它允许开发者在TP Monitor环境中定义事务服务。TP Monitor位于客户机和数据库服务器之间，采用三层或多层模型。客户通过Transaction RPC(TRPC)机制在TP Monitor中调用事务，TP Monitor运行事务来相连接数据库，并将处理结果返回给客户端。TP Monitor提供一系列服务，如应用管理、管理控制和应用之间消息传递等。常见的属性包括全局事务协调、分布式两阶段提交、资源管理器支持、协调故障恢复、高可用性、安全性、网络负载平衡等。
　　在TP Monitor中，事务有一个明确的起止点，如果事务失败，TP Monitor可以回滚事务，不会使系统处于不完整、不一致状态。TP Monitor同时可以复用数据库请求。因为每个客户调用事务，而不是直接和数据库进行连接，因此TP Monitor可以协调数据库请求，传统的Connection-Per-Client的限制(在客户机/服务器环境中)可以去掉，如100个客户可能只需要10个数据库连接。并且TP Monitor还可以在事务中读写异构数据库中的信息，并保持异构数据库的完整性。从表达能力上看，面向对象模型能够对多媒体信息的语义关系，时空关系、空间关系进行更多的模拟，这是一个很有前途和生命力的研究方向。
1.4　基于ORB(Object Request Broker)的中间件
　　基于ORB的中间件主要是采用面向对象的技术，ORB可以看作是与编程语言无关的面向对象的RPC应用。它的成员函数可以采用类似Object-function()方式调用离端的对象。
5　结语
　　本文提出了一个将安全监视影像分成背景图像与运动视频图像并分别存储入库的思想，这将使安全监视图像数据库的数据压缩比获得质的提高。。。ORB的总体框架图如图2所示。



图2　ORB的总体框架图
　　理想的要求是，一个ORB应赋予每个对象(与其它对象特别是远程的对象进行通信时)以下的分布透明性：
　　位置：无论其它对象是否处于同一个计算机中；
　　访问路径：与其它对象交换消息经过的途径；
　　重定位：其它对象从一台计算机移至另一台；
　　数据表示：其它对象相应的数据格式；
　　通信机制：使用何种进程间的通信机制和规程；
　　调用机制：其它对象的方法是如何执行的。例如：进程、线程和动态链接库等的细节；
　　存储机制：其它对象任何可以或不可使用存储的情况；
　　机器类型：任何机器型号上的不同；
　　程序语言：其它对象是以何种语言实现的；
　　操作系统：任何操作系统上的不同；
　　安全机制：其它对象本身所具有的访问控制机制。
　　对以上各方面的任何变更都无须将这个特定对象重新编译(或重新链接、重新加载等等)，其整体效果是， 对任何一个对象的实现动态地进行更改，都将不会影响到其它的对象，无论它们是服务者还是请求者。
1.5　基于消息的中间件MOM
　　基于消息的中间件MOM提供了一个完整的处理环境，允许开发者及用户连接不同系统之间的数据和代码，或采用一致的界面进行应用处理的互连。MOM提供了一个高层应用接口，为不同系统提供操作核心。在定长记录库文件中查找记录是容易的，用记录大小乘以记录号即可得到一个记录相对字节偏移量，对于变长记录库，由于每个记录长度不变，因此就要利用某种形式的索引。
　　MOM一般可以分为两种形式：消息传递(Message Passing)和消息队列(Message Queuing)。建立数据模型的原则是简单实用，我们选用了关系模型扩充的图像数据库数据模型。其主要的模式是广播/交付(Publish-Subscribe)方式。
　　运动物体运动区　据统计，安全监视图像中背景部分约占3/4，运动部分仅约占1/4。该通信模型提供了位置透明性。程序只需要简单地将消息以主题方式发送出去，由中间件来负责将消息传递给所有订购该主题的程序。MOM主要通过agents技术来实现Publish-Subscribe方式应用。当程序广播消息时，首先与一个代理进行连接，将消息传递给代理。
　　易于演进　中间件实现的功能对应用程序来说是透明的，所以可以对局部进行改进而不会影响到系统的其它部分。由于代理可以实现消息的动态路由功能，因此，该方式能够提供较好的容错性能，但它MOM的异步特性，不太适合长时间网络断开的情况。
　　消息队列方式允许程序无须直接建立起连接即可发送和接收消息。程序只须简单地将消息发送给消息队列，由消息队列负责消息的传递，对应用程序完全透明。
5　结语
　　本文提出了一个将安全监视图像分成背景图像与运动视频图像并分别存储入库的思想，这将使安全监视图像数据库的数据压缩比获得质的提高。它的缺点是需要一些配置工作，性能不是很高，而且如果队列丢失，整个系统将受到影响。
　　MOM可以克服基于RPC的中间件的限制，提供基于消息的异步通信机制，因此MOM API调用不会阻塞应用程序，同时MOM不会占用大量的网络带宽，可以跟踪事务，通过将事务存储在磁盘上，可以恢复系统及网络故障。
　　常见的MOM产品有：DEC的MessageQ、IBM的MQSeries、Microsoft的MSMQ。
2　中间件优点及具体应用
　　传统的客户机/服务器模式是一种双层模型。双层模型的物理实现方式为：一台桌面电脑当做客户机使用，而一台网络服务器则用于容纳后端数据库引擎。在双层模型里，程序逻辑在客户机与服务器这两种物理位置之间分担，应用程序的商业逻辑必须物理性地驻留于客户机端，或在后端DBMS里以触发器或存储过程的形式实现。这种双层的客户机/服务器方案的优点在于实现数据访问相当简单，GUI可与数据源直接约束在一起，数据维护的所有细节都可以得到自动控制。但是它也存在着很多的不利因素。这种方式不适合于高性能应用处理，因为它需要大量的数据通信，同时，当网络发生故障时，系统将不能正常工作。很明显，额外的管理会消耗客户机资源，并可能导致应用程序的性能下降。图像库获取的方法是把连续视频按帧采集，以视频帧序列表示视频信号。ODBC具有良好的数据库独立性，它可以避免应用程序对不同类型数据库使用不同的API，通过ODBC可以使得数据库的更改变得非常容易，因为对应用程序来说这只需改换一下驱动程序。
　　性能较差　因为将图形界面与数据源绑定在一起，所以会消耗客户机的主要系统资源。这对客户机来说是一个沉重的负担，会导致系统性能的下降。
　　正是由于双层客户机/服务器方案存在诸多限制，所以又提出了一种新的三层服务器模型。三层客户机/服务器模型以构建分割式应用程序为基础。对一个应用程序进行分割以后，可将代码划分为不同的逻辑组件，在三层的客户机服务器模型中，这些逻辑组件分为三个逻辑层：软件产品、业务服务和数据服务，它们共同组成一个应用程序。。
　　三种服务的属性如下：
　　用户服务　提供信息和功能、浏览定位，保证用户界面的一致性和完整性；
　　业务服务　共享的业务政策，从数据中生成业务信息，保证业务的一致性；
　　数据服务　数据的定义、永久数据的存储和检索，保证数据的一致性。。在定义了服务之后，需要进一步创建具体的物理墙体来实现它们。构件是一个或几个服务在物理上的封装，可以通过构件的接口获得这些服务。。
　　易于使用　中间件能和同构或异构环境下的多种数据源通信，同时它能管理数据间的公共逻辑约束。根据性能和维护的需求、工作量、网络带宽以及其它的因素，可以在网络上灵活地部署这些构件。
　　数据词典是关于数据库模式信息的数据库，存放的是各种数据库模式的类型定义，数据库已知性检验的约束规则、各种代码、用户权限等，是IDBMS的一部分。实际上这些物理构件就是基于ORB的中间件。
　　这种基于构件的三层客户机/服务器的优点可概括为以下四个方面：
　　可重用性　许多应用程序可共享和重用封装在构件中的功能。
　　灵活性　从桌面计算环境到功能更强的网络服务器，随处都可分配工作，这有利于协调性能和网络带宽。与此同时，中间件还可以放在客户机和服务器之间的多层应用服务器中。
　　易维护性　将业务逻辑部署在中央服务器上，而不是分散在用户桌面上，这有助于处理各种变化，并缩短解决方案的往返时间。
　　在某电视台资料管理及业务处理信息系统中，我们采用了上述三层的服务模型：在客户机上的客户服务程序，在构件服务器上的业务服务程序和在数据服务器上的数据服务程序。客户服务程序主要处理表示逻辑，也就是以某种方式同用户进行交互，它基本上是一种图形用户界面。业务服务程序主要完成业务规则的控制和对数据库的访问，并且业务服务程序是以构件的形式提供给客户服务程序调用的。建立数据模型的原则是简单实用，我们选用了关系模型扩充的图像数据库数据模型。数据服务程序主要就是各种智能数据库所能提供的功能，例如存储过程、存储查询等等。
　　该系统的结构如图4所示。


图4
　　在这个三层客户机/服务器模型中，我们把各种业务规则都封装在各自相应的构件中，这样业务规则的实现和客户使用的图形用户界面的实现就相分离了（在传统的两层客户机/服务器模型中，两者是同时在客户机应用程序中实现的），当一方要进行改变时，只对需改变的一方进行改变。与此同时，在同一层上的构件之间也可以相互调用，这样也减少了代码的可重用性，减少了编程量，而且因为构件也是相互独立的，所以当需求改变时也只需对相应的构件进行改变。如此一来就大大减少了系统维护的负担，并提高了系统的适用性。。主要研究方向：新型程序语言设计。图像通信的接口功能是从网络获取影像媒体的数据以构成图像库。
　　作者单位：宋晓梁　刘东生　许满武（南京大学计算机科学与技术系，计算机软件新技术国家重点实验室　江苏．南京210093)
参考文献
［1］　Ron Ben-Natan. CORBA-A guide to common object request broker architecture. Colgate-Hill,1995
［2］　D.Box. Q&A ActiveX/COM.Microsoft Systems Journal,
1997；(3):93-105
［3］　A.Birrel,B.J.Nelson. Implementing Remote Procedure
Calls. ACM Transactions on Computer Systems, 1984;2(1):39-59
［4］　黄　俊,许满武,陆剑锋.中间件LSM及其在物资调配系统中的应用.微型计算机，1997；17(增刊2)：78-80
［5］　Cynthia McFall, IBM Corporation. An Object Infrastructure for Internet Middleware IBM on Component Broker. IEEE Internet Computing, 1998;2(2)
［6］　Object Management Group. CORBA 2.1 Update 圣夫龙,
1997，8 
　收稿日期:1999-04-23(修改稿)
