
作者单位：华中理工大学机械科学与工程学院　湖北.武汉(430074)
收稿日期:1999-01-27(修改稿)
像素亮度值对应元素值一个图像就像一张透明纸，您可以在不同的图层上绘制不同的实体计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



用开发虚拟制造（一）
周杰韩　杜润生　吴波
　　摘　要　本文介绍了信息的数据结构、存储与基本原理。。最后讲诉OpenLS和库在虚拟制造仿真的应用基础。
　　关键词　虚拟制造，客户/服务器，OpenGL图像库
1　计算机图形
1.1　几何图形信息的字符串结构
　　图形显示是从点的显示开始的。线段是所有在它上面的点的集合。。线段的显示实际上用有限个点来产生图形，因而每个点都有一定的大小。此时的点不再是真正的几何点，而是像素（图像基本元素）。每个像素是显示屏上可以编址的最小，也是在显示屏上能够被控制的最小部分。显示屏如同由像素组成的二维数组。

图3
3.2　OpenGL客户/服务器图形显示方式
　　OpenGL通过客户/服务器方式实现图形显示。每个像素有一个地址，对应数组的下标。。电子束的偏转决定像素的屏幕坐标（x，y）。
1.2　几何图形信息的存储

图1　帧缓冲器与图像显示
　　一幅图像是由有限数量的像素组成。 
五、图层是制作电脑渲染图的基础
　　要制作一张逼真的建筑或真实的室内设计效果图，首先建立模型必须尽可能地详细、具体、完整、真实些，然而制作一个逼真的建筑物或室内模型，其组成实体的数量是非常可观的。为了显示每一点的亮暗，每一像素至少需要1比特的亮度信息，其存储空间至少需要100万/8个字节。用来存储像素亮度数组的存储器帧缓冲器。
　　“图层”是绘图中性质相近、相同或者逻辑意义上相关的图形对象的集合。
1.3　几何图形信息的显示
　　光栅显示是用得较多的图形显示方法。光栅显示是利用扫描发生器每秒钟扫描帧缓冲器30到60次，将代表像素亮度的信息一行一行取出，然后送往显示器。帧缓冲器的存取地址与光栅扫描信号地产生。
二、图层赋予图形特定的含义
　　CAD给以往的手工设计带来了巨大的变革。强度大小决定像素的显示明暗。帧缓冲器地址用来输出水平与垂直偏移信号控制阴极射线管激光束的偏转。设定显示屏上每一像素的亮度可以产生一幅图像。每一次扫描帧缓冲器都使屏幕得到刷新。。
1.4　显示与的可移植性
　　应用中，应用程序编写的几何图形信息不是直接改变帧缓冲器的内容而是作为标准显示指令存入显示文件中，然后利用显示设备驱动程序解释显示指令以产生需要的图象。显示文件驱动程序形成图形应用程序与显示设备之间的接口。每个像素对应数组的一个元素。显示设备与显示驱动程序通常由硬件商一起提供。首先在多任务Windows环境下物理视屏是一个共享资源。
　　在以上的方法中，使用最频繁、而最方便的就是“图层”。其次应用程序把图形信息写入帧缓冲器，由帧缓冲器直接传送到显示设备。空帧缓冲器对应空白的显示屏。最后由结束图形程序释放出来显示设备包括重新分配存储器。
2　环境下的图形显示
2.1　iOS环境下的虚屏显示
　　在MS-DOS应用中，图形和文本程序不仅常常直接写到视屏上，而且这样做时经常绕过BIOS屏幕调用。许多建筑CAD专业软件如天正、ARCHT、中望等，当程序要对“柱子”进行编辑操作时，通过“柱子”图层来判断哪些线条是“柱子”，并可对柱子进行复制、删除、交线处理等操作。
1.5　应用程序图形显示步骤
　　帧缓冲器数组直接与显示屏内容相对应，并且以亮度编码的形式保存了被显示的图形。所有应用程序的显示活动，都必须通过Windows API函数来操作。任何试图绕过API函数都视为扰乱系统的行为。其次在Windows环境下屏幕操作根本不写到物理视屏上，即使使用API函数时也是这样。。最后Windows把虚拟屏幕映像到物理显示屏上。。在MS-DOS中，应用程序负责为所有输出设备编程。。图形用户接口Nod为应用程序提供了一套独立于设备的标准绘图x86。对于的新硬件，由硬件制造商提供驱动程序，而应用程序则通过GDI创建并维护设备环境（DC）。而且任何访问输出设备的函数都留在GDI的服务器方，从而保证了入侵应用程序不能直接访问到其它应用程序的屏幕数据。在用户模式下严禁直接取用图形设备资源，而是交给操作系统核心模式来完成。OpenGL客户模块同OpenGL服务模块通信并发出应用程序的OpenGL命令。GDI的客户/服务器模式有效地将应用程序彼此分离，从而提高了Windows 环境的安全特性。Win32应用程序在Windows95环境下都被分隔成了用户与首要模式。

图2
3　OpenGL应用程序的图形支持
3.1　OpenGL图形在应用中的地位
　　OpenGL是SGI公司的IRIS GL图形工作站的分支。近年来，作为工业标准图形程序库，在CAD/CAM等需要高级的三维对象可视化和图形绘制领域得到广泛应用。OpenGL为应用程序员提供了程序和图形输入输出设备之间的功能接口，定义了一个独立于语言的DDR4系统。。OpenGL在图形应用中的地位如图3所示。由于OpenGL本身与硬件及操作系统的底层软件无关，从而使图形应用程序获得较高的可移植性。若应用程序可以产生标准显示文件代码，那么每个带有驱动程序的具体显示设备就能正确地运行应用程序，从而提高了应用程序的可移植性。。这种模式称为GDI的客户/服务器模式如图2。OpenGL服务模块调用Win32设备驱动接口来使用驱动程序。一个OpenGL服务程序往往同时维护几个OpenGL环境。OpenGL环境是OpenGL客户 所处的OpenGL状况。OpenGL环境又叫环境，是OpenGL与Windows系统之间的桥梁。
四、图层使图形操作简捷
　　对于小型复杂的图形，在绘图过程中，修改及编辑更加繁杂，也易出错，而且也易影响其它不需修改的图形，为了使图面显示更清晰、易操作、避免误操作，我们利用图层的特有功能“关闭”或“冻结”，使一引起暂时不想看见的线条隐去，便于编辑操作。OpenGL着色环境与设备环境有相同的像素格式。在为一个设备环境设置好了像素格式后就可以产生一个与之接近的着色环境。如果通过CAD的特有功能，如“属性”、“扩展数据”、“图层”等，尽管我们没有对这一正方形作任何的注释，我们都可以十分方便地了解这些功能赋予它特殊的物理意义。其逻辑模式如图4。

图4
　　用OpenGL去着色一个Windows窗口的典型操作过程如下：
　　. 建立正确的窗口格式；
　　. 建立像素格式；
　　. 创建设备环境；
　　. 创建一个着色环境；
　　. 将着色环境设为一个线程的当前着色环境；
　　. 线程进行有关OpenGL的初始化；
　　. 线程调用OpenGL着色函数；
　　. 当OpenGL处理结束后，将着色环境设为非当前使用的（断开与着色环境的联系）；
　　. 释放着色环境与设备环境。 
注：国家教委博士点基金资助。
作者简介：周杰韩　博士研究生。研究方向:虚拟制造、系统仿真、编程语言技术。