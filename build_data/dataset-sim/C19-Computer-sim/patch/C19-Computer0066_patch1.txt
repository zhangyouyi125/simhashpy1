计算机应用
Computer Applications
1999年 第19卷　第8期 Vol.19　No.8 1999



分布式对象在软件系统集成中的应用
郑无疾　张建军　朱山风
　　摘　要　分布对象是一些灵敏的软件模块，它们可以位置透明，语言独立和平台独立地相互发送消息。在理想情况下，当发生第i种故障时，第i个模式输出ei=0.9，否则为0.1。
　　关键词　分布式对象，系统集成，组件
DISTRIBUTED OBJECT TECHNIQUES
IN SOFTWARE SYSTEM INTEGRATION
Zheng Wuji　Zhang Jianjun　Zhu Shanfeng
School of Computer Scinece, Wuhan University，Hubei.Wuhan 430072
　　Abstract　Distributed objects are intelligent software models. They can send messages to each other transparently with location language and platform. In this paper, we focus on the questions and solutions related to distributed object technology.
　　Keywords　Distributed object, System integration, Component
1　背景
　　传统的Client/Server结构对Client和Server的角色划分相当清晰，将整块软件切分为二：一部分运行在Client端，一部分运行在Server端，通过如远程过程调用（RPC）机制来实行简单的互操作，协同工作完成任务。
　　随着计算机网络技术的飞速发展，特别是Internet/Intranet爆炸式的规模扩充，各种业务开始在Internet上进行。在这些业务对网络计算提出了更高的要求的情况下，第一代的Client/Server结构开始暴露出不足之处：首先，这种结构对Client和Server的角色分工过于严格，而实际情况是在许多网络应用中，分不清谁是Client，谁是Server，两者界限非常模糊，如网络医疗会诊；其次，基于RPC的互操作直接将Client和Server连接起来，并没有中间机构来处理请求。
2　分布式对象
　　第一代的Client/Server系统多是针对局域网的。在更大的环境中，系统的可伸缩性，异构配置管理和网络监控变得至为重要。由于对象技术有处理复杂系统的能力，人们将对象技术引入了分布环境以解决面临的这些问题［1］。
　　传统的对象可以被看作是封装了数据和作用于这些数据的操作的自包含的实体。这些对象支持的操作（又称为方法）是依赖于对象的内部状态的。对象技术通过将相关数据及操作与系统的其它部分隔离，而使得系统的构建与维护工作变得容易。
　　传统的对象只“驻留”在一个程序之内，在程序编译时也不会分裂成多个实体。与此不同的是，分布式对象可以驻留在一个网络的任何地方，作为一个物理上独立的实体存在并可以被其它对象远程调用。通过中间件（Middleware）包含的标准通讯协议，由各种不同的语言编写和由不同编译器编译的对象可以无缝地进行通信以构成一个完整而健壮的系统。这样的对象框架保证了分布对象间的高度透明的互操作性。
　　分布对象是一些灵敏的软件模块，它们可以位置透明，语言独立和平台独立地相互发送消息，实现请求服务。我们称这些独立的对象模块为组件。在分布对象系统中，分布、协作的单位就是这些对象组件。这些对象组件成分可以是由一些不同的开发者相互独立地使用不同的语言或工具构造的。
　　2.2　信息进化的假设
　　为了便于研究，对并行设计的实际过程进行了一定的简化和假设：
　　（1）在并行设计中耦合迭代的各个阶段，每个活动都独立地并行进行一次［7］；
　　（2）耦合活动集中，每一个活动的进行必然引起和其它活动间不同程度的信息调整，在迭代过程中，假设信息调整量保持不变，即信息调整量线性假设；
　　2.3 信息调整向量
　　每经过一次迭代，所涉及到的活动都要进行信息调整，正是在这种不断调整的过程中设计信息由不完整状态逐渐进化到完整状态的，而信息调整量的大小表明了其迭代工作量的大小。组件用于实施应用领域内的一些有限的服务，它可以和其它组件一起构成完整的应用。组件的粒度可大可小；组件具有良好的接口，同经典对象一样，组件只能通过其接口来访问；组件的实现与其接口是分离的，组件可以使用对象、过程式代码或封装现有的代码实现；组件是系统无关的，可以作为对象跨越地址空间、网络、语言、操作系统和工具来调用；组件还可支持封装、继承和多态等对象特性。总之，组件是可复用的，自包含的，独立与具体应用的软件模块。
　　目前使用较多的组件标准是CORBA（Common Object Request Broker Architecture）和DCOM(Distributed Component Object Model)。信息调整向量ΔIt是N×1维向量，N对应耦合集中活动的数目，ΔIt所含元素ΔIit表示在迭代过程的t阶段，i活动需要完成的信息调整量。它定义了对象之间通过ORB透明地发送请求和接收响应的机制，保证了在分布异构环境下对象之间的互操作性［2］［3］［4］。


图1　CORBA 结构
　　微软提出DCOM作为未来的Internet计算的模型。DCOM中主要使用ActiveX组件作为其对象。在将来，Java对象也可能会被作为其对象。和CORBA一样，DCOM中的接口是和功能分开的。


图2　DCOM组件结构
　　微软使用了基于DCE(Distributed Computing Environment)的IDL (Interface Definition Language)来达到这一目的。由于这一IDL和CORBA和DCE的不兼容性，将严重限制这一标准和其它标准的互操作性［1］。
4　软件系统集成
　　根据应用需求，将若干软件系统集成在一起协同工作。如此形成的集成软件系统称之为集成环境，而组成此集成软件的各部分软件系统称之为部分软件，或软部件。以上两种组件标准的提出，为软件系统的集成提供了必要的条件。
　　由于计算机应用软件系统的规模越来越大，复杂性越来越高，从零开始开发这样的软件系统显得很不现实。在组件标准的支持下，我们可以充分利用已有的可用软件资源，包括自己本地开发的，市场上可以买到的以及其它公用软件资源作为软部件进行系统集成，也就是要将这些软件进行“粘结”，实现它们之间的互用和互操作，实现客户化，满足应用要求。随着软件产品市场上各种各样的商品软件的出现和接口的标准化，用系统集成的方法开发应用软件已显得越来越重要了。
　　胡维礼，58岁，教授，博士生导师。相比于单纯地为客户进行定制式软件开发，系统集成对软件开发人员的经验和技术有更高的要求。
作者单位：南京理工大学制造工程学院　南京　210094
参考文献
　1　董　明，查建中，郭　伟。软件开发人员将分化两部分，一部分是软组件/部件制作人员，另一部分是应用系统分析和装配人员。应用开发人员结构的演变如图3所示。


图3　应用开发人员结构演变
　　目前，在软件工程的各个方面正发生巨大的变化。在可以预见的将来，软件自动化也将对软件的生产过程产生巨大的影响。
　　软件系统集成将面向对象技术作为其基础。从生命系统理论的观点来看，随着并行设计中耦合活动迭代过程的逐渐收敛，设计信息是通过不断地调整，逐渐由不完整状态进化到完整状态的[5,6]。引入新的性能指标
　　　　　(10)
设ξ为独立于r(k)的随机噪声，其均值为E{ξ}=M，方差为则
　　　　　　　　　　　　　　　　(11)
极小化式（11）的性能指标，等价于在残差样本输入端加入噪声后，仍采用BP算法进行训练，可保证该神经网络故障模式分类的鲁棒性。
　　信息调整总量为
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　(4)
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　(5)
　　信息调整总量ΔI表示了由于耦合迭代引起的整个设计过程任务量的增加，因而信息调整总量标识了迭代过程的收敛性。因此，本文提出一种新的鲁棒故障检测策略，其结构如图1所示。对已有的软部件进行有效管理。
　　CSCW(Computer Supported Cooperative Work)是当前计算机研究中的一个热点。
　　快速的信息进化表明在迭代过程的早期各耦合活动就能得到较为完整的信息，因而可以根据其它活动较为正确的结果进行调整，使得迭代过程能在较短的时间内收敛。我们将尝试把CSCW的概念、方法引入软件系统集成的集成开发环境中。
　　定理1［3］　对于给定的非线性系统（2）及其观测器（3），如果ψ(x,u,t)满足全局Lipschitz条件且，其中P,Q为正定对称阵，满足Lyapunov方程，则
　　定理1仅提供对给定L阵来检验估计误差是否收敛的方法，并未指明对给定的常数γ如何选取L才满足γ＜λmin(Q)/2λmax(P)。研究方向：分布并行处理系统。研究领域为神经网络与故障模式识别，以及非线性系统的自修复控制