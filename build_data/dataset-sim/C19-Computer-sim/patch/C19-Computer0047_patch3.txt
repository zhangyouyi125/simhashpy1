计算机工程
COMPUTER ENGINEERING
1999年  第25卷 第7期 Vol.25 No.5 1999



高级综合中寄存器合并问题的研究
袁小龙　高德远
摘要　高级综合技术的研究在当前倍受关注。
　　WWW是快速增长的巨大信息库,含有大量有用的信息,其信息存储为静态HTML页面,主要通过浏览器来查看。通过对寄存器合并问题进行研究分析，给出一种高级综合中的寄存器合并算法。文献［2］采用用户输入页面描述文件对层次结构进行抽取,该描述文件需要用户描述抽取过程的具体变量和编写抽取方法,只能适用于某种特殊的页面。
关键词　高级综合寄存器合并
A Study on Register Merging Problem for High-level Synthesis
Yuan Xiaolong Gao Deyuan
Aerospace Microelectronice Center，Northwest Polytechnical University Xian 710072
Abstract：High-level synthesis is an active area of research presently.Inthe process of resource allocation,the registers required in data path should be merged in order to reduce the interconnection wires.Based on the study of the register merging,a register merging algorithm is presented in this paper.This algorithm is very efficient and can improve the quality of the design in high-level synthesis.
Key words：High-level synthesis；Register；Merge
　　高级综合也叫行为综合，其基本任务是完成从数字系统的行为描述到寄存器传输级(RTL)设计的转换。从行为描述到 RTL结构的转换可分为4个子任务，即：内部表示、操作分配和调度、映射、控制器综合。内部表示子任务将行为描述转化为计算机可以处理的机内表示形式。操作调度将构成设计行为的操作划分到控制步中，使得在一个控制步中的所有操作均可在一个时钟周期中执行。操作分配确定在给定的面积与性能约束下实现一个设计所需的资源的类型与数量。映射将行为描述设计中的操作、存储器访问及互连分配给硬件单元，得到优化的面积与性能。一旦操作调度、操作分配完成及数据路径单元选取完毕后，须根据操作调度的需要生成相应的控制器，控制器实际上是一个有限状态自动机FSM(Finite State Machine)，操作调度及操作分配确定了FSM的状态数目、状态转换情况及FSM的输入、输出信号，可由这些信息综合出相应的控制电路。
　　这4个子任务相互联系，相互影响。由于P0是P1,P2的合并,因此,P0包含P1,对于P0的属性i,若其存在于P1中,A0i＝Ai；若其不存在于P1中,取A0i＝。但是,对于结构不相似的资源,例如,上海交通大学研究项目、《中国青年报》和《人民日报》抽取格式的差异很大。和大多数高级综合系统一样，在操作调度阶段就完成了功能单元的分配，因此在资源分配阶段主要完成存储单元(主要是寄存器)与互连单元(如总线、多路选择器、三态驱动器等)的分配，其中寄存器的分配是数据路径综合中的一个重要任务，高级综合中寄存器的分配可以通过3个步骤来完成，即求出每个变量的生命期、寄存器的分配和寄存器的合并。当前，关于寄存器的分配问题所进行的研究不多，关于寄存器的合并，当前所进行的研究主要集中于用存储器来取代所需要的寄存器。基于实际的芯片设计经验，本文将探讨用寄存器组来取代单个的寄存器，在不影响芯片性能的条件下减少互连线，从而达到减小芯片的面积、提高综合设计质量的目的。
1　变量的生命期
　　我们知道，在一个以VHDL给出的数字系统的行为描述中，含有许多变量，如果它们在产生后，经过一段时间后还要用到，则必须对这些变量分配寄存器将它们保存起来，但是如果对每个变量分配一个寄存器，这将会增大最后所产生的设计的面积，导致低质量设计的产生，因此必须考虑变量对寄存器的共享问题。最近,许多学者对各种形式的反合一进行了研究。
　　对于情况(2),假设P的两个导出模式为P1,P2。在确定变量的生命期时需要注意的一个问题是，当行为描述中含有条件结构时，由于一个条件结构中的两个分枝不会同时执行，如果两个变量是在不同的条件分枝中产生的，则它们不会同时产生，这样，即使它们的生命期有重叠，也可用一个寄存器来保存它们的值，即需要考虑对变量的生命期进行合并的问题。
　　定理5。例如，变量i必须在第2个控制步、第3个控制步和第4个控制步中有效(需要对其值进行保存)时，则它的生命期为集合Si=(2,3,4)。文献［1］的启发式方法,对没有标出字体大小和缩进距离的部分无法抽取,不能处理列表和表格,对于表2中各个页面内的对象大部分无法抽取出来。对于两个变量，当它们的生命期不重叠时，则可用一个寄存器来存储它们的值。寄存器的分配问题可采用文献[5]中的团划分算法(clique partitioning algorithm)来解决，在该算法中，用一个图来表示寄存器的分配问题，图中的节点表示变量，以弧连接在同一个控制步中不会同时有效的变量。 This method can extract structured and semi-structured data。

图1 一段VHDL行为描述
　　从图1中可看出，该行为描述中包含了15个变量，在这里，假定图1中的VHDL行为描述是连续循环执行的，则很容易确定如图2所示的变量的生命期。虽然我们可以利用现有的众多搜索引擎进行有效信息的查询,但是查询结果往往是互不相关的HTML页面,要直接查询页面上精确的信息十分困难。这里,运用启发式规则,按照字体大小生成该页面的初步层次结构,对于AAAI的页面来说,存在〈h2〉、〈h3〉和〈h4〉这3种类型的字体,所以在根节点下生成3层亲子节点。Page［3］研究了基于各种约束形式的反合一,基于约束的反合一可以避免过分抽象(overgeneralization)。当确定了数据路径综合中所需的寄存器后，将讨论寄存器的合并问题。
3　寄存器的合并算法
　　对于每个寄存器，在数据路径综合过程中，需要将它与某些功能单元相连接，以进行数值的传输，从而能正确地实现行为描述所定义的功能。如果将每个连接都用连线来实现，对于某些设计，连线的数目将是非常大的。因此为了减少连线和提高设计的质量，可对寄存器进行合并，实现连线的共享，即根据对寄存器的读写关系，可将几个寄存器合并为一个寄存器组，每个组含有多个读出端口和写入端口，在芯片设计中，将寄存器的读出端口和写入端口分开进行设计，仅在需要进行值的传输时，才将这些端口与有关的单元连接起来。下面只要证明P(x)为最小反合一即可。在对高级综合技术进行研究的过程中发现，如果寄存器组具有的读出端口和写入端口数目比较多时，则每个寄存器组可包含更多的寄存器，但增加了控制开销，相反，如果寄存器组具有的读出端口和写入端口数目比较少时，则每个寄存器组可包含的寄存器就比较少，但控制开销比较小。基于对微处理器和MPP计算机的芯片设计经验，认为，每个寄存器组包含一个写入端口和两个读出端口是比较合适的。在寄存器合并中主要解决的问题就是确定出可以合并到一个寄存器组中的最大的寄存器集合。这里,运用启发式规则,按照字体大小生成该页面的初步层次结构,对于AAAI的页面来说,存在〈h2〉、〈h3〉和〈h4〉这3种类型的字体,所以在根节点下生成3层亲子节点。下面给出求出可合并到一个寄存器组中的寄存器集合的算法。
　　假设每个寄存器组有2个读出端口和1个写入端口；操作调度后，操作被调度到k个控制步中完成执行，即s1--sk；进行寄存器分配后，行为描述中的变量需要y个寄存器来保存其值，即r1--ry；当寄存器i包含在寄存器组RG中时，变量Xi为1，否则，Xi为0；则找到可合并到一个寄存器组RG的最大寄存器数目的问题可定义为如下的0-1线性规划问题：

(1)
约束条件如下：

　　其中j=1,...,k；
　　cij表示寄存器i在第j个控制步中要进行读出操作；
　　dij表示寄存器i在第j个控制步中要进行写入操作。
　　通过对该0-1线性规划问题进行求解，就可找到可合并到一个寄存器组RG中的最大数目的寄存器集合。
4　实验结果
　　在对寄存器合并问题进行研究且给出了相应的算法之后，我们用C语言实现了该算法，采用文献[5]中5.6节给出的例子来验证本文中给出的合并算法的有效性。图3(a)给出了寄存器合并前的数据路径(文献[5]中的图1)，可看出，数据路径中包括8个寄存器，采用本文给出的方法进行寄存器合并后，产生了3个寄存器组，即(v1,v3)、(v2)、(v4,v5,v6,v10,v12) ,最后生成的数据路径如图3(b)所示。
4　应　用
　　多模式下的反合一可应用于许多方面。


图3 合并前的数据路径和寄存器合并后的数据路径行寄存器合并后，五连线的数目减少了许多，所产生的结果与手工设计的完全一致。
　　采用本文中给出的算法对LS MPP中的处理元(包括一个ALU，一个移位器，路由器，一个缓冲器，8个寄存器)进行寄存器合并后，互连线的数目减少了许多，所产生的结果与手工设计的完全一致。
　　(2) A,B分别为P的两个导出模式的实例。为了确定上面各标题段之间的层次,需要以下启发式规则：(1) 子段标题字体一般比所属段的标题字体更小；(2) 向右缩排的段常常是另一个段的子段；(3) 无序列表段、有序列表段和表格段中各元素互为兄弟。替换可以有以下几种形式：(1) x→,(2) x→Q(...),(3) x→(t1,t2,...,tn)