计算机工程
COMPUTER ENGINEERING
1999年 第25卷 第8期 Vol.25 No.8 1999



Unix和Windows NT之间实现远程过程调用
孙春艳，项钦之
摘要：介绍了利用Socket机制，实现跨Unix和Windows NT系统的远程过程调用方法、实现机制，并简介编程要点。这样，就通过一系列的“光栅”和“矢量”操作
技术，把图库中堆积如山的图纸，按照人的思维方式和认知过程，转化成为用“光栅和
矢量数据”来表述的“信息”及相关的“过程”，并制作成可以使图纸既像“数据”一
样被处理，又像“过程”一样能够描述其细节的智能软件。然而，对于多种操作系统共存的网络环境，远程调用程序在不同的系统上时，要实现远程过程调用就不能直接使用现有的 RPC 软件。 Unix 和 NT 之间的跨平台不带参数的远程过程调用已经在包括 SUN 工作站 ( 以 Solaris 为操作系统 ) 和 PC 机 ( 以 Windows NT 为操作系统 ) 的网络环境上实现。 
1 实现原理和实现机制
1.1 实现原理 
　　TCP/IP 作为应用最广泛的网络协议，已成为计算机行业中开放系统互联的 " 既成事实 " 的标准，大多数版本 ( 包括 Solaris) 的 Unix 已把 TCP/IP 作为操作系统的一部分， Microsoft 公司的 Windows NT 也包含了 TCP/IP 协议。
    清华图纸自动输入及管理系统自１９９３年９月通过国家鉴定后，年年在“进步”
，人们对“系统”迈出的每一步都给予了鼓励。 Socket 首先是由 4BSD Unix 提出，它采用 Client/Server 模式的通信机制，解决了网络之间连接和数据通信问题。设计效率提高了，产品制作周期缩短了，图纸再利用率提高了
。 Windows NT 提供的 WinSock 借用 4BSD Unix 中套接字的概念，同时又对 Windows 的几种特点增加了扩充，它的实现与 Socket 既有共同点又有本身的特点。利用两者的共同点实现两种操作系统之间的通信；由于两者的差别，编程实现又有很大不同。 
1.2 实现机制 
　　一般的 RPC 通常采用所谓的 Client/Server 工作方式，这是一种非对称的工作方式， RPC 的调用者处在 Client 方，而远程过程即被调用者处在 Server 方。如图 1 所示。核
心是采用广谱病毒识别机制，不受病毒种类限制。如图 2 所示： 

图2 跨平台RPC模型
　　图 2 中 (1)-(6) ， (1′)-(6′) 和图 1 中 (1)-(6) 实现相同的功能，即 Unix 系统上的调用者通过 Client 进程既可经过 (1) 、 (2) 、 (3) 、 (4) 、 (5) 、 (6) 调用本系统内远程过程，也可经过 (1) 、 (2′) 、 (3′) 、 (4′) 、 (5′) 、 (6) 实现 Windows NT 系统上的远程过程调用。同样 Windows NT 系统上的调用者通过 Client 进程经过 (1′) 、 (2′) 、 (3′) 、 (4′) 、 (5′) 、 (6′) 和 (1′) 、 (2) 、 (3) 、 (4) 、 (5) 、 (6′) 调用本系统及 Unix 系统的远地过程。 
　　由于系统的差异， Unix 系统和 NT 系统的服务进程的实现是不同的，图 2 中 Client 与 Client ′， Server 与 Server ′进程实现功能一样，但实现方法不同。具体细节在程序介绍中说明。 
2 函数介绍 
　　用户可见的函数有 3 个，调用方 Client 的 CallRemote-Proc() ，不论是在 Unix 还是 Windows NT 上，用户都用此函数调用异地过程。被调用方 Server 的两个函数：① RegisterRemoteProc() 为每个需要被异地调用的过程，在调用前在本机的远程调用过程表内注册；② DelRegistration() 用于取消本机的远程调用过程表内已注册的过程。 
　　不论在 Unix 还是在 Windows NT 上，如一个进程需要被异地调用时，必须使用 RegisterRemoteProc() 注册，之后此过程可被任意系统上的 CallRemoteProc() 调用。
    据介绍，计算机反病毒领域比较流行的有两种模式―――杀毒软件与防毒硬件，杀
毒软件是基于特征值扫描原理，通过提取已知病毒的特征值，对计算机文件进行比较，
发现符合病毒特征，然后再按与生成病毒相反的过程编制一个杀毒程序，从而消除病毒
。核
心是采用广谱病毒识别机制，不受病毒种类限制。它们是必须在使用远程调用的功能前，被启动的后台守护服务进程。前一个等待本机上由 RegisterRemoteProc() 和 DelRegistration() 发出请求，以维护远程调用过程表记录当前最新信息。后者等待网上任一机器上的进程发出调用本机过程的申请，通过检索远程调用过程表，确定此过程是否可调用，并将调用结果或不可调用信息返回发出申请的进程。
    更为可喜的是，这个智能系统不仅在图纸输入技术方面有独到之处，在图纸贮存和
管理方面有创新之处，而且在图纸处理方面，采用了“光栅与矢量混合编辑”模式，可
以把扫描得到的光栅图全部或局部转化成矢量信息，把“死”图纸变成了一种具有巨大
经济和社会价值的资源。他们针对图纸的多样性和图纸质量各异等实际，在图纸扫描输入计算机时，采用“
自适应分块二值化技术”；在图纸矢量化过程中，采用“交互分类矢量化技术”；在图
文分离时，采用“连通域分类技术”。无论 Unix 还是 NT 系统，这种函数的功能划分是一致的。下面分别介绍实现方法。 
　　(1) Unix 系统上的 Server 方程序 
　　注册主要用到同一台机器上进程间的信息交换技术。 Unix 提供消息队列实现进程间消息传送，所有的消息都放在内核并且都有一个相应的消息队列号，标志号记作 msgid 用来标识某一特定的消息队列，进程可通过所知 msgid 读写此队列中的某些消息。系统调用 msgget() 可创建一个新的消息或访问一个已存在的消息队列，一旦通过 msgget() 打开一消息队列，便可通过 msgsnd() 调用把一个消息挂在队列上。其它进程可通过系统调用 msgrcv() 从队列中读取此消息。 
　　Client 方的监控程序主要用到网络间进程通信。 Unix 提供 API 之一的 Berkeley 套接字 ,Socket 提供多个由应用程序维护的系统调用来建立进程间的网络连接。图 3 说明这部分程序利用面向连接的 Socket 系统调用的实现过程。 
　　监控程序的主要部分如图 3 中 Server 部分所示，完成对 Client 方的申请反应，并调用所需进程。    （薛  伍）
    
    
    
    
。设计效率提高了，产品制作周期缩短了，图纸再利用率提高了
。 registeredProc() 进程作为此处的服务进程在调用 CreateNamePipe() 函数建立一个命名管道实例时指定名字，所有命名管道实例共享相同的管道名，作为客户进程的 RegisterRemoteProc() 和 DelRegistration() ，在调用 CreateFile 和 CallNamePipe 函数时指定同样的管道名，连接到一个管道实例上。这样，进程使用相同名字的管道进行通信，完成对远程调用过程表的管理。 
　　NT 上的监控部分应用 WinSock 编写， WinSock 由 Berkeley Socket 发展来的，它们的基本原理一致，所以这部分的实现核心及结构与 Unix 上一致，如图 3 所示。但由于 WinSock 的特点，程序实现细节仍存在差异。 首先，由于 Windows Sockets 的服务是以动态连接库 WinSock.DLL 形式实现的，所以必须要先调用 WSAStartup() 函数对 Windows Sockets DLL 进行初始化，协商 WinSock 的版本支持，并分配必要的资源。在应用程序关闭套接字后，还应调用 WSACleanup() 终止 Windows Sockets DLL 的使用，并释放资源，以备下次使用。其次， NT 产生子进程的函数 CreateProcess() 实现机制与 Unix 系统中的 fork() 不同， Socket 号不能直接传给子进程，所以父进程须调用函数 WSADuplicateSocket() 获得套接字描述符，使得子进程调用函数 WSASocket() 之后，与父进程共享相同的套接字描述符。其余部分基本与 Unix 相同。杀毒软件的优点是使用方便，能彻底杀除已知病毒，但用户自行升级难度大，本身也
易感染病毒。核
心是采用广谱病毒识别机制，不受病毒种类限制。程序实现如图 3 中 Client 部分所示。 
作者单位：中国航天工业总公司CAD/CAM开发与培训中心，北京 100037
参考文献
1 全民，张倪 . 工作站系统结构、软件开发及应用 . 北京：国防工业 出版社， 1993 
2 钟皓，陈淑珍 . Windows 环境下的 TCP/IP 网络编程及应用 . 计算 机工程， 1997 ， 23(6) ： 13 
3 Microsoft Corporation. Microsoft Win32 程序员参考大全 ( 二 ). 北 京：清华大学出版社， 1994 
