计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



Windows 95下串行通信编程技术及其实现
郭峰林　朱才连
　　摘　要　本文首先简单讨论MSDOS、16位Windows和Windows95下的通信编程差别，然后着重讲述32位Windows95 环境下的通信编程技术，最后给出利用该技术实现串行通信的实例。对不同时间段内的流量采取不同的收费率，这样可调节网络流量，尽量减少拥塞并利用空闲线路时间。在诸多的应用开发中，与外部硬件设备通信是常见的应用，而串行通信以其简单的硬件连接方式常常成为应用开发者的首选。然而串行通信编程从MSDOS、Windows3.1到Windows95各不相同，虽然在功能上越来越强，但是编程的复杂度也相应增大。
　　笔者最近在Windows95环境下开发一套“公安110智能报警系统”，该系统需要对报警电话进行实时监控，以便能实时地进行接警和处警。报警电话的监控是通过检测从电话交换机中馈送的RS232标准的串行通信信号，其中串行口通信采用3线方式。该系统采用Windows95下的Visual C++ 5.0编写，由于有关Windows95的串行口通信编程方面的资料少，串行通信编程的实例也不多见，笔者在成功开发“公安110智能报警系统”的基础上，取得了一些经验，现在将有关串行口通信方面的一些关键技术写出来，供广大的编程者借鉴、参考。
2　下串行通信编程特征
　　MSDOS下的串行通信编程较简单，通信编程可以直接对串口的物理地址进行编程操作同时配合BIOS调用，即可实现串行口数据读写。根据 VC Book Online 的定义： ODBC provides an API that different database vendors implement via ODBC drivers specific to a particular database management system (DBMS). Your program uses this API to call the ODBC Driver Manager, which passes the calls to the appropriate driver. The driver, in turn, interacts with the DBMS using Structured Query Language (SQL) 。16位的Windows3.1操作系统提供了专门的串行通信的API函数：OpenComm()、CloseComm()、ReadComm()、 WriteComm()等，通过这些专用API（Application Programming Interfaces）函数来设置和读、写串行口。而Windows95将串行口和其它通信设备如Modern、传真机等统一视作文件，对串行口的打开、关闭、读写等操作与操作普通文件的API函数相同，如CreateFile()、CloseHandel()、ReadFile()、WriteFile()，正是由于这些函数的“多态性”， 同时还由于需要结合Windows95的线程编程、事件驱动等新技术，因而使得Windows95下的串行口通信编程比较复杂。
3　Windows95下串行通信API函数
　　在Windows95中将串行口与文件的统一了起来，对它们的打开、读、写、关闭等操作都使用相同的API函数，但是它们之间又有差别，譬如串行口不能象文件一样可以被删除，这些差别体现在API函数中部分参数的设置上。
　　弄清串行通信API函数的用法是掌握串行通信编程技术的关键。这种方法的关键在于如何把该软件与用户申请 Internet 服务紧密结合，要求用户进行 Internet 服务之前必需运行该软件进行帐号验证工作。其它没有提及的函数及参数可以参考Windows95 API函数手册。 Client 和 Server 之间的每一条消息，都对应一个完整的数据库事物处理，从而减轻了网络负载。否则，该分组被丢弃。电话拨号又可分两种：仿真终端方式和 PPP/SLIP 方式。 Client 和 Server 之间的每一条消息，都对应一个完整的数据库事物处理，从而减轻了网络负载。该参数是为文件共享提供的，串行口不能作为共享设备。为了简化系统的设计和实现，对计费系统提出以下原则： 1) 个人用户 ( 拨号方式 ) 按使用时间计费； 2) 集团用户 ( 专线方式 ) 按使用的数据流量计费。因为CreateFile()只能打开存在的端口，而不能象创建新文件一样创建物理上不存在的新串口；dwFlagsAndAttributes描述了该端口的各种属性。对于文件来说，具有多种属性（只读、隐藏、系统）是可能的，但是对于串行口，唯一有意义的设置是FILE―FLAG―OVERLAPPED；参数hTemplateFile必须为NULL。 
作者单位：上海交通大学光纤技术研究所，上海 200030
参考文献 
1 Norton P. MFC 开发 Windows95/NT4.0 应用指南 . 北京：清华大学 出版社 ,Prentice Hall ， 1998,4 
2 Tanenbaum A S.Computer Networks(Third Edition). 北京：清华 大学出版社、 Prentice Hall ， 1997,2 
3 高传善，张世永，曲海 . 计算机网络教程 . 上海：复旦大学出版 社， 1994,11 
4 Ullman J D ， Widom J.A First Course in Database Systems. 北 京：清华大学出版社， 1998,4 
5 Online Help about Visual C++ 5.0.Microsoft Corporation ， 1997 
。数据收集的具体过程是在网管工作站上启动一个数据收集进程，它根据配置文件确定收集数据的行为。在服务器处 Socket 创建成功后并处于等待状态时 ( 即 Listening 状态 ) ，客户机 Socket 创建成功后与服务器的 Socket 进行连接。这里介绍一种简捷的方法可以做到不了解DCB的详细内容也可以设置好串行通信参数。当存在多个出口时，统计的原理仍然相同，但需要从多个路由器上收集数据，统计也要根据多个数据流量文件汇总完成。对于本地接收的数据，当目的地址与本地地址范围一致时，则要用源地址作匹配。
DCB dcb ;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//定义设备控制块
GetCommState(hComm,&dcb);　　　　　　　　　　　　　　　　　//取出系统缺省设备控制块
BuildCommDCB("COM2:9600,N,8,1",&dcb); 　　　　　　　　　　　　　　　//设置DCB主要参数
SetCommState(hComm,&dcb);
3.3　超时设置API函数
　　编写通信应用程序的一个很关键的问题就是如何处理通信中的不可预测的事件。譬如接收数据过程中突然被中断，或者发送数据突然停止等等。如果不认真对待，这些情况可能会引起I/O线程挂起或者线程被无限阻塞。Windows95对于这类问题提供了安全措施，它让你通过超时设置来决定通信是否异常并作相应处理。因此超时设置在串行通信中显得尤为重要。 
　　(3) 在服务器端，调用 CListenSocket 的 Listen 函数；在客户机端，调用 CClientSocket 的 Connect 函数。COMMTIMEOUTS结构的定义如下：
　typedef struct ―　COMMTIMEOUTS {
DWORD ReadIntervalTimeout; 　　　　　　　　　　　　　　　　　　　　　//读端口间隔超时
DWORD ReadTotalTimeoutMultiplier;　　　　　　　　　　　　　　　　//读端口总超时乘数
DWORD ReadTotalTimeoutConstant; 　　　　　　　　　　　　　　　//读端口总超时常数(ms)
DWORD WriteTotalTimeoutMultiplier; 　　　　　　　　　　　　　　　//写端口总超时乘数
DWORD WriteTotalTimeoutConstant;　　　　　　　　　　　　　　　//写端口总超时常数(ms)
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
3.4　读串口API函数
　　串行口打开后，可以对它进行读写操作。表 1 列出了不同网络对用户信息的延迟 ( 表中 SMDS 交换的平均数据传输速率为 26kb/s, 设线路空闲 0.5s) 。参数lpBuffer是读取的数据缓冲区指针，要注意给该数据缓冲区分配足够的空间；参数nNumberOfBytesToRead是要读取的字节数；参数lpNumberOfBytesRead是实际读取的字节数；最后一个参数lpOverlapped 是指向一个可重叠I/O(异步)的数据结构指针。基于流量的记账对于租用专线或信道，它反应了每个 IP 地址使用公用线路的比例，对于按连接时间计费的线路，也具有一定的参考作用，因为一般连接时间越长，传送的数据量也越多。
3.5　写串口API函数
　BOOL WriteFile (HANDLE hFile,　　　　　　　　　　　　　// 由CreateFile()返回的句柄
　　　　　　　　　　　　　　LPCVOID lpBuffer,　　　　　　　　　　　　// 写缓冲区指针
　　　　　　　　　　　DWORD nNumberOfBytesToWrite,　　　　　　　　　// 要写的字节数
　　　　　　　　　　　LPDWORD lpNumberOfBytesWritten,　　　　　　　// 实际写的字节数
　　　　　　　　　　　LPOVERLAPPED lpOverlapped　　// 指向一个可重叠I/O的数据结构);
　　　　　　　　　　　　WriteFile()函数的工作方式选择与ReadFile()的相同,在此不重复。
3.6　关闭串口API函数
　　串行口是非共享资源，某应用程序打开串行口后，即独占该资源，使其它应用程序无法再访问，直到该应用程序释放串口。所以打开串口后，一定要关闭串口。关闭串口函数较简单。 CAsynSocket 是基类，其使用更具灵活性，但对编程人员的要求也较高。返回值非0，则调用成功。另外还采用了其他多种方法用以提高反应速度：如运行专用的 SQL 服务器， SQL 服务器采用 FAT 文件格式，减少操作系统高速缓冲，不使用不必要的驱动程序等。在Windows95中，串行通信有两种工作方式可供选择：查询方式和事件驱动方式。这两种工作方式各有优缺点，用户可以根据应用程序的实际需要选择其中的一种工作方式，下面对这两种工作方式分别介绍。
4.1　查询方式
　　对于从串口读取数据来说，查询是最为直接、易于理解的技术。但是查询会占用大量的CPU时间，效率较低。利用查询方式读取串口数据时通常要建立一个线程，建立线程使用CreateThread()函数。循环查询在线程里进行。举例：（假设端口已经打开)
　DWORD ReadThread(LPDWORD lpdwParam)
{ BYTE Buff［100］; 　　　　　　　　　　　　　　　　　　　　　　　　　//读数据缓冲区
DWORD nBytesRead; 　　　　　　　　　　　　　　　　　　　　　　　　//实际读取的字节数
COMMTIMEOUTS Timeouts;　　　　　　　　　　　　　　　　　　　　　　　　　　//超时设置
Memset(&Timeouts,0,sizeof(COMMTIMEOUTS));
Timeouts.ReadIntervalTimeout = MAXDWORD;
SetCommTimeouts(hComm,&Timeouts);
While(bReading){
if(!ReadFile(hComm,Buff,100,&nBytesRead,NULL))
{………　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//读取数据出错处理}
else{………　　　　　　　　　　　　　　　　　　　　　　　　　　//正确读取数据的处理}
}
PurgeComm(hComm,PURGE―RXCLEAR);
return 0;
}
　　例程中，线程的退出由bReading标志控制，当bReading为TRUE时，循环串口；当breading为FALSE时，线程退出。
4.2　事件驱动方式
　　事件驱动I/O方式是指线程通过监视通信资源中的一组事件来进行I/O操作，这种方式类似于MSDOS下的中断工作方式，效率高。任何发往该号码的分组将被发往列表上的所有成员；②当一个分组到达 SMDS 网络时，路由器先确定源地址是否与输入线一致，如果不一致，分组被抛弃；而且 SMDS 提供地址屏蔽，因此用户可以有效地建立私有网络，与外界没有 SMDS 联系，确保了网络的安全性。为了简化系统的设计和实现，对计费系统提出以下原则： 1) 个人用户 ( 拨号方式 ) 按使用时间计费； 2) 集团用户 ( 专线方式 ) 按使用的数据流量计费。 SMDS 以如下方式处理突发流量，连接到每根访问线的路由器包含一个计数器，它以固定的速率增加。注意：WaitCommEvent()函数和读写操作函数一样可以同步使用，也可以异步使用，这主要取决于在第三个参数中是否指定OVERLAPPED结构。如果指定为NULL，该函数就是同步的，必须等到SetCommMask()中指定的事件有一个发生时它才返回；如果指定了一个OVERLAPPED结构，该函数即工作在异步方式。通常将该函数工作在同步方式。
　　下面的例程演示了利用事件驱动I/O方式从串行口读取数据。 
　　另外，对于单位或子网的计费，要通过对每个 IP 地址汇总完成! 
　　2) IP 流量发生的时间分为高峰期，低谷期等不同的时间段。在WaitCommEvent()返回后，比较该函数返回的事件掩码，如果是EV―RXCHAR，则说明接收缓冲区中至少有一个字符处于等待状态；否则，就是错误事件，需要进行错误处理。所以还需要 IP 地址范围与单位名称的对应关系。系统可实时地监控从市话网上不断传来的报警电话。
作者简介：郭峰林　硕士研究生。
朱才连　博士生导师，研究员。
作者单位：中国科学院测量与地球物理研究所　湖北.武昌(430077）
参考文献
［1］　Microsoft Corporation,著.Win32程序员参考大全(二). 欣　力,等译.北京：清华大学出版社，1995，4
［2］　Microsoft Corporation. Microsoft Developer Network
［3］　Peter W.Gofton,著.精通串行通信.王仲文,等译.北京：电子工业出版社,1995，2
［4］　Charles A.Mirho, Andre Terrisse,著. Windows95通信编程.贺　军,等译.北京：清华大学出版社，1997，12
［5］　Scott Stanfield, RalphArvesen,著. Visual C++4开发人员指南.北京：机械工业出版社1997，6
收稿日期:1999-03-11(修改稿)
