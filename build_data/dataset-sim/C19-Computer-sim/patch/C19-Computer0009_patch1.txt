计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



多线程应用程序的同步技术
冯美霞
　　摘　要　本文描述了写一个多线程应用程序时，如何控制对全局变量和共享资源的访问。特别是在大量的读写操作且读／写比很大的情况下，如何通过使用复合同步对象使程序性能得到很大提高。本文阐述了一种算法用以实现这种提高。因此其研究重点在于如何优化象素点、场景数据在并行机各节点上的分配策略，以大幅度提高并行效率。编写一个多线程的软件，在于如何控制对各线程的数据和资源的访问。本文通过总结介绍入侵检测方法，将它们分为基于行为和基于知识两大类，并阐述了各自的实现手段和优缺点，目的在于能为我们的进一步研究起到启发和借鉴的作用。不加区分的允许对这些资源的访问，会导致程序失败或得到错误的结果 。解决的办法，是通过对线程的非对称使用，那就是分给每个线程特定的、不同的任务，从而把对特定进程资源的访问限制在单个线程内。
　　Win32 API提供了许多灵活的同步对象，它们可以使程序能管理对在同一个或不同的进程中的线程之间共享的数据和资源的访问。使用Win32同步对象的优点就是可以不通过串行化线程来控制对资源的访问。

图1　待计算象素点与场景数据的空间关系

图2　场景空间的层状分割
　　显而易见，由视点发出的第一级光线经过屏幕阴影区中任意一象素点投射入世界坐标系空间中，只有两种可能，要么落在场景空间中的阴影带上，要么射出场景空间。过度的串行化将导致程序实际上只有一个线程，那就失去了线程的优势。
2　使用Win32同步对象技术
2.1　统一的方法：Mutexes
　　最简单也是最好的控制访问共享资源的方法就是使用单个的Mutex。一般方法是通过分析系统的审计数据，找出有关追踪安全侵害和入侵企图的有用信息。究竟使用那一个取决于你的程序：关键段对象速度快且占用的系统资源少，但是它只工作于一个指定的进程并且不支持超时机制。于是,当你想控制程序的所有代码时最好让它们在单个进程中。而多进程的情况需要Mutex，并且也是DLL程序的良好选择，特别在你有能力使请求超时，并且不得不跨进程共享资源的时候。对每一个或一组共享的资源分配一个不同的Mutex，看起来似乎是更好的办法，但它面临如何避免死锁这个问题。一个经典的死锁例子是：一个线程拥有Mutex A，然后被阻塞，以等待Mutex B，然而另一个线程拥有Mutex B，然后被阻塞，以等待Mutex A。
　　尽管这种情况似乎不可能发生，但在一个模块化程序中完全有可能。如果两个模块都使用Mutex来保护自己的数据，则每一个使用这些模块的组件，都将不得不按相同顺序，访问它们以避免死锁。不幸的是，这需要你将内部的具体实现暴露给其它的模块。
　　每一个增加的Mutex，都会增加死锁的可能性，可以用设置时间限制来避免这一点，但是又不得不增加许多代码，来处理得不到所需的Mutex时的情况。
　　由于对视点到象素点的各条光线的跟踪都相对独立，光线跟踪的并行化处理是很显然的。
2.2　SYNCHRO类
　　一个提供同步功能的C++类。把同步对象定义为C++的类，（见程序1）用最基本的Win32同步对象，来构造复合的同步对象，按需要去扩展它们。同时，提供一个一致的界面，便可不必修改程序，就可以演示多个不同的复合同步对象。
程序1：SYNCHRO 类的定义
/* SYNCHRO - C++ class to provide synchronization object encapsulation*/
typedef enum {SLC―WRITE, SLC―READWRITE,
　　　　SLC―READWRITEPROMOTE} SYNCH―LOCK―CAPS;
typedef enum {SLT―READ, SLT―READPROMOTE,
　　　　　　　SLT―WRITE} SYNCH―LOCK―TYPE;
const int NUM―SYNCH―LOCK―TYPES = SLT―WRITE + 1;
class SYNCHRO
{
private:　　　　　　　　　　　　　　　　　　　　　　　　　　　　// To be determined
public:
SYNCHRO(void);　　　　　　　　　　　　　　　　　　　　　　　　　　　　// Constructor
～SYNCHRO(void); 　　　　　　　　　　　　　　　　　　　　　　　　　　　// Destructor
SYNCH―LOCK―CAPS GetCaps(void); 　　　　// Return the implementation′s capabilities
BOOL IsValid(void); 　　　　　　　　　　　　　　　　　　　　// Is this object valid?
BOOL Lock(SYNCH―LOCK―TYPE);　　　　　　　　　　　　　　　　　　　// Lock the object
BOOL Unlock(SYNCH―LOCK―TYPE); 　　　　　　　　　　　　　　　　　// Unlock the object
BOOL Promote(void); 　　　　　　　　　　　　// Promote the object from read to write 
};
2.3　相关名词解释
　　同步对象　就是一个句柄可以在对应于多个线程的等待函数中定义。同步对象的状态有：“Signaled”允许等待函数返回和“nonSignaled”可以防止函数返回。多个函数可以拥有同一个同步，对象从而使跨进程同步成为可能。这时，视点、屏幕及场景空间2的相对位置关系就与图1相同，可以方便地对场景空间进行层状分割。本文综合了国外大部分系统的检测方法，将它们从原理上作了分类，并指出了相应的优缺点，希望能对我们的进一步研究有一定的启发和借鉴作用。
　　事件对象　一个事件对象就是一个可以被SetEvent()或PulseEvent()函数显式设定状态的同步对象。事件对象在通知线程一个特定事件发生时很有用。
　　关键段对象　关键段对象提供类似于Mutex的同步机制。区别在于关键段对象只能被同一个进程中的线程使用。
　　第一个定义是一个称作SYNCH―LOCK―CAPS的枚举类型，其用它能支持的锁的类型来描述它的能力，还有一个SYNCH―LOCK―TYPE枚举类型描述类所能支持的锁的类型。
　　接下来有一个称作GetCaps的函数，它使类的用户知道一个特定的实现具有何种功能。
　　由于顺序分配的场景子空间与各处理机之间存在着对应关系，可以简单地描述为：第i号处理机上存储了第i层场景子空间。最使人感兴趣的是Lock和Unlock函数，它们允许类的用户，按需要的方式声明对对象的访问。线程根据需要和类的支持能力，声明所需要的锁的类型。
2　结束语
　　本文提出的场景数据划分策略是在研究了待计算的象素点与所需场景数据之间的内在关系的基础上提出来的，它克服了以往盲目分割场景数据所带来的光线在处理机之间的频繁交换，减小了并行光线跟踪算法中的通信开销。结束时，线程释放锁，使其可以被其它线程使用。
　　要注意的是，没有在类中定义任何私有的数据，成员函数也未定义。
3　SYNCHRO类的实现
3.1　SYNCHAPP程序
　　SYNCHAPP是一个用于演示SYNCHRO类的Win32控制台程序。SYNCHAPP是一个随机产生各种同步请求的程序。这给出了一个实时的对SYNCHRO类的各种实现的估计。
　　在讨论SYNCHAPP的实现之前，先介绍它的局限性。那就是它不基于任何一种现实情况。通过调整线程的数目和不同同步请求的比例，可以产生各种“交通”模式。
　　因为SYNCHAPP是一个模拟程序，它并不代表你的实际应用程序。SYNCHAPP中的锁的开关时间间隔比实际应用要长得多。这样做使得SYNCHAPP的输出结果比较短。规则模块可以由系统安全策略，入侵模式等组成。简要的介绍一下：主函数调用SYNCHRO类的构造函数，准备控制台，并建立工作线程以实施模拟。DisplayStatistics和DisplayStatus函数把模拟的进行情况输出到控制台。随着一些脚本被确认的次数增多，另一些脚本被确认的次数减少，攻击脚本不断地得到更新。
3.2　读／写同步
3.2.1　如何合并多个Win32同步对象
　　设想一下如下的情况：你有一个管理用户帐号和密码的数据库。管理员可以增加或删除一个用户，用户能修改密码。但在实际操作中，访问数据库的大部分时间都花在验证请求上，比如这是一个有效帐户？密码正确？
　　显然，如果允许两个线程同时读取数据库，或一个正在读但另一个正在写。由于验证请求并不需要修改数据库，没有理由不让多个验证请求同时发生。如果抛开处理机的其他硬、软件，只考虑其上存储的场景子空间的话，将这些处理机按其编号顺序层叠起来，就构成了整个场景空间。只需要一个同步对象，其允许多个线程同时读数据库，或允许单个线程修改数据库，但两者不能同时发生。于是就把这种同步对象称作“多读或单写”同步对象。
　　当提到读方式或写方式访问资源的时候，更精确的提法是共享和独占资源。这种方式的访问已经在很多平台上为I/O实现了。当打开一个文件用于读，禁止写，你就是一个只读者，可以同时读许多个文件；当打开一个文件用于读写，则一旦文件被打开，它就不能被其它用户访问。你并不想把这种方式应用于同步，因为这是一种低效率的资源使用方式。而且它不象通常同步对象那样提供自动阻塞和释放线程的功能。那么你如何构造一个“多读或单写”的同步对象呢？可以把假设的多个同时读，看成是虚拟的单个写，这种模型有点象已经实现的单个Mutex的情况。很可惜，不能在这里使用单个Mutex，因为对Mutex的拥有涉及到一个特定的线程，且只有Mutex的拥有者才能释放它。这对虚拟的单个写不起作用。因为在这种情况中，Mutex的拥有者不能保证是其释放者。但幸运的是，可以用Win32自动重置事件去完成它。Win32自动重置事件可以被任何一个线程设置。它一旦被设定，则恰好只有一个等待进程（虚拟写）被释放，然后事件被自动重置。为了完成同步对象，你需要串行化读线程对自动重置事件的访问，让只有一个读线程认为它是最后一个读线程。所以，仅有一个读线程在它读完之后设置自动重置事件。类似的，只有一个读线程认为它是第一个读线程，因此如果第一个读线程被阻塞以等待写线程完成，其它的读线程也一样。
　　hevExclusive事件保证了只允许一个写线程在任一时间通过锁函数。由于hevExclusive是一个自动重置事件，当它被设置时只有一个线程被释放，接着该事件被系统自动的重置。同样把前n层场景空间数据顺序分配给n个处理机。写线程和第一个读线程被阻塞在hevExclusive，其余的读线程被阻塞在csReader。但是只要没有读线程被阻塞在hevExclusive上，csReader只能被任一线程把持一会儿。图1给出了多个线程试图拥有读／写锁，以及SYNCHRO类中针对“多读或单写”同步对象的实现细节。但是创建入侵检测模型的工作量比别的方法要大，并且在系统实现时决策器如何有效地翻译攻击脚本也是个问题。当读／写请求比例加大时，一个“多读或单写”同步对象比一个Mutex同步对象性能好，因为它允许多个读请求同时进行。基于行为的检测与系统相对无关，通用性较强。
4　小结
　　当写一个多线程应用程序的时候，控制对全局变量和资源的访问是很必要的。像专家系统一样，特征分析也需要知道攻击行为的具体知识。
作者简介：阮耀平(1975～)，男，研究生，研究方向：信息安全
作者单位：中国科技大学研究生院信息安全国家实验室，北京　100039
参考文献
1 Denning D E. An Intrusion Detection Model. IEEE Transaction on Software Engineering, 1987, 2(2): 222-232
2 Tamaru A, Gilham F,Jagannathan R,et al A Real-Time Intrusion. Detection Expert System (IDES), SRI-CSL-92-05, 1992-04
3 Fox K L, Henning R R, Reed J H, et al.A Neural Network Appr- oach Towards Intrusion Detection. In Proceedings of the 13th Na- tional Computer Security Conference Washington. DC, 1990-10: 125-134
4 Garvey T G, Lunt T F. Model Based Intrusion Detection. In Pro- ceeding of the 14th National Computer Security Conference： 1991-10：372-385
5 Porras P, Kemmerer R. Penetration State Transition Analysis-A Rule Based Intrusion Detection Approach. In Proceedings of the Eight Annual Computer Security Applications Conference, 1992- 11:220-229
6 Kumar K, Spafford E. A Pattern Matching Model for Misuse Intrusion Detection.In Proceedings of the 17th National Computer Security Conference, 1994-10:11-12
收稿日期：1999-02-02
。
作者简介：刘　敏(1970～)，女，讲师，主要研究方向：并行处理、软件工程
作者单位：西北工业大学软件工程中心，西安　710072
参考文献
1 Didier B. Distributing Data and Control for Ray Racing in Parallel. IEEE CG&A, 1994, (7):69-77
2 Chuang Junghong. A New Space Subdivision for Ray Tracing CSG Solids. IEEE CG&A , 1995, (11):56-62
3 Scott W. Recent Developments in Parallel Rendering. IEEE CG& A, 1994,(7):21-22
收稿日期：1998-12-15
。当然，这不是绝对的，读者可以在实际应用中根据具体情况运用上述算法或其它的算法。
作者简介：冯美霞　主要从事计算机管理信息研究。
作者单位：东南大学工业发展与培训中心　江苏.南京(210018)
参考文献
［1］　李　霖.SGI IRIX系统中的多线程引用程序设计.软件世界,1995;(12)
［2］　(美)Charles Petzold. Windows 95程序设计.北京：清华大学出版社，1997
收稿日期:1999-01-21
