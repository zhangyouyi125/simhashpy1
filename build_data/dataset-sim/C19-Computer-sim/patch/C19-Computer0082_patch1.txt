计算机应用
Computer Applications
1999年 第19卷　第8期 Vol.19　No.8 1999



Delphi 3.0中的多线程编程技术
王　红　赵国红　
1　前言
　　Windows95是基于线程的多任务操作系统，它支持两种形式的多任务机制，一种是基于进程的，这也是Windows从一开始就支持的多任务类型。进程是指正在执行着的程序。根据工程经验，窑内温度与煤粉进量关系可近似简化为二阶慢性时滞环节，并且在回转窑连续运行中，煤粉逐渐沉积于窑衬上，致使对象特性参数具有慢时变性。
作者单位：刘向杰、周孝信：电力部电力科学研究院　北京　100085; 
　　　　　柴天佑：东北大学自动化中心　沈 阳　110006)
参考文献
1　 L A Zadeh. Fuzzy Sets in Information and Control, 1965,8:338～353
2　 E H Mamdani. Applications of Fuzzy Algorithms for Control of Simple Dynami c Plant, Proc. IEE, 1974,121:1585～1588
3　 K J Astrom, Thomas J. McAvoy Intelligent Control. J.Proc.Cont.1992,(3):115 ～127
4　 Procyk T J, Mamdani E H. A Linguistic Self-organizing Process Controller,A utomatica,1979,15(1):15～30
5　 Scharf E M, Mandic N J. The Application of a Fuzzy Controller to the Control of a Multi-degree Freedom Robot Arm. Industrial Application for Fuzzy Control M Sugeno(ed),North-Holland,1985
6　 Shao S. Fuzzy Self-organizing Controller and its Application for Dynamic Pr ocesses. Fuzzy Sets and Systems,1988,26:151～164
7　 Dalay S,K F Gill. A Design Study of a Self-organizing Fuzzy Logic Controlle r. Proc InstMech Engrs,1986,200(c1):59～69
8　 Z Q Wu et al. A Rule Self-regulating Fuzzy Controller. Fuzzy Sets and S ystems ,1992,47:13～21
9　 Chih-Hsun Chou, Hung-Ching Lu. A Heuristic Self-tuning Fuzzy Controller. Fuzzy Sets and Systems,1994,61:249～264
10　Rhee F V D, Vander Rhee F, Van Na Alemke H R et al. Knowledge Based Fuzz y Control of Systems. IEEE Trans Automatic Control,1990,35(2):148～1 55
11　Chen, T C Tsao. A Description of the Dynamical Behavior of Fuzzy Systems , IEEE,Trans. on Systems,Man,and Cybernetics,1989,19(4):745～755
12　鲍新福,都志杰,王芳君. 自调整比例因子控制器. 自动化学报,1987,13(2 ):129～133
13　毛宗源,狄净。控制过程开始启动基于知识的专家控制器(EC)，它根据自己知识库中的规则和事实执行推理，给出控制策略，并对系统进行控制，同时训练神经网络模糊控制器(NFC)使之通过观察和总结基于知识的任务，执行过程学习如何去完成同样的任务。模糊控制的突出特点在于:
　　(1)控制系统的设计不要求知道被控对象的精确数学模型,只需要提供现场操作人员的经验知识及操作数据。利用这种机制能编写出很高效的程序。
　　既然多个线程可以并发地执行于同一进程中，那么协调线程间的执行顺序，以避免对临界资源的使用而引起冲突就十分重要。
2　Delphi3.0中线程对象
　　在Windows95操作系统下，编写基于线程的程序可以利用应用程序接口函数（API），也可以使用Delphi3.0中线程对象（TThread对象）。 然而相比于传统的控制方法,应用于实时控制中的模糊控制到底有什么优势。线程对象（TThread)提供了许多特性和方法（成员函数），只要根据需要对这些函数和方法重写，就可以在程序中实现多线程机制。下面对TThread对象的方法和特性进行详述。 模糊自适应控制器的设计也同样遵循着以下两个目标功能(图1):

图1模糊自适应控制

　　(1)根据被控过程的运行状态给出合适的控制规则,即控制功能。当线程结束时，该特性决定是由VCL（可视构件）自动清除线程对象还是由你自己负责清除。当为True时，自动清除。默认值为False。研究领域为模糊控制及其在工业控制中的应用,近年来 在国际、国内发表学术论文二十余篇。
　　对表中的121个学习样本，为了尽量减少神经元个数并兼顾到允许的学习误差，本文采 用2-6-6-1四层结构的ANN，即输入层二个节点，中间两个隐层各6个节点，输出层一 个节点，见图3。网络的输入-输出映射关系为：
x(1)l=E, x(l)2=Ec　　　　　　　　　　　　　　(1)
x(2)j=f(Net(1)j)　　　　　　　　　　　　　　(2)
　　　　　　　　　　　　(3)
x(3)k=f(Net(2)k)　　　　　　　　　　　　　　　(4)
　　　　　　　　　　　　(5)
u*=f(Net(3)l)　　　　　　　　　　　　　　(6)
　　　　　　　　　　(7)
其中W(l)表示L-1层到L层之间的连接权值，x(l)i表示第L层到第i个神经元 的输出， θ(l)j表示第L层第j个节点的阀值，L=1，2，3，f(z)=1／{1+e-z ）。
　　Suspended特性：布尔型，用于决定线程是否挂起，当值为True时，挂起线程。
　　Teuminated特性：布尔型，且是受保护的(Protected)，只读。该特性决定线程是否停止执行，如该特性值为True时，线程执行结束。
　　Thread ID特性：线程标识符，有的API线程函数使用该标识。
2.2　线程对象的方法
　　线程对象的方法有很多，介绍常用的几种方法如下：
　　Do Teiminate方法　该过程只能由线程对象内部方法调用，用于与主VCL线程的同步，并产生Onteiminate的事件，一般说来，当线程终止时，线程会自动调用该方法，不需要写代码。
　　Execute过程　该方法开始一个线程的执行，你必须在线程类中，重写该过程，Execute方法返回时，终止线程的执行、释放线程所占资源，并调用Onteinate事件过程。Execute方法必须周期性地检测Teiminate特性，该特性一旦为True，Execute必须立即返回。
　　Resume过程　该方法恢复一个被挂起的线程的执行。
　　Suspend过程　该方法挂起一个线程的执行，它和Rosume方法是配对的。
　　Synchronize过程　在Delphi3.0的多线程编程中，各种VCL构件都是临界资源，只能由主线程使用，其它的线程要使用这些VCL构件，必须使用Synchronize方法，避免多线程与VCL构件的冲突，该过程带一个TThreadMethod类型的参数。
　　Teiminate过程　该方法设置Teiminated特性为True，并终止你的线程的执行。
　　WaitFor函数　该方法等待线程执行的终止，然后返回ReturnValue特性的值，因此，在调用该函数后，必须确保线程的退出。
2　实时专家智能协调模糊神经控制系统
2.1　实时专家智能协调模糊神经控制系统总体结构设计
　　本文提出的多级实时智能控制系统共分三级。
　　Onterminate过程　该过程是Onterminate事件的驱动程序。Onterminate事件发生在线程的Execute方法已经返回，TThread结束线程之前，该事件驱动只可在主线程使用，可以调用各种VCL方法和特性。
3　创建Delphi3.0中的线程对象
　　Delphi3.0环境中，线程对象是始视对象Tobject的直接派生类，它和其它的Delphi3.0构件和对象不同，不能在程序中直接使用，而必须从TThread对象中产生一个派生类，并对其中的某些成员函数进行重写以覆盖（Override）TThread对象中的方法，完成自己的功能。在Delphi3.0中可以直接书写代码创造自己的线程类，也可能和Delphi3.0的线程生成器来创建原始的公用代码，而后再在此基础上修改。
4　线程的启动、终止和优先级
　　线程的启动和终止是线程生命周期中的起点和末点，在线程的生命周期内还有它的各种状态，例如挂起和恢复。
4.1　线程的启动
　　这分为两种情况，其一，线程一旦被创建，它就开始执行。其二，线程被创建后，处于挂起状态，而不被立即执行，要想执行，必须调用线程的Resume方法。至于为什么会挂起，与它的构造函数有关。
4.2　线程的终止
　　线程的终止分为以下几种情况：一为自然终止，即线程执行完后动结束线程；其二为强制终止，即在线程正在执行时，我们强制调用线程的Terminate过程；其三为在执行线程中发生了Ethread例外从而引起线程的终止。在线程的Execute方法返回之后，但在线程结束之前，它调用线程的Onteiminate过程。 
4.3　线程的挂起和恢复
　　在线程的执行当中，我们可以通过调用Suspend方法或设置Suspended特性为True而暂停线程的执行，节约的CPU时间以加其它线程的执行，当我们调用线程的Resume方法时，它又恢复线程的执行。
4.4　线程的优先级
　　每一个线程都与一个优先级相连，线程的优先级用于确定线程对CPU时间的划分，线程的优先级用线程的Priority特性来设置。
　　在Delphi3.0中ThreadPriority枚举类型定义了优先级所有可能的值。
　　tpIdle：这是线程的最低优先级，只有当系统闲置时，该优先级的线程才被执行。
　　tpLowest：该优先级比正常优先级（tpNormal）低2个点。
　　tpNormal：正常优先级。电网技术。
　　tpHighest：该优先级比正常优先级高2个点。
　　tpTimeCritical：线程的最高优先级。并 进行了大量研究工作。
作者单位：王　红　潍坊高等专科学校计算机系　山东．潍坊(261041)
　　　　　赵国红　山东省水利厅南办　山东．济南(250013)
　　收稿日期:1999-02-02
