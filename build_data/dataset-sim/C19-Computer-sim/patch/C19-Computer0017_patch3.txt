计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



用OpenGL开发虚拟制造环境（一）
周杰韩　杜润生　吴波
　　摘　要　本文介绍了几何图形信息的数据结构、存储与显示基本原理。从应用程序角度论述Windows图形设备接口GDI的客户服务器本质及虚屏幕显示技术。最后讲述OpenGL图形库在虚拟制造仿真的应用基础。
　　鉴于系统的工作特点决定采用Windows Sockets的客户/服务器模式来实现网络通信。线段是所有在它上面的点的集合。几何学上的点是没有大小的。
2　结束语
　　这种方法实现的通信线程具有编程简单、运行可靠等优点，基本能满足设计需要，并能较好地满足通用性要求。此时的点不再是真正的几何点，而是像素（图像基本元素）。每个像素是显示屏上可以编址的最小单元，也是在显示屏上能够被控制的最小部分。
1.1 集中式体系结构
　　集中式体系结构(图1)是最常用的方式，它只有唯一的网络管理器负责整个网络的管理。每个像素对应数组的一个元素。但是它与分布式体系结构不同的是：每一个域的管理器仅仅负责本域的管理，对其它域的情况一无所知；即域管理之间是不能通信的。
　　CConnectedSocket类对象用于代理已建立连接的通信任务。设定显示屏上每一像素的亮度可以产生一幅图像。这种体系结构的最大优点是其规模的可扩充性(scaleability)。一个分辨率较高的显示设备若在x和y方向各有1000个像素，则这个显示屏将含有100万个像素。为了显示每一点的亮暗，每一像素至少需要1比特的亮度信息，其存储空间至少需要100万/8个字节。用来存储像素亮度数组的存储器称为帧缓冲器。帧缓冲器是指显视卡上的显视存储器。
1.3　几何图形信息的显示
　　光栅显示是用得较多的图形显示方法。光栅显示是利用扫描发生器每秒钟扫描帧缓冲器30到60次，将代表像素亮度的信息一行一行取出，然后送往显示器。即：域管理之间是不能相互通信的。帧缓冲器的内容用来输出视屏信号控制阴极射线管电子束强度。
1.3 CComThread类的主要数据成员
　　CListeningSocket类对象指针为m_pListeningSocket，当通信线程作为服务器时令其侦听网络连接请求；指针链表m_ConnectedSocketList用于保存已建立连接的CConnectedSocket对象指针，通信线程根据此链表查找特定的通信连接来发送数据。帧缓冲器地址用来输出水平与垂直偏转信号控制阴极射线管电子束的偏转。电子束的偏转决定像素的屏幕坐标（x，y）。每一次扫描帧缓冲器都使屏幕得到刷新。每个MOM可以管理多个管理器，每个管理器负责一个域。
1.4　显示设备驱动程序与应用程序的可移植性
　　应用中，应用程序编写的几何图形信息不是直接改变帧缓冲器的内容而是作为标准显示指令存入显示文件中，然后利用显示设备驱动程序解释显示指令以产生需要的图象。显示文件驱动程序形成图形应用程序与显示设备之间的接口。其数据成员以消息名标识，而具体的数据消息类需要有自己要传输的数据成员。显示设备与显示驱动程序通常由硬件商一起提供。
1.5　应用程序图形显示步骤
　　帧缓冲器数组直接与显示屏内容相对应，并且以亮度编码的形式保存了被显示的图形。图形应用程序的实现步骤包括：首先由初始化程序分配显示设备和存储器。其次应用程序把图形信息写入帧缓冲器，由帧缓冲器直接传送到显示设备。
2　结束语
　　这种方法实现的通信线程具有编程简单、运行可靠等优点，基本能满足设计需要，并能较好地满足通用性要求。最后由结束图形程序释放显示设备包括重新分配存储器。该类重载基类的OnAccept( )通知函数，即在有网络连接请求时通知通信线程。然而在Windows环境下避免了这种状况。首先在多任务Windows环境下物理视屏是一个共享资源。所有应用程序的显示活动，都必须通过Windows API函数来操作。这种方法结合了两个体系结构的特点和优点，保留了网络规模的可扩展性，对于分散性、不规范的网络环境具有更好的功能和适应性。表1列出了常用的域的划分原则。应用程序请求写文本或图形的操作，都是将信息写到虚拟屏幕也称为设备环境DC。最后Windows把虚拟屏幕映像到物理显示屏上。
2.2　图形用户接口（GDI）的客户/服务器本质
　　Windows将应用程序从具体输出设备中分离出来。在MS-DOS中，应用程序负责为所有输出设备编程。
1.4 网络式体系结构
　　第四种体系结构将分布式体系结构和分层式体系结构的特点结合(图5)。
　　综上所述，系统/网络管理系统体系结构的设计应基于两个构造原则：
　　准则1：采用分布式/分层式网络体系结构；
　　准则2：使用域作为组织单元。对于添加的新硬件，由硬件制造商提供驱动程序，而应用程序则通过GDI创建并维护设备环境（DC）。Win32应用程序在Windows95环境下都被分隔成了用户模式与核心模式。在用户模式下禁止直接取用图形设备资源，而是交给操作系统核心模式来完成。这种模式称为GDI的客户/服务器模式如图2。
　　CConnectedSocket类对象用于代理已建立连接的通信任务。这种模型的最大缺点是：随着网络规模和复杂性增加，网络能力和效率降低。

图2
3　OpenGL应用程序的图形支持
3.1　OpenGL图形软件在应用中的地位
　　OpenGL是SGI公司的IRIS GL图形工作站的分支。近年来，作为工业标准图形程序库，在CAD/CAM等需要高级的三维对象可视化和图形绘制领域得到广泛应用。其方法为序列化函数，用于序列化消息名标识；而具体的数据消息类需要重载序列化函数，并在其中调用基类的序列化函数以及序列化其它需要传输的数据成员。MMOM可以管理多个管理器和多个MOM, MOM又可以进一步管理下层的各管理器，每个管理器负责一个域的管理。OpenGL在图形应用中的地位如图3所示。由于OpenGL本身与硬件及操作系统的底层软件无关，从而使图形应用程序获得较高的可移植性。

图3
3.2　OpenGL客户/服务器图形显示方式
　　OpenGL通过客户/服务器方式实现图形显示。应用程序作为客户工作并调用OpenGL API。OpenGL客户模块同OpenGL服务模块通信并发出应用程序的OpenGL命令。OpenGL服务模块调用Win32设备驱动接口来使用驱动程序。一个OpenGL服务程序往往同时维护几个OpenGL环境。其方法为序列化函数，用于序列化消息名标识；而具体的数据消息类需要重载序列化函数，并在其中调用基类的序列化函数以及序列化其它需要传输的数据成员。=NULL；)
　　{
　　CConnectedSocket* pSocket 
　　　=( CConnectedSocket*) m_ConnectedSocketList. GetNext( pos )；
　　if( pSocket -> m_PipeID = = nPipeID )
　　{
　　　CMsgHead MsgHead( pMsg -> m_MsgName )；
　　　MsgHead.Serialize(*( pSocket -> m_pArchiveOut ) )；
　　　pMsg -> Serialize(*( pSocket -> m_pArchiveOut ) )；
　　　pSocket -> m_pArchiveOut -> Flush( )；
　　　pos = NULL;
　　}
　}
}
　　ProcessPendingRead( )接收数据方法：当连接套接字链表中的某一套接字有数据等待接收时，调用此方法。所有的OpenGL调用都通过着色环境来完成。OpenGL着色环境与设备环境有相同的像素格式。其方法为序列化函数，用于序列化消息名标识；而具体的数据消息类需要重载序列化函数，并在其中调用基类的序列化函数以及序列化其它需要传输的数据成员。该方法先调用：
　　MsgHead.Serialize(*(pSocket->m_pArchiveIn))；
　　读入消息头，并根据消息头中消息名构造消息类对象，再调用：m_pMsg->Serialize(*(pSocket->m_pArchiveIn))；
　　读出消息对象，最后通过调用：
　　pSocket->m_pWnd->PostMessage(MM_RECEIVE_MSG,(long)MsgName,(long)m_pMsg);
通知数据传输目的窗口接收数据。

图1　集中式体系结构
　　集中式体系结构的一种变化类型是平台方法(platform approach)(图2)。

图4
　　用OpenGL去着色一个Windows窗口的典型操作过程如下：
　　. 建立正确的窗口格式；
　　. 建立像素格式；
　　. 创建设备环境；
　　. 创建一个着色环境；
　　. 将着色环境设为一个线程的当前着色环境；
　　. 线程进行有关OpenGL的初始化；
　　. 线程调用OpenGL着色函数；
　　. 当OpenGL处理结束后，将着色环境设为非当前使用的（断开与着色环境的联系）；
　　. 释放着色环境与设备环境。 
注：国家教委博士点基金资助。这种体系结构也引入了管理器、域和"管理器的管理器"(高级管理器)概念。研究方向:虚拟制造、系统仿真、面向对象技术。
作者单位：华中理工大学机械科学与工程学院　湖北.武汉(430074)
收稿日期:1999-01-27(修改稿)
