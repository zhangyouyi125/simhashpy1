宇航学报 
JOURNAL OF ASTRONAUTICS
1998年 第19卷 第1期 No1 Vol.9 1998科技期刊

　从计算机系统角度分析软件可靠性
饶　岚
(清华大学计算机系设计自动化教研组*北京*100084)
王占林　李沛琼　姚一平
(北京航空航天大学*北京*100083)
　　摘　要　从硬/软件综合的角度对计算机进行可靠性研究具有非常重要的意义。本文作者对硬、软件相互作用进行了明确的划分和定义。并指出,是现行的软件可靠性黑箱分析方法禁锢了人们从更深层次对于硬/软件系统可靠性进行研究。基于上述认识,本文提出了解决软件分解单元之间耦合问题的办法。
　　首先,方程组(1)的非线性很强。文中分析了一个飞行控制系统实例。
　　主题词　软件系统可靠性　硬/软件相关性　阶段任务性　建模
NALYZING SOFTWARE RELIABILITY FROM THE 
POINT VIEW OF COMPUTER SYSTEM
ao Lan
(Tsinghua University*Beijing*100084)
Wang Zhanlin　Li Peiqiong　Yao Yiping
(Beijing University of Aeronautics & Astronautics*Beijing*100083)
　　Abstract　It is significant to perform reliability analysis of computer systems from the point view of integrated hardware and software.In this paper,interplay types of hardware and software are patitioned and defined explicitly.It is also pointed that it is the current software reliability analysis methods that restrains deeply study of hardware/software reliability.Based on cognition above,a methodology to solve coupling in decomposed units of software in reliability analysis is presented firstly,then a new methodology to analyze software reliability is presented.It enables considerating the complex interplay in hardware and software,and then assessing computer systems more accurately.A real Flying-By-Wire system is analyzed using the method.
　　Key words　Software system reliability　Hardware/Software interplay　Phased-mission　Modeling
1　引　言
　　计算机系统具有极强的实时性和动态性,且大多用在可靠性要求极高的、具有重大经济价值的、甚至性命攸关的地方。因此对其进行准确地可靠性评估和预计具有非常重要的意义。
　　国际上对硬/软件系统可靠性的研究已进行十多年,大都是将硬件部分和软件部分当做一般的两个硬件部件串联处理的水平,对于在硬、软件之间存在的各种复杂关系仅有片面的论及［9］,［12］考虑了在软件故障计数阶段硬件的冗余和软件的多元件情况,但它并没有对软件可靠性建模方法提出根本的解决办法。90年美国空间合作机构举办的关于计算机系统可靠性建模评估的Workshop［7］上指出,开发“更复杂的分析硬、软件之间,系统运行与可靠性之间的相关关系的建模技术”是当前的“major need”。Schneidewind基于此,假设在不太长的时间区间内,dλ(t)/dt=-βλ(t),其解为λ(t)=αe-βt。第三部分提出了基于软件工程的软件可靠性系统化分析方法。通过对一个FBW系统实例的分析,证明了它将运行剖面结合在模型中的能力及实用性。文章最后对本方法进行了讨论。
2　通过对硬、软件之间相互作用的分析看现有模型的不足
2.1　硬件与软件的相互作用
　　为了更好地描述硬件与软件的相互作用,笔者归纳其间存在四种相互作用类型:功能相关型,运行相关型,故障相关型以及维修相关型。
　　硬/软件系统的相关性从设计初期就表现出来了。硬、软件的功能分配是在系统需求分配阶段进行的。首先,它们之间是相互依存的,但现今硬、软件各自所能完成的功能又是互相渗透的。因此系统功能分配不仅必须将功能完整地分配给硬、软件,且必须严格区分它们之间的功能界限。同时也必须协调好它们之间的各种匹配关系。这些特点组成了硬、软件之间的功能相关性。
　　例2　我们采用装甲兵工程学院的某软件测试例子(只取前16个数据)。但这与要求软件设计完善一样不现实。因此,应当承认第三类错误的存在,并将它放在与硬件错误和软件错误等同的地位上。
表3　错误统计数据(时间单位:秒)

序 号间 隔 时 间累 计 时 间序 号间 隔 时 间累 计 时 间
11193389
21210190
3131130120
4581222142
54121313155
624361422177
76421577254
81456167261

表4　评估结果

初始故障率α0.14065864
影响故障率比例常数β0.00899166
参数精度(方程组残量的欧氏范数)0.00008883
当前故障率(t=250)0.01345717
平均故障前时间(MTBF)74.30983110
下一故障可能时间335.30983110



图1　故障率图


图2　故障率图
评估的结果表明,该软件系统的平均故障前时间(MTBF)约为74秒,即软件离正式交付尚有一定距离,仍需进一步的测试。具体表现为对它的改正是对硬、软件需求说明书的修正;而硬件在设计制造时对设计需求说明书的违背称作硬件错误;软件在设计编制时对软件设计需求说明书的违背称作软件错误。接口错误导致故障的例子有:系统功能分配不完全,硬、软件的时序匹配协议问题等。
　　硬、软件的运行状态也是相互依存、相互影响的,体现了它们之间的运行相关性。
　　另外,有时一个故障可以引发多重故障;有时有的故障会使系统的其它故障趋势发生变化;硬件在软件工作或不工作时都可能发生故障,而软件的工作和故障活动会因硬件的故障而时时中断。这些体现了硬、软件之间的故障相关性。
　　维修一个故障常会产生新错误,也会使某些故障的发生概率改变,同样,它不仅可能发生在硬件或软件内部,也会在它们之间发生。如此等等,体现了它们之间的维修相关性。
2.2　现有计算机系统可靠性建模方法分析
　　一般地,计算机系统可靠性模型可以分成三大类:
　　一是时序逻辑模型,即黑箱模型。它的根据是系统的工作-故障-维修行为的随机特性可以按照某一随机规律建立一定的时序函数关系。现在实用的软件可靠性模型,硬件部件可靠性模型和硬件可靠性增长模型都属于这类模型。现在实用的硬/软件系统可靠性模型则是上述的一个软件黑箱与一个硬件黑箱按某种方式组合建立起来的。
　　二是组合逻辑模型。它认为系统状态是系统组成部件状态的逻辑组合。硬件系统模型大都采用这类模型描述。
　　黑箱模型和组合模型都有各自的优势和不足。黑箱模型能考虑系统状态随时间变化的特性,能提供系统未来的可靠性发展信息和未来状态的可靠性水平,为系统改进、可靠性增长管理和用户决策提供依据。但它对大型复杂的难以用常用随机分布处理的系统乏术,且不能反映系统在不同时间段,不同任务中的结构变化;组合逻辑模型能体现系统的组成部分在实现系统功能中对可靠性的不同影响,但它无法描述系统的动态过程对可靠性的影响。
　　上述方法对于象计算机系统这样的强动态、强实时性的系统来说,显然是不够用的。现在在分析硬件系统可靠性方面出现了第三类方法:即时序、组合逻辑建模方法。70年代兴起的任务阶段性(phased-mission)可靠性建模方法［1-3］就是这方面的一种尝试。它可以考虑硬件部件在实现系统功能时出现的硬件可靠性组成结构在不同的任务阶段会发生变化的事实。错误统计数据见表3,评估结果见表4,故障率图见图2。这样就禁锢了人们从更深的层次对于硬/软件系统性的认识。而没有正确的认识自然难以得到正确的结论。因此从根本上改变现有的计算机系统可靠性分析方法势在必行。
3　软件的系统化可靠性分析
　　通过对大量资料的研究,可以发现目前绝大多数软件可靠性模型都是黑箱模型,仅有的几个例外中,有Shooman的运行路径频率模型［4］,Littlewood的模块动态过程马氏模型和考虑模块执行时间变化的半马氏模型［5］和Cheung的类似假设模块马氏链模型［6］等。但它们并不能直接应用于实际软件系统,因为:
　　①它们没有考虑软件系统各模块之间的耦合;
　　②软件模型的状态空间往往很大,难以处理。
　　本部分基于软件工程对软件分解建模,从而为软件阶段性任务可靠性建模铺平了道路。
3.1　概念与定义
　　软件的结构化模块化设计为直观上对其进行分解提供了方便。程序控制结构本身可以提供软件分解单元,程序路径和系统成功之间的逻辑关系。［8］给出了软件可能的六个分解等级。
　　软件错误的分类方法很多［11］。许多错误可以在不同的分解单元之间存在,所以象以前的微观模型那样只考虑分解单元的错误是不够的。为了克服上述问题,本文采取了一个重要步骤,即将软件故障分成分别是由两类错误导致的:各分解单元的内部错误,其影响只限于本单元内部;以及系统级错误。系统级错误是指除前一类错误外的所有错误,例如,需求不完善,数据结构错误,控制逻辑错误等。对其分别处理,在处理分解单元内部错误导致的故障时,单元间的耦合就能绕开。而且因为这种分类对分解层次无任何限制,从理论上说任何分解层次均适用,且软件分解单元之间可以有公共部分,这一点与其他分解建模方法不同。以后可以看到这个结论是非常重要的。
3.2　基本软件可靠性模型
　　因软件错误导致的软件系统故障只有在软件执行时才会发生,因而软件分解单元不同的执行频率造成了其对系统可靠性影响的不同。不同的软件结构在控制流图上的表现实质上都可以用控制流传递时间分布的不同来代表。至此可以提出以下有根据的假设:
　　1)待分析的软件是基于GJB437-88的要求编制的,即软件采用五种基本语句结构编制,每个程序分解单元只有一个入口和一个出口;
　　2)软件故障分为软件分解单元内部错误导致的故障和系统级错误导致的故障两类;
　　3)每个分解单元的故障均导致软件失效,软件的失效状态是吸收状态;
　　4)沿用许多软件黑箱模型的类似假设,即软件单元的故障与其内部残留错误数有关。对于不可修系统,软件单元在每一次运行时的固有故障率是不变的;
　　5)对于特定的使用环境,单元执行频率Pij总是得到的;
　　6)内因故障过程与系统级原因故障过程是相互独立的过程。
　　将每个分解单元的工作状态作为一个状态,并定义F为系统的失效状态,则系统的故障过程可以被分成两个共生的子过程,分别对应内因错误故障过程和系统级错误故障过程。
3.2.1　内因错误失效过程子系统的可靠性
　　令Fi(t)为第i单元的故障时间分布函数,F(t)=［…Fi(t)…］T;
　　Pij(t)为控制流独立地从第i单元向第j单元传递的时间分布函数;
　　Qij(t)为第i单元成功地执行并将控制流传给第j单元的关节转移概率,Q={Qij(t)};
　　Gij(t)为控制流成功地从第i单元传递到第j单元的一步转移时间的累积分布函数。
　　注意,以上所说的成功只指无内因错误导致的失效。那么

(1)
则Gij(t)的更新方程为

(2)
*指卷积。这里当j=k时,Gkj(t)=1,则

(3)

(4)
　　　…

(5)
这里ki,…,kn-1为中间转移状态,令G(n)(t)为矩阵{Gik(t)}的n重卷积,Q(t)={Qij(t)},则

(6)
　　　　　n个
这里B(i)为所有的i步转移的中间状态空间,并假定系统连续工作,则子系统内因错误失效过程的任务可靠性R(1)(t)即为从对应该任务的初始状态i到成功地结束工作的状态j(j可以是一个集合C)的所有可能的转移步骤的概率之和(Sij为S的第i行第j列元素)。令

(7)
则

(8)
3.2.2　系统可靠性
　　从对软件系统故障过程的统计分析,可以获取系统级错误失效过程子系统的可靠性R(2)(t),方法与黑箱法一样,也可以作为一个随机过程来分析。因为以上的两个失效过程是共生并相互独立的两个过程。则系统可靠性为
R(t)=R(1)(t)*R(2)(t)
(9)
3.3　实例分析
　　实例系统是为某型飞机按软件工程规范所设计的软件产品,将安装于一四余度数字电传飞行控制系统中,完成飞行控制和余度管理任务。系统实时任务周期是12.5毫秒。尽管软件是单套无冗余系统,但是由于硬件系统可以处于不同的故障降阶等级,对应的余度管理部分的软件原理各不相同,投入运行的软件部分就不尽相同。但在获取故障数据即在测试过程中,并没有区分几种余度管理部分软件运行机会的不同。如果用黑箱化可靠度模型,将不同软件部分的运行概率等同看待,显然是不合实际的。实践也证明了黑箱化可靠度模型分析结果过于保守。
3.3.1　软件分解及系统状态转移图
　　该系统包括许多功能块。将系统按设计模块来划分很麻烦,本文提出的方法也不需要这样做。从系统功能描述中可以看出,导致软件运行剖面相对于测试剖面产生变化的原因主要是硬件部件余度降阶,使得运行的相应的余度管理软件部分地发生改变。这里我们仅作示意性分析。假定硬件系统是全系统冗余,单故障工作,建立如图1的系统运行流程图。由于余度管理周期12.5ms远小于系统故障间隔时间,因而图1可以简化为图2的形式。
　　证明　因为p(1)＞0,p(+∞)=-∞,所以p(x)在(1,+∞)上必有一根。图中,A4为四余度管理及飞行控制部分软件子系统工作状态,其中不包括在一次硬件降阶以后投入运行的软件部分;A3为三余度管理及飞行控制部分软件子系统工作状态,它不包括二、三次硬件降阶后投入运行的软件部分,还有专门用于四余度管理的部分;但这几个子系统并不互相独立。


图1　系统运行流程图


图2　简化的系统运行流程图


图3　系统状态转移图
3.3.2　系统可靠性评估
　　(1)故障记录
　　有关该系统的数据是某型飞机在某个硬、软件综合测试阶段的数据。
　　由定理2可知,软件故障率不增的条件为:

　　依据上述模型参数解结构的分析结果,我们可以方便地构造出参数估计的数值求解算法。故障记录中包括每个故障的故障原因,据此可以确定每个故障属于那一个软件子系统。对表1进行处理,得到各子系统的故障数据记录:表2,表3和表4。
　　求解非线性方程组效率最高的方法当然是针对方程组的具体特点构造针对性的数值算法。实际中该软件在继续进行的测试中下一个错误的发现时间为300秒,与评估预计的335秒相差35秒,所以修改的Schneidewind模型对此软件系统基本适用。
　　根据图3,系统的运行工作状态有两个:A4和A3。那么从对应该任务的初始状态A4到成功地结束工作的状态C的所有可能的转移是A4=C和A4→A3=C。显然此系统是一个马氏系统,可以用马氏过程理论求得当系统飞行时间为1小时时,系统与内、外因有关的可靠度R(1)(1),R(2)(1)和系统可靠度R(1)为
R(1)=R(1)(1)*R(2)(1)=0.9970*0.9990=0.9959
而用黑箱方法得到系统的Duane模型可靠度结果是
R(1)=exp(-λ*1)=0.9954


图4　系统任务可靠度曲线
　　画出系统可靠度曲线如图4所示。其中,曲线1为本文方法的计算结果,曲线2为黑箱模型的结果。这个例子说明,本文提出的方法在一定程度上可以识别运行环境与测试环境的不同。而黑箱方法则无法做到。由于考虑了软件各部分在不同的环境中对系统可靠性的不同贡献,软件可靠度分析结果更加准确。窥一斑可见全豹,如果对系统认识更全面,则分析结果就会更准确。
4　结　论
　　本文首次对硬、软件在组成计算机系统中的相互作用关系进行了明确的划分和定义。
　　本文提出的软件分解方法,可以绕开分解单元之间的耦合,而且保证了软件分解可以在任意水平进行。本文提出的软件可靠性建模方法是一种在软件可靠性建模中将测试剖面与使用剖面统一起来的方法。软件系统化的可靠性分析方法为硬/软件的可靠性分析中考虑相关作用提供了可能。它适用于对现代大规模的,具有任务阶段性,容错性,并行性以及任务多样性等性质的,难以被黑箱化可靠性模型描述的,按照软件工程规范编制的软件在确认、测试阶段进行任务(运行)可靠度评估和对使用阶段进行任务(运行)可靠度评估计和预计。
　　本方法的分析结果与对系统的认识程度有关,与环境也是密切相关的。在对实际系统建模分析时,应根据不同的实际情况有选择地综合考虑各种主要因素。这种假设虽然在某些情况下具有一定的代表性,但在许多情况下却是不符合客观实际的