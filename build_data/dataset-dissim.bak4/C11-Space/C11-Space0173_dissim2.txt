宇 航 学 报
JOURNAL OF ASTRONAUTICS
1998年  第3期   No.3 May   1998
科技期刊
反编译在航天工业中的应用*

赵　蕾　吴　岩　王开铸
(哈尔滨工业大学计算机系319信箱*哈尔滨*150001)
　　摘　要　本文论述了反编译作为一种程序验证的工具在航天工业中的重要地位和应用;介绍了反编译的背景知识;给出一个实用的反编译系统DCPL的设计模型和关键技术及其一个运行结果示例以说明反编译器的功能。
　　主题词　反编译　软件工具　程序验证　程序可靠性
APPLICATION OF DECOMPILATION 
TO AEROSPACE INDUSTRY

Zhao Lei　Wu Yan　Wang Kaizhu
(Department of Computer Science and Engineering 
BOX 319,Harbin Institute of Technology*Harbin*150001)
　　Abstract　In this paper,the significance and application of decompilation as a program verifying tool in Aerospace Industry is discussed;the background knowledge of decompilation is introduced;a model of a practical decompiler DCPL is presented as well its result to show its function.
　　Key words　Decompilation　Software tool　Program verification　Program reliability
1　引　言
　　航天工业是各国竞相发展的一项事业。航天器的各部分都离不开计算机的控制,各种控制软件、计算软件、分析软件等等在航天器的设计与应用中起着重要地位。
　　1996年6月4日阿里亚娜-5型火箭发射失事,使欧共体蒙受25亿美元以上的损失。经过专家调查,此次失事的主要原因是:箭载计算机系统使用的软件出了问题。此软件是从阿里亚娜-4型火箭的软件系统中移植过来的,由于5型火箭上增加了新机构,而4型火箭的软件不能对这些新机构发出的信号进行分析和处理,从而导致火箭控制失灵。由于阿里亚娜-5型火箭发射的失事,使软件可靠性和正确性问题再度摆到软件开发者面前［1］。反编译器作为一种有效的程序验证的工具使人们再度意识到它在航天工业中的重要性及实用性。
　　对图7进行分析,虽然在线学习进行了2000步,但对象跟踪结果较单一频率信号情况要差很多,说明复合频率信号在线学习是比较复杂的,需要花费数倍的学习训练时间。它使用闭环系统的反馈误差量调整神经网络权值,目标是极小化反馈误差,从而在线辩识对象逆动态模型,实现高精度的位置控制。
　　确定型反编译的模型为一个映射,decompile:S―＞T,其中S是源代码集(source),是机器指令集;T是目标代码集(target),是高级语句集。
2.2　反编译的产生背景
　　反编译(Decompilation)一词第一次出现于1960年。六十年代,随着第三代计算机的产生,为了挽救大量的运行在即将报废的第二代计算机上的软年,同时也为加速开发第三代机器的软件,美国开始研制专门用途的反编译器作为软件移植的工具。
2.3　反编译在航天技术中的应用
　　反编译发展至今,其应用领域主要体现在软件维护和软件安全性［2］两方面。用于软件维护时,主要是恢复丢失的源代码、将软件移植到新的硬件平台、重新结构化旧有软件等等。用于软件安全性时,主要是针对安全性要求极高(safty-critical)的软件,发现其中是否有病毒,或是否有隐藏的窃密程序(Trojan)。
　　西方各国早已将反编译技术用于航天事业和尖端工业,如:IBM为NASA的航天飞机研制的反编译器［3］;澳大利亚电子研究实验室研制的针对类Pascal语言的反编译器［4］;欧共体ESPRIT计划中的反编译研究,如英国的核工业部使用反编译技术验证大量的safty-critical软件,以提高软件的正确性［5］;我国从80年代初开始反编译的研究并且已逐步形成自己的产品［6］,但尚未见将反编译技术应用于航天技术的报导。
　　用于航天的软件系统通常不经过编译优化以避免不必要的软件错误,反编译此类软件的难度相对减小。可以通过将内存映象的反编译结果与原始输入(源程序)相比较来验证软件的正确性,如果二程序完全等价,则编译结果可靠(反编译可靠的前提下)。如下图示:


图1　反编译验证程序正确性
如果对于每一种输入,都有输出1=输出2=预测结果,则可说明编译是可靠的。由于近似模型比较粗糙,不能如实反映摩擦力矩的真实情况,当摩擦力矩处于过零和零附近的过渡过程状态时,难以获得有效结果。其次,当被控对象非线性严重,特别是当一部分非线性模型参数未知时,要满足高精度、高频响等性能,常规的控制算法受到一定的局限。
3.1　DCPL体系结构
　　下图给出了DCPL的模型。
　　证明:令x1=θ,x2=
则,式(4)的状态方程描述为

即有　　　　　　　a(Σ)=2=n
由引理1可推出系统式(4)可逆。


图2　DCPL体系结构
3.2　DCPL各模块的功能
　　(1)预处理器:是DCPL的基础,以可执行文件作为输入,将其部分反汇编,根据程序的启动代码,提取出相应的数据段和代码段,存储在中间文件中。
　　(2)库函数识别器:是对中间文件的一遍扫描。根据库函数特征表识别出文件中所有库函数和用户自定义函数的入口。采用顺序-索引-连接技术构造特征表。索引函数的形式为:index(len,n)=w1*len+w2*n;其中len和n分别为函数主体的长度和它所调用辅函数的次数。需要指出的是使用“跟踪-微分器”获取加速度信号,可以离线进行,也可以在线递推实现,因而是一种较好的获取加速度方法。
　　(3)控制流分析器:根据反编译控制流文法,以语法制导的方法进行控制流的分析和归约,生成控制流模块的机内表示形式及其结构文件。采用约束属性文法描述控制流,如<for>∷=jmp{statement}m0{cmp}<jop>
｜jmp.destination=cmp.offset&&jop.destination=statement.offset｜之后的是该规则的约束。试验以红外目标背景模拟装置中的光学随动系统为对象,采用对比方法,对引入扰动补偿前后的误差进行比较。
　　(4)数据流分析器:根据库函数识别器提供的库函数参数信息和函数返回值信息、控制流分析器得到的基本块划分信息进行变量恢复。具体实现时分两步走:<1>变量定值-应用信息的收集和综合
　　为每个变量构造定值-应用链。其模型是双向链表,如下图所示:


图3　定值-应用链的一个结点模型
定值-应用链是记录变量定义和使用信息的数据结构,其define指针指向定义它的语句,use指针指向在它被重定义之前所有使用它的语句(即该变量出现在赋值语句右边的情况)。定值-应用链可以推理相关联的简单类型变量的类型(字符型、整型等)。
　　<2>变量类型的推理分析
　　把变量放在上下文中,利用推理规则进行再求精。求精过程利用了汉语处理中的分词思想。将同时出现次数超过阈值的一组内存单元和寄存器绑在一起,形成一个token(一个复杂的数据类型),阈值可根据结果进行调整。这是一个反馈过程,用于恢复复合数据类型(数组、结构等),规则型如:call a［］-＞initiate array;exist(loop,index si,base bx)-＞assign array;(add ax,adc dx)-＞addition long等等。由于分别逼近较为简单的非线性函数,网络权值训练容易收敛。
　　(5)优化器:将前几个模块生成的结果进行综合分析,去除冗余变量和中间语句,如中间变量和指令,进行语句的合并和流程的结构化。
　　(6)翻译器:将前述模块生成的机内表示形式翻译成C语言程序形式,输出给用户,完成反编译的任务。


图3　反馈误差学习控制结构
其由神经网络逆动态前馈控制器,控制对象,及常规反馈控制器组成。
　　　　测试用C语言程序:
　main()
　　{ int a,b,c;
　　　scanf(″%d″,&a);
　　　if(a＞=0)
　　　{ if(a＞20)
　　　　　　　　{b=a;
　　c=b+2;}
　　　　else
　　　　　c=a;　　}
　　　else
　　　{ c=a;
　　b=c*a;}
　　　printf(″%d″,c); }
　　
　　DCPL的输出结果:
　　　main()
　　{ int var1;
　　register int var2;
　　register int var3;
　　scanf(″%d″,&var1);
　　if(var1＞=0)
　　{ if(var1＞20)
　　{ var2=var1;
　　　var3=var2+2;}
　　　　else
　　{ var3=var1;}}
　　　else
　　{ var3=var1;
　　var2=var3*var1;}
　　　printf(″%d″,var3);　}
测试用C语言程序所对应的目标代码:
2386:01FA 55　　　　　PUSH　　BP
2386:01FD 8BECMOVBP,SP
2386:01FD 83EC02SUBSPM+02
2386:0200 56PUSHSI
2386:0201 57PUSHDI
2386:0202 8D46FELEAAX,［BP-02］
2386:0205 50PUSHAX
2386:0206 B89401MOVAX,0194
2386:0209 50PUSHAX
2386:020A E86714CALL1674
2386:020D 59POPCX
2386:020E 59POPCX
2386:020F 837EFE00CMPWORD PTR［BP-02］,+00
2386:0213 7C14JL0229
2386:0215 837EFE14CMPWORD PTR［BP-02］,+14
2386:0219 7E09JLE0224
2386:021B 8B7EFEMOVDI,［BP-02］
2386:021E 8BF7MOVSI,DI
2386:0220 46INCSI
2386:0221 46INCSI
2386:0222 EB03JMP0227
2386:0224 8B76FEMOVSI,［BP-02］
2386:0227 EB0AJMP0233
2386:0229 8B76FEMOVSI,［BP-02］
2386:022C 8BC6MOVAX,SI
2386:022E F766FEMULWORD PTR［BP-02］
2386:0231 8BF8MOVDI,AX
2386:0233 56PUSHSI
2386:0234 B89701MOVAX,0197
2386:0237 50PUSHAX
2386:0238 E8990BCALL0DD4
2386:023B 59POPCX
2386:023C 59POPCX
2386:020D 5FPOPDI
2386:020E 5EPOPSI
2386:023F 8BE5MOVSP,BP
2386:0241 5DPOPBP
2386:0242 C3RET
4　结束语
　　发展航天事业是我国的一项国策,航天计划的成功完成是众望所向。近几年各国因航天器的软件可靠性较差导致的种种航天发射失败所造成的不必要的人员伤亡和财政浪费,使得软件正确性验证日益显现出重要性。反编译正是解决这一课题的极佳工具。我国在该课题上的研究尽管起步较国外晚,但现已取得了长足的进展。经济国内反编译同行的研究和实践,现有的反编译系统基本达到了验证简单程序的要求,但要反编译大规模的软件,诸如用于航天计划中的软件,还需要深入的研究。输出层只含一个节点,表示系统控制量u,隐层含15个隐节点,隐节点激励函数为

　　在已获得的数据中截取200个作为网络训练样本,对样本数据进行归一化处理,设归一化处理后的样本表示为{θ1,1,1,u},其中



图5　逆动态模型逼近结果
由于控制量u本身比较小,在±2范围变动,故不须归一化处理。
参考文献
1　李未.欧洲程序设计方法研究的三个动向.智能机研研究动态,Vol 9,1996
2　Cristina Cifuentes and John Gough K.Decompilation of binary programs.Software Practice and Experience,1995,25(7)
3　Spector A and Gifford D.Case study:the space shuttle primary computer system,Communications of the ACM,27,872-900
4　Hood S T.Decompiling with definite clause grammars.Research Report,ERL-0571-RR,1991
5　Pavey D J and Winsborrow L A.Demonstrating equivalence of source code and PROM contents.4th European Workshop on Dependable Commputing,8-10,1992
6　合肥工业大学微机所.DECLER用户使用手册.1995.3
