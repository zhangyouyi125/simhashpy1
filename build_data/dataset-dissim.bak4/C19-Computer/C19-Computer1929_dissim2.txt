微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000　Vol.19　No.6　P.36-37




标准数据类型的JAVA容错解析
吕海莲
摘要：JAVA语言环境中标准类型数据的批量输入及类型自动判定功能的设计思想和程序实现。通常常规路由器只是机械地根据IP包中的目的IP地址以及路由表将IP数据报从一个网络转发给另一个网络，而NAT网关在Internet内部网络和Internet之间中继IP数据报并非凭借目的IP地址，它的中继是面向连接的，如图1所示。实际上，虽然UDP是无连接的，但可以将它作为虚连接来看待。网络地址转换NAT(Network address translation)技术和无类域间路由(CIDR)就是为解决这些问题而开发的一种直接的解决方案。而JAVA对数据类型之间的转换没有提供容错机制，即一旦数据格式不符就会产生例外而退出，因此对于批量数据的键盘输入来说，希望程序具有能够判断类型不符并提示重新输入的容错机制。针对这种要求，本文结合JAVA语言的编程环境，提供了一种实现这种功能的程序模型，采用流处理的方式加上一些处理技巧，使程序能够实现以下功能：
　　(1)接收从键盘上输入的多个数据行，1行中可含多个基本数据类型。
　　(2)对数据行信息进行类型解析。
　　(3)根据解析结果，提供容错机制，多余的数据自动舍去，屏蔽运行时例外。
　　(4)以当前输入的合法数据为新的数据源保存到一个随机文件中，以备重复运用。
　　对于不同的应用程序，数据行中的数据个数及其类型都不相同，这里设定行数据中包含3个基本类型：int number，String name，double score。
　　(3)映射关系解除阶段。当TCP的1次连接关闭时，NAT会释放分配给这条连接的端口，以便以后的连接可以继续使用。
　　(1)键盘行数据的输入和接收
　　从键盘上输入的信息，系统都是以字符流的形式进行接收，程序通过FileDescriptor.in在标准输入流上建立文件输入流FileInputStream fin，然后读取键盘的数据并写入一个保存行数据的辅助I／O流文件temp.dat，并把它作为类StreamTokenizer解析的对象，而正确的数据行则保存到一个随机文件filerd.dat中。同时采用行序号提示的方式便于数据行的准确录入。当用户输入＠字符时系统自行退出。
　　(2)行数据的解析
　　类StreamTokenizer提供了强大的流解析功能，它把输入流解析为记号，并通过维护一张语法表来进行解析。它可以使Internet网得到足够的喘息时间来等待新一代IP协议的出台。目前，我们正在进行二者的集成与开发。另外当端口地址在NAT内动态分配时，使得外部攻击者对NAT域中的一个特定主机的攻击更加困难。同时在程序中对所有的文件都要进行FileNotFoundException和IOException例外的捕获。
　　(3)如果将NAT设备和应用网关相结合，可以为应用层中含有IP地址信息的连接进行地址翻译，确保数据报不含有私有的地址信息，这样NAT可以做到对协议透明，起到透明路由器的作用。
　　(2)当NAT设备不在安全域中时，应用级的负载可以进行端到端的加密，比如利用SSL!＝′＠′）
　　｛try｛
　　　／／定义存放行数据的临时文件
　　　FileOutputStream temp＝new FileOutputStream
　　　　　　　　　　　　　　new File(″temp.dat″))；
　　while（data!′＼n′）
　　｛temp.write（data）；data＝fin.read（）；｝
　　temp.write（data）；temp.close（）；
　　｝catch（FileNotFoundException e）｝
　｝catch（IOException e）｛｝；
　　try｛ ／／对行数据进行解析，刚建立的文件作为输入流
　　FileInputStream temp＝new FileInputStream（new File
　　　　　　　　　　　　　　　　　　　　　　（″temp.dat″））；
　　StreamTokenizer st＝new StreamTokenizer）temp）；
　　int ch＝′＼″′；st.quoteChar（ch）；／／定义串分隔符“″”
　　int count＝0； ／／用于辨别数据的顺序
　　／／存放结果的变量及正次序正确标记
　　boolean flagn＝false，flags＝false，flagd＝false；
　　int nn＝0；double dd＝0；String ss＝new String（″″）；
　　while （st.nextToken（）！＝st.TT＿EOF）
　　｛count＋＋；
　　switch（st.ttype）
　　　　｛case st.TT＿NUMBER：if（count＝＝1）（nn＝（int）
　　　　　　　　　　　　　　　　st.nval；flagn＝true；｝
　　　　　　　　　　　　　　　　else if（count＝＝3）
　　　　　　　　　　　　　　　｛dd＝st.nval；flagd＝true；｝
　　　　　　　　　　　　　　　　break；
　　　　case（int）′＼″′：if（count＝＝2）｛ss＝st.sval；flags＝
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　true；｝
　　　　　　　　　　　　　　　　break；
　　　　defaultbreak；
　｝
｝
　if（count＞＝3 ＆ flagn ＆＆flags ＆＆flagd）／／建立1个
　　　　　　　　　　　　　　　　　　　　　　　／／数据行
　　｛numrec＋＋；
　　　　rfile.writeInt（nn）；   rfile.writeChar（′＼t′）；
　　　　rfile.writeUTF（ss）；   rfile.writeChar（′＼t′）；
　　　　rfile.writeDouble（dd）； rfile.writeChar（′＼n′）；｝
　　else System.out.println（″error，repeat input：″）；
　　temp.close（）；
　　｝catch（FileNotFoundException e）｛
　　｝catch（IOException e）｛｝；
　　System.out.print（″record″＋numrec＋″：″）；／／接收下1个
　　　　　　　　　　　　　　　　　　　　　　　　　　／／行数据
　　data＝fin.read()；
　　｝／／与第1个try配对
　　｝catch（FileNotFoundException e）｛
　｝catch（IOException e）｛｝；
｝
｝
　　该文只是针对固定的数据格式的解析对其解决方法进行了比较详细的分析，在具体的程序设计中，会有多种基本数据类型以及复合数据类型的需要。因此，对于更复杂的数据类型组合的解析实现有待进一步的讨论。
吕海莲（河南平顶山师专计算机系467000）
参考文献
1，王克宏．JAVA语言编程技术．北京：清华大学出版社，1997
2，王克宏．JAVA2核心类库详解．北京：清华大学出版社，1999
3，美Heller P，Roberts S著．邱仲潘译．JAVA2高级开发指南． 北京：电子工业出版社，1998
4，美Walsh A，Fronckowiak J．JAVA宝典．北京：电子工业 出版社，1998
收稿日期：2000－01－04
