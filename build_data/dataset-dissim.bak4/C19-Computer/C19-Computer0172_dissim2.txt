
　　一般地,实时系统中的任务可以分为周期性的(periodic)和非周期性的(aperiodic)两大类,对于周期性任务,人们考虑最多、也最为成熟的便是静态算法(static algorithm)［2～10］软件学报
Journal of Software



一个虚拟Internet服务器的设计与实现
章文嵩　吴婷婷　金士尧　吴泉源
摘　要　针对已有的解决Internet服务器性能瓶颈和可靠性问题的方法所存在的不足,提出基于IP层负载平衡调度的解决方法,将一组服务器构成一个可伸缩的、高可用的虚拟Internet服务器。通过在服务机群中透明地加入和删除结点以实现系统的伸缩性;通过检测结点或服务进程故障和正确地重置系统达到高可用性。详细讨论了虚拟Internet服务器的体系结构、设计方法和实现技术,并给出了相应的性能测试结果。
关键词　Internet服务器,负载平衡,高可用性,网络地址转换。系统调度的一个重要原则就是获得最小的KRn。例如,随着Internet的飞速发展和用户的剧烈增长,比较热门的Web站点会因为被访问次数急剧增长而不能及时处理用户的请求,导致用户长时间地等待,大大降低了服务质量。这时,Web服务器的性能往往成为整个系统中的瓶颈。当在Web服务器上大量使用CGI和数据库等CPU密集型应用的情况下,服务器性能瓶颈问题更加突出。另外,随着电子商务等关键性应用在网上的运行,任何例外的服务中断都将造成不可估量的损失,因此服务器的可靠性也越来越重要。
　　为了有效地解决Internet服务器的性能瓶颈和可靠性问题,我们给出了基于IP层负载平衡调度的解决方法,将一组服务器构成一个可伸缩的、高可用的虚拟Internet服务器。通过使用网络地址转换,使得服务器组的复杂结构对用户是透明的。系统的伸缩性通过在服务机群中透明地加入和删除一个节点来达到;通过检测节点或服务进程故障和正确地重置系统达到高可用性。

　　不失一般性,假设任务完成时间序列｛Ci｝是单调递减的,这样,近似分配算法可以利用数学归纳法来描述：(i）将任务T1分配到PN1上；(ii)设任务T1,...,Ti-1均已分配到各个PN上,并且此时系统中任务负载最小,且序号最小的节点是PNm；(iii）将任务Ti分配到PNm上,i =2,然而在很多实时系统中,周期性任务的运行时间或任务数量常常是一些具有一定规律的随机过程,因而上述静态算法的效能将受到限制,...,J 相关的解决方法
　　解决服务器性能瓶颈问题的现有方法主要分为以下3类。
　　(1) 单服务器解决方法。当服务器性能会成为瓶颈时,最简单的方法是将其升级为更高档的服务器。但该方法有以下不足：① 升级过程繁琐,机器切换会使服务暂时中断,并造成原有计算资源的浪费；② 越往高端的服务器发展,所花费的代价越大；③ 一旦该服务器或应用软件失效,会导致整个服务的中断。
　　(2) 基于RR-DNS的多服务器解决方法。NCSA(National Center of Supercomputing Applications)的可伸缩的WEB服务器系统就是最早基于轮转域名系统RR-DNS(round-robin domain name system)的原型系统［1～3］。其基本思想是：通过RR-DNS服务器把域名轮流解析到这组Web服务器的不同IP地址,将负载分到各台服务器上,从而提高整个系统的性能。然而,该方法存在以下一些问题。① 域名服务系统是按层次结构组织的,各级域名服务器都会缓冲已解析的名字到IP地址的映射,它会妨碍Round-Robin方法在客户端生效,会导致不同WEB服务器间严重的负载不平衡。另外,域名到IP地址映射的TTL(time to live)值较难设定,太大,则负载不平衡更严重;太小,则频繁的域名解析使RR-DNS成为系统中一个新的瓶颈。② 由于用户访问请求的突发性和访问方式不同,即使TTL值为0,各服务器间的负载仍存在较严重的负载不平衡问题。③ 系统的可靠性和可维护性差,一台服务器失效或管理员对其进行维护,均会导致域名已被解析到该服务器上的用户出现服务中止。
　　(3) 基于应用层负载平衡调度的多服务器解决方法。EDDIE［4］,Reverse-Proxy［5］和pWEB［6］都使用基于应用层调度的方法来建立一个可伸缩的WEB服务器。它们都将到达的HTTP请求转发到不同的Web服务器,取得结果后,再返回给用户。该方法也存在一些问题。首先,系统处理开销特别大,致使系统的伸缩性有限。
2.2　基于Ⅱ类模型的静态算法SAA(Ⅱ)
　　在考虑Ⅱ类模型的分配问题时,我们仍然可以假设序列｛Di｝是单调递减的,由于各个任务中的子任务均可单独分配,故可将它们视为Ⅰ类模型中的任务,此时,运用对于Ⅰ类模型的SAA算法,即可以获得优化的近似算法。一般地当服务器组数目增加时,调度器会很快成为新的瓶颈。文献［7］在Linux 1。3版本上应用快速报文插入技术,使得进行负载平衡调度的用户进程访问网络设备接近核心空间的速度,降低了上下文切换的处理开销,但并不彻底。其次,基于应用层的负载平衡调度器与应用协议密切相关,对于HTTP,Proxy和SMTP等应用协议,需要写不同的调度器。 
2 虚拟Internet服务器的体系结构
　　虚拟Internet服务器采用基于IP层负载平衡调度技术,在操作系统核心空间中将IP层上的TCP连接负载均衡地转移到不同的服务器上,且调度器自动屏蔽掉服务器的故障,从而将一组服务器构成一个高性能的、高可用的虚拟Internet服务器。虚拟Internet服务器的体系结构如图1所示,整个服务器组的复杂结构对用户是透明的,用户看到的是单个服务器,且无需修改客户端和服务器端的程序。为此,在设计时需要考虑系统的透明性、负载均衡性、容错性和易管理性。


Fig.1　Architecture of a virtual Internet server
图1　虚拟Internet服务器的体系结构
2.1　透明性和网络地址转换
　　透明性是通过网络地址转换实现的。当用户通过Virtual IP Address（即调度器的外部地址）访问服务器时,请求报文到达调度器,调度器以负载均衡方法从一组真实服务器选出一个,将报文的目标地址Virtual IP Address改写成选定服务器的地址,报文的目标端口改写成选定服务器的相应端口,最后将报文发送给选定的服务器。同时,调度器在Hash表中记录这个连接,当这个连接的下一个报文到达时,从Hash表中可以得到原选定服务器的地址和端口,进行同样的改写操作,并将报文传给原选定的服务器。真实服务器的回应报文经过调度器时,将报文的源地址和源端口改为Virtual IP Address和相应的端口,再把报文发给用户。当连接终止或超时时,调度器将这个连接从Hash表中删除。这样,用户所看到的只是在Virtual IP Address上提供的服务,而虚拟服务器的结构对用户是透明的。由于篇幅的限制,本文尚留有不少问题值得进一步研究,例如,任务模型与滤波参数之间的关系、初始状态下的分配调度准则等。
2.1　基于Ⅰ类模型的静态算法SAA(Ⅰ)
　　由于N和J均为常数,所以,对于Ⅰ类模型中的任务分配问题,我们总能通过一些方法(如穷举法)找到使系统取得最佳任务完成时间的分配方式,但这已被证明是一个NP完备问题［12］,因而对于实时系统的动态调度没有借鉴意义。根据HTTP协议［9］,从WEB服务器上获取每个对象都需要建立一个TCP连接,同一用户的不同请求会被调度到不同的服务器上,所以这种细粒度的调度完全避免了因用户访问的突发性引起的负载不平衡问题。在调度算法上,我们采用轮转调度(round-robin scheduling)算法和基于权值的轮转调度(weighted round-robinscheduling)算法。轮转调度算法是假设所有服务器处理性能均相同,依次将请求调度到不同的服务器,算法简单,但不适用于服务器组中处理性能不一的情况。为此,使用基于权值的轮转调度算法,用相应的权值表示服务器的处理性能,将请求数目按权值的比例分配到各服务器。调度器需要记录各个服务器已建立TCP连接的数目,当某台服务器被调度时,其连接数加1；当连接中止或超时的时候,其连接数减1。假设每台服务器的权值为Wi(i=1,。。。,n),TCP连接数目为Ti(i=1,。。。,n),依次选Ti/Wi最小的服务器为调度对象。算法实现也比较容易,并且与服务器无关。
2.3　故障检测
　　我们采用两种方法来检测故障。一种方法是,资源监测器每隔t毫秒对每个服务器发ARP（address resolve protocol）请求,若有服务器过超r毫秒仍没有响应,则说明该服务器已发生故障,资源监测器通知调度器将该服务器的所有服务进程调度从调度列表中删除。
　　(2) 由于Si与Sj的相关处理包含了ni×nj次彼此之间先后顺序无关的相关函数的计算与判别,所以,若将每一次计算与判别定义为一个子任务,则对于当前帧为Si、滑窗宽度为K的相关处理任务Ti,它包含的独立子任务数为

为保证此表达式在边界情形下的正确性,我们假定

1.2　任务模型
　　根据上述特征,我们将考虑以下两类包含N个PN的分布式同构系统中的任务模型。资源监测器能通过电子邮件或传呼机向管理员报告故障,一旦监测到服务进程恢复工作,通知调度器将其加入调度列表进行调度。
2.4　服务器管理
　　服务器可运行任何支持TCP/IP的操作系统,可采用任何Internet服务器软件,也无需对客户程序作任何修改,可适用于所有Internet站点。通过系统提供的管理程序,管理员可发命令,随时将一台机器加入服务或切出服务。
3 系统实现
　　我们在Linux 2.0操作系统源代码上加入和改写了2 000多行C语言代码,在IP层截取和改写IP报文,实现了可伸缩的虚拟Internet服务器,并提供了一个ippfvsadm程序进行虚拟服务器的管理。系统的源程序和使用说明已在网上发布 ,至今已经被访问了6 000多次。就我们所知,该系统已在美、英、德、澳等国的十几个站点上正式使用。
　　系统的主要功能模块如图2所示,其中PFVS-Module是虚拟服务器的主控模块,用于截取和改写IP报文;PFVS-table表存放虚拟服务器的规则;Hash of Connections表是用于记录当前连接的Hash表。ippfvsadm管理程序通过setsockopt()函数将虚拟服务器的规则写入PFVS-table表中,通过/proc文件系统把PFVS-table表中的规则读出。

Fig.2　Mail modules of the system
图2　系统的主要模块
4 性能测试
　　我们对单台Web服务器和多台Web服务器构成的虚拟Web服务器的最大吞吐率和延时进行了测试对比。测试软件是美国ZD LABS的WebBench 1。1,服务器都是Pentium 166、32M内存和100M Intel EtherExpress网卡的PC,运行Linux操作系统,Web服务器是Apache 1。3。1。客户机是一般的PC,共有6台,运行Windows 95/NT操作系统。它们通过10/100M自适应的3Com Switch 3000交换机相连。在WebBench测试时,有一个主控进程和多个模拟访问的客户进程。主控进程生成工作负载和参数,发给客户进程,各个客户进程连续地访问服务器并记录测试数据,等测试完毕后向主控进程汇报,最后由主控进程进行统计。测试结果见表1。
Table 1　Brief testing results of Webserves
表1　Web服务器性能测试结果
　Requests per second (GETs/s)①Throughput (Bytes/s)②Processing delay③(ms)
Single Web Server④97648。95835。516
Virtual Web Server⑤(2 set)1901269。
3.2　预测算法PAA
　　一般地,分布式系统中的动态调度既可以是分布的,也可以是集中的。474
Virtual Web Server(3 set)2821930。93438。928
①每秒处理请求数,②吞吐率,③处理延时,④单台Web服务器,⑤虚拟Web服务器。
　　另外,若用tcpdump程序测试得在现有配置下调度器重写一个报文的平均延时为60μs。外部环境系统的稳定变化会导致计算需求的变化,以雷达系统为例,面向自由空间与面向复杂背景,其计算上的需求将相去甚远,然而这样的变化是稳定而有规律的,因而在一定程度上是可以预知的。93MBytes/s。假设Web服务器的平均吞吐率为600KBytes/s,当服务器的数目升到15台时,才达到虚拟服务器的最大吞吐率。可见,它具有良好的伸缩性。
5 结束语
　　本文对解决Internet服务器瓶颈问题的已有方法进行分析比较,指出了它们存在的不足；并给出了基于IP层调度的多服务器解决方法,通过网络地址转换、负载平衡调度、故障检测技术,将一组提供并行服务的服务器构成一个高性能、高可用的虚拟Internet服务器。该方法具有良好的伸缩性,也无需对客户机和服务器作任何修改,可适用于任何Internet站点。
章文嵩（国防科学技术大学计算机学院　长沙　410073）
吴婷婷（国防科学技术大学计算机学院　长沙　410073）
金士尧（国防科学技术大学计算机学院　长沙　410073）
吴泉源（国防科学技术大学计算机学院　长沙　410073）
