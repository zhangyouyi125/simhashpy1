微型电脑应用
MICROCOMPUTER APPLICATIONS
2000　Vol.16　No.1　P.62-63



处理消息环中消息的一种安全方法
刘华蓥　韩建民　王桂华
摘　要：本文阐述了Windows下消息映射函数中检测并处理消息的一种安全方法，并给出了程序实例。
关键词：消息　消息环　消息映射机制　GetMessage PeekMessage DispatchMessage▲
一、消息、消息环和消息映射机制
　　Windows 中应用程序和应用程序之间、应用程序和用户之间的通信是靠消息来实现的。
　　首先，可根据不同的线型来创建相应的图层。Windows中的消息是以一定的规则排列起来，这就是消息环。
四、图层使图形操作简捷
　　对于大型复杂的图形，在绘图过程中，修改及编辑更加繁杂，也易出错，而且也易影响其它不需修改的图形，为了使图面显示更清晰、易操作、避免误操作，我们利用图层的特有功能“关闭”或“冻结”，使一引起暂时不想看见的线条隐去，便于编辑操作。■
作者单位：桂丽萍(华南建设学院计算中心 510405)
参考文献：
［1］George Omura 《Auto CAD 14 从入门到精通》电子工业出版社　1998年3月
［2］广州德克赛诺科技有限公司 《德赛渲染巨匠 Lightscape 用户手册》
［3］Deke McClellcmd 《Photoshop 4 实用大全》 中国水利水电出版社 1998年4月
收稿日期：1999-9-28日
。而以往手上工绘图却需要分别画出这三幅图。例如在程序中有一段重复显示动画，或传输文件等时间比较长的操作，如果进程允许被用户中断或终止，进程就必须间或地检测并处理用户发来的消息。要解决此类问题，必须直接对消息环进行操作。本文论述了在Windows环境下，检测和处理消息环中消息的一种安全方法。
二、消息的检测与发送
　　1.消息的检测
　　检测消息环的函数有两个：GetMessage和PeekMessage,这两个函数的区别有两点：(1)如果消息环中没有消息，GetMessage一直等到有消息才返回，而PeekMessage则直接返回，且返回值为0；(2)PeekMessage检测到WM_QUIT没有什么特殊反应，而GetMessage检测到WM_QUIT则返回值为0。
　　由于在消息环中可能没有消息，使用GetMessage进程会进入循环等待消息的状态。
　　另一极具特色的制作效果图的软件“渲染巨匠Lightecape”也充分利用“图层”这一概念，首先可以选择性的开关图层，这样，可以大大简化准备阶段的表面处理过程；另一方面，使用图层作为保存求解阶段多种设计方案的一种方式。wRemoveMsg是一个标志，它可以是以下值的组合：PM_NOREMOVE(表示经处理后，消息保留在队列中)、PM_REMOVE(表示经处理后，消息不保留在队列中)、PM_NOYIELD(防止向别的任务转让系统资源，但在WIN32中，此参数无效)。
　　结合“图纸空间”这一功能，我们更可以在一张图纸上同时呈现多个图形，而这多个图形却表现对同一实体的不同视图，如我们可以设置上图为总图，而左下图为墙体，右下图为柱子的布置图。如果hWnd为NULL，则检测属于本应用程序的所有窗口的消息，如wMsgFilterMin和wMsgFilterMax都为0，则检测发送给指定窗口的所有消息。
　　取出消息后，滤出有用的消息，由于消息环中的消息没有经过翻译，所以必须在处理之前先翻译一下，再将消息直接处理或发送出去。
　　2.发送消息
　　发送消息的函数有三个：PostMessage, SendMessage和DispatchMessage。前两个函数是把消息放入消息环中，而DispatchMessage则直接将消息发送到应该处理此消息的窗口，并且等待将这个消息处理完才返回，所以应该用DispatchMessage来发送消息。利用图层在图纸空间的特性，我们只需一个总图，就可以十分快捷的通过“冻结”当前视窗的某些图层来达到此目的，却不影响当前视窗的这些已关闭的图层在其它视窗中的正确显示。
　　其次，如果在处理本消息过程中又做了关闭本程序窗口的操作，若不滤掉关闭窗口的消息直接发送出去，而DispatchMessage语句本身又不在函数的末尾，则会导致内存渗漏，窗口关闭了，但程序还在内存中，且无法再对它进行操作。因此，当进程检测到关闭窗口的消息时应先用goto语句到本函数的末尾，再发送关闭窗口的消息。
　　第三，如果再次在消息环中检测到本消息，并且发送了出去，则会导致二次进入本程序体，从而导致混乱。含义丰富，功能强大，不会用“图层”的人也能用CAD进行设计，但对CAD的认识一定还处在一个较低的水平上，使用CAD工作时会感到操作步骤多、修改难、工作量大等；如果能深刻领会“图层”这一有着特殊意义的概念，会发觉工作立刻变得简单、方便、快捷起来，设计水平也会随之大幅提高，随着各种CAD绘图软件诞生、发展，“图层”的应用越来越广泛，并日益显示出其无比强大生命力，今天可以这么说，没有图层就没有CAD。在函数首对此布尔变量进行检测，如为真则直接返回；否则设置为真，处理此消息后在函数尾将它设置为假。
四、程序实例
　　下面举例说明一下，如何在应用程序中安全地检测、处理和发送消息。
　　在以上的方法中，使用最频繁、而最方便的就是“图层”。
　　void D1View::OnEditUndo0
{//IsEditUndo 在头文件中的C1View类中定义为BOOL型
//如IsEditUndo为真，表示正在处理ID_EDIT_UNDO,则不执行任何操作，直接返回
if(IsEditUndo)return;
//将IsEditUndo设置为真，表示正在处理ID_EDIT_UNDO
IsEditUndo=TRUE；
MSG msg1
MSG* msg=&msg1;
BOOL bb,bbb;
　　　……
do{ bb=::PeekMessage(msg,NULL,O,O,PM_REMOVE);
　　bbb=FALSE;
　　//接收到此消息证明用户选择了系统菜单的关闭窗口的命令
if(msgmessage==WM_SYSCOMMAND)&&(msgwParm==SC_CLOSE)
{bbb=TRUE;goto eee;}
//接收到此消息证明用户选择了File/Exit命令
else if ((msgmessage==WM_COMMAND)&&(msgwParam==ID_APP_EXIT))
{bbb=TRUE;goto eee;}
//接收到此消息证明用户在窗口的右上角的叉号上单击了一下
else if ((msgmessage==WM_NCLBUTTONDOWN)&&(msgwParam==HTCLOSE))
{bbb=TRUE;goto eee;}
else
{if(::TranslateAccelerator(m_hWnd,AccelTable,msg)==0)
　　{　::TranslateMessage(msg);
　　　 ::DispatchMessage(msg);}}}while(bb);
　　　……
//将IsEditUndo设置为假，表示已处理完ID_EDIT_UND
IsEditUndo=FALSE;
eee:if(bbb==TRUE)
　　{::TranslateMessage(msg);
　　 ::DispatchMessage(msg);}}
五、结束语
　　消息映射机制是Windows下应用程序的重要组成部分，本文论述了Windows下应用程序开发中对消息进行检测和处理的一种安全方法。在实际应用中，具有一定的普遍意义。特别是在photoshop5.0中更是增加“文字图层”这一功能，在“文字图层”中我们可以对文字做许多特殊效果的处理，利用文字图层中Effects(制造效果)功能，我们可以将在以往旧版的photoshop中需要许多步骤才能完成的文字特殊效果如文字阴影一步就“搞定”