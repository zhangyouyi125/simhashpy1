计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第6期 Vol.19 No.6 1999



一种软件结构复杂度度量模型及其自动实现
王小明
　　摘　要　本文对软件结构中扇入/扇出对软件复杂度的影响进行分析,研究探讨了一种基于扇入/扇出的软件结构复杂度度量模型，给出了自动实现算法。该模型在结构化、软构件和基于组件的系统设计分析中具有较高的应用价值。
　　教师Agent的能力编码用四个部分表示，且主动请求相应的Facilitator将能力编码插入到该Facilitator的知识库中。各子系统之间通过控制流与数据流相关联。在一定程度上，软件系统的复杂度取决于各子系统之间的控制流与数据流的复杂程度。从软件设计的角度来看，这种控制流与数据流即是模块间的扇入与扇出。分类标志说明教师Agent的教学内容所属类别，分类标志隐含地说明了从区域Facilitator到该教师Agent所经过的中间结点。
　　⑴ 线性表按区域划分，一个区域对应一个一维线性表，每个线性表包含若干个Facilitator，为了便于区别称为区域Facilitator，区域Facilitator不能连接教师Agent和学生Agent。
　　远程教学中的Agent能力编码的声明及插入知识库的请求，大致相同，在此仅举一例：
(advertise
:sender　　　　　facilitator
:receiver教师A
:reply-withid1
:languageKQML
:ontology远程教学
:content(insert
:sender　　　　教师A
:receiverfacilitator
:in-reply-toid1
:languageKIF
:ontology远程教学
:content"能力编码"))
(insert
　 　　　:sender　　　　教师A
:receiverfacilitator
:in-reply-toid1
:reply-withid2
:languageKIF
:ontology远程教学
:content"能力编码")
　　调度Facilitator没有能力编码，其知识库包括线性表名及区域Facilitator名，为全网搜索提供信息。一个模块的扇入指进入该模块的控制流与数据流之和，一个模块的扇出指该模块输出的控制流与数据流之和。软件结构的复杂度可表示为对应模块或子系统的扇入与扇出乘积的平方。一个模块应追求高扇入，使得该模块具有较高的可重用性；追求低扇出(扇出数小于8)，使得模块间藕合度较低。结构复杂度度量力求反映模块内部结构的复杂度以及模块间接口的复杂度，进而反映整个软件系统的结构复杂度。但是这种方法将扇入/扇出，模块间循环调用与顺序调用，分枝调用，逐层调用与隔层调用，不同深度的调用，等等，对模块(系统)的复杂度影响同等对待，按照系统科学和软件工程理论，这并不完全合理。本文在研究结构化系统设计与程序设计的基础上，将扇入/扇出对模块的复杂度影响分别讨论，给出了基于扇入/扇出的模块和系统结构复杂度定量度量的数学模型。使用这些模型可以在软件系统模块结构设计完成之后，对系统结构与模块的复杂程度作出定量度量，以便在祥细设计开始之前对复杂度过高的模块重新划分；对复杂度不合理的系统结构进行重新构建；对不同的系统结构方案进行复杂度比较，从中选择最优方案。
2　软件结构复杂度建模
2.1　软件工程若干准则
　　文献［2］［4］［5］［6］［7］中有关系统结构和模块复杂度理论可归纳如下：
　　准则1：结构化程序(系统)总是可以层次化的。
　　准则2：任一程序中，分枝结构比序列结构复杂；循环结构比分枝结构复杂。
　　准则3：任一程序中，隔层调用比逐层调用复杂；模块间自底向上调用(构成循环结构)比自顶向下调用复杂。
　　准则4：系统模块越多系统越复杂；中间层模块越多系统越复杂；模块层数越多系统越复杂。
　　准则5： 嵌套深度越大，程序越复杂；越靠近入口或出口的模块，复杂度越低。
2.2　若干概念
　　为了将扇入/扇出对模块(系统)结构复杂度的影响分开来讨论，以建立新的结构复杂度度量模型，引入如下几个概念。在相同的线性表内，区域Facilitator可以按优先级顺序排列，不同的线性表也可以按优先级顺序排列。扇入：指直接调用该模块的模块数目。
　　模块总数(m)：系统中模块总个数。
　　深度层号：指软件结构从入口到出口各层次的顺序编号。
　　对称层号：当系统模块总层数n为奇数时，自顶(入口)向下(出口)各层对称层号依次为1，2，…，,…,2，1；当n为偶数时，自顶(入口)向下(出口)各层对称层号依次为1,2,…,,,…,2,1。
　　第j层对称层权值(yj):
2.3　数学建模
　　依据2.1系统结构复杂度准则1-5，在研究大量实际系统模块扇入/扇出对模块(系统)结构复杂度影响的基础上发现， 一个模块的扇出不仅影响其自身的结构复杂度，更重要的是影响系统其他模块结构的复杂度(接口复杂度)，并使其本身的结构复杂度按2的指数增长。一个模块的扇入影响其本身的结构复杂度，并使其本身的结构复杂度按e(e=2.71828)的指数增长。模块的结构复杂度函数依赖于系统总模块数、系统深度、模块在系统中所处位置、扇入/扇出来源与去向等。对于某一模块，只要有一个扇入或扇出复杂度较高，那么该模块仍然复杂度较高。
　　定义1:　由m个子模块构成的软件系统P,其子模块的结构复杂度定义为：
　　模块j的扇入复杂度:
Rj=m×hj×e｜j 模块深度层号-扇入i起点深度层号-1｜　　　　　　　　　　　(1)　
　　（q为j模块扇入总数, 1≤j≤m，m为模块总数，以下同）
　　模块j的扇出复杂度：
Cj=m×hj×2｜j 模块深度层号-扇入i终点深度层号+1｜　　　　　　　　　　　(2)　
　　（p为j模块扇出总数）
　　模块j的总复杂度:
　　　　　　　　　　　　　　(3)　
　　系统模块的平均复杂度：
　　　　　　　　　　　　　　(4)　
　　模块j的总复杂度相对于系统模块的平均复杂度的偏差：
　　　　　　　　　　　　　　　(5)　
　　依据软件工程理论，一个软件系统最优，不是某几个模块最优，而应该是所有模块优度均衡，从而使系统最优。所以，可根据系统乘法原理［7］定义软件系统的结构复杂度。这种分类的层次结构用树形图表示，教师Agent是叶子结点，Facilitator是中间结点，学生结点也是叶子结点，但它不具有分类属性。

F ― Facilitator　　　A ― Agent
每个区域Facilitator所辖范围具有相同的层次结构，图中只给出了其中一个的图示
图1　Agent的连接方式示意图
3.2　Agent的作用
　　在远程教学中有三类Agent，其作用分别为：
　　⑴ 教师Agent：向Facilitator声明教学内容；为学生Agent提供教学服务，根据教学要求发送教材；实时回答学生Agent的提问等。为此，进行如下假设：
　　⑴ 多Agent简化，只考虑三类Agent，即教师Agent、学生Agent和Facilitator；
　　⑵ 一个教师Agent具有有限类的相关教学知识。以后其它教师Agent认同这种分类，在生成自由编码和教师编号时，将从该Facilitator获得正确编码的指导。笔者构造了100多种不同规模的软件系统结构模型，并对实际使用中的10种大型管理信息系统使用C语言实现该算法，对系统模块和系统结构复杂度进行了自动度量分析；对同一系统的不同系统结构方案进行了度量分析比较,其结果比较理想。
注：本项目受正林集团技术创新基金资助(No.980530)。
作者简介：王小明　副教授。主要研究方向：软件工程、管理信息系统、数据库的教学和研究。整个过程由学生 A开始，它向本社区的Facilitator F1提出请求，F1分析能力编码，判断被请求的教师是否在本社区，如果不在本社区，则向上级Facilitator前传学生的请求，上级Facilitator进行与F1类似的处理，直到某个Facilitator如F2能确定教师B，并且把B的地址回传给A，A在获得教师B的地址后，直接向B发出学习请求，B给予响应，开始学习，学习过程中不再需要其它Facilitator介入