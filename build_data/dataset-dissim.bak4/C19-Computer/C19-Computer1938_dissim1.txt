微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000　Vol.19　No.6　P.58-60




基于Windows线程技术实现数据
采集的简易编程方法
周开利　汪云
摘要：基于Windows线程编程技术，将DOS数据采集程序“包裹”成1个线程，利用共享文件交换数据，实现Windows环境下数据采集的简易编程。
2.1 使用ActiveX控件SSDBGrid
　　SSDBGrid控件是由Sheridan SoftWare所开发的DBGrid组件，可以利用它来实现数据的新增、删除及外修改等操作。要实现对数据的批量修改，还需要其它方法。其工作原理如图3所示。而当你熟悉的Windows开发环境不适于采用上述方法时，本文介绍的方法也许不失为一种简单易行的方法。
本文使用DOS环境下的Borland C＋＋和Windows环境下的Borland C＋＋ Builder进行程序编制，但若使用的是DOS环境下的BASIC、PASCAL或Windows环境下的VB、VC＋＋等，同样可以采用本文所介绍的方法。它所要求的仅仅是：(1)任何一种你所熟悉的DOS环境下的I／O编程技术和共享文件使用方法；(2)任何一种你所熟悉的Windows开发环境中有关线程和共享文件的应用方法。
　　(1)在浏览器页面上插入对象
　　在浏览器页面上插入RDS与SSDBGrid对象，这既可以借助HTML的开发工具，如FrontPage或InterDev等，用可视的方式插入ActiveX控件，也可以把下面的代码直接写入某个HTML编辑器。

图1  原理框图
　　数据采集卡通过DOS I／O接口程序，对I／O口进行读写操作交换数据；而DOS I／O接口程序与Windows应用程序之间却是通过共享数据文件交换数据。换句话说，对I／O口直接操作的依然是DOS程序，Windows应用程序只是对数据采集间接控制，从而避开了Windows程序不能对I／O口直接读写的限制。
　　传统的数据库应用主要完成数据维护、数据查询、数据分析决策三个方面的功能。所谓线程，简而言之就是运行在应用程序中的独立进程，它只是代码的执行体，其处理时间由操作系统控制而不是程序控制。因为大多数代码是在客户端执行，因而许多代码可以从浏览器查看，例如，连接数据库的连接串等，虽然可以通过Web服务器上ODBC连接串的设置隐藏一部分信息，但毕竟还是一个安全隐患。DOS I／O接口程序通过对I／O口的直接读写完成数据采集并以采集的数据不断更新采集数据文件中的数据。Windows应用程序可同时从采集数据文件中读取数据，效果就好像从I／O口直接读取数据一样。当然，要保证设计环境下已有这2个控件。另一方面，如果我们需要对DOS线程进行控制或传输数据(如终止线程运行或传递D／A数据等)时，可以以同样方式再建立1个控制数据文件进行“消息”传递。要了解RDS技术，最关键的是了解其工作模式，如图1所示。该采集卡具有2个D／A和16个A／D通道，其I／O口基地址为0x300，0x300～0x301为A／D通道的高／低位数据和通道号端口地址；0x304～0x307为2个D／A通道的高／低位数据端口地址。
＃include ＜stdio.h＞
＃include ＜dos.h＞
＃include ＜STDLIB.H＞
＃include ＜conio.h＞
＃include ＜share.h＞
＃include ＜io.h＞
typedef unsigned int word；
const int BASE＝0x300； ／／设置I／O口基地址
void main(){
int status，dtl，dth，adl，adt，c＿reg，chv，i，Tn；
word da1＝0x0，da2＝0x0；
FILE *fADout，*fDAin，*fCtrl；
fDAin＝＿fsopen(″DAin.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开D／A共享数据文件
fADout＝＿fsopen(″ADout.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开A／D共享数据文件
fCtrl＝fsopen(″Ctrl.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　／／打开控制共享数据文件
do {
　　fseek(fCtrl，SEEK＿SET，0)；
　　fscanf(fCtrl，″％d＼n″，＆Tn)；
　　if(Tn＝＝0)／／DOS程序接到Windows终止运行控制
　　　　　　　　　　　／／字“0”时，执行相应操作
　{
　　　　fclose(fDAin)；
　　　　fclose(fADout)；
　　　　fclose(fCtrl)；
　　　　exit(0)；
　　　　return；
　}
　　fseek(fDAin，SEEK＿SET，0)；
　　fscanf(fDAin，″％d ％d＼n″，＆da1，＆da2)； ／／从D／A数
　　　　　　　　　　　／／据文件中读取D／A数据da1、da2
outportb(BASE＋4，(da1＆0xf＜＜4))； ／／写D／A通道1
　　　　　　　　　　　／／数据低位值
outportb(BASE＋5，da1＞＞4)； ／／写D／A通道1数据
　　　　　　　　　　　／／高位值
outportb(BASE＋6，)da2＆0xf＜＜4)； ／／写D／A通道2
　　　　　　　　　　　／／数据低位值
outportb(BASE＋7，da2＞＞4)； ／／写D／A通道2数据
　　　　　　　　　　　／／高位值
fseek(fADout，SEEK＿SET，0)；
i＝0；
do {
　　outportb(BASE＋8，0)；
　　outportb(BASE，0)；
　　do {
　　　　status＝inport(BASE＋8)；
　　　　delay(1)；
　　　}while((status ＆ 0x10)＝＝0)；
　　dtl＝inportb(BASE)； ／／读A／D通道i数据低位
　　　　　　　　　　　／／值和通道号
　　dth＝inportb(BASE＋1)； ／／读A／D通道i数据
　　　　　　　　　　　／／高位值
　　adl＝dtl／16；
　　adt＝dth*16＋adl； ／／A／D转换值
　　chv＝dtl－adl16； ／／A／D通道号
　　fprintf(fADout，″％d ％d＼n″，chv，adt)；　／／将A／D
　　　　　　　　　　　／／通道号及转换值写入A／D数据文件
　　} while(i＋＋＜15)；
　}while(i＞－1)；
　　　　／／死循环，以保证采集过程一直进行，除非收到控
　　　　　　　　　　　／／制字“0”，才结束程序运行
　　return；
}
　　程序编制完成后形成可执行文件(本文为ada.exe)，并在Windows下右击该文件名，选择“属性”项，将程序运行属性设为“最小化”，并选择退出时关闭，以使Windows应用程序启用该线程对象时，不至于使Windows窗口被DOS运行窗口遮挡，并在终止该程序运行时能正常关闭DOS窗口。
2.2 Windows部分
　　本文使用Windows环境下的Borland C＋＋ Builder作为开发平台、以0.2s显示1次A／D通道5的采集数据和进行一次D／A转换为应用目的进行程序编制。
　　插入RDS控件：
＜OBJECT classid＝″clsidBD96C556－65A3－11D0－983A－
　00C04FC29E33″ ID＝ADC HEIGHT＝1 WIDTH＝ 1＞
＜／OBJECT＞
　　①在页面上插入RDS对象及相关的命令按钮(如“保存”与“取消”)。
2.2 使用HTML
　　在IE4.0后，Microsoft公司扩展了基本的HTML，使其与RDS结合，共同组成一个开发基于浏览器的数据库应用的基本框架。
周开利(北京理工大学五系97研100081)
汪云(北京理工大学五系97研100081)
参考文献
1，黄晓勇．Windows工业控制应用探讨．工业控制计算机，1997；（4）：25
2，何海波．数据采集软件开发中问题的分析．微计算机信息，1999；15（2）：27
3，袁志勇．用VC＋＋编写Windows硬件I／O接口程序．电脑 学习，1998；（6）：24
4，Telle M．Borland C＋＋ Builder高级编程指南．北京：中国 水利电力出版社，1998
收稿日期：1999－12－20
