微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000 Vol.19 No.3 P.19-20



32位Windows应用程序的实例检测技术
高升　邱湘茹　唐世伟　贾文举
　　摘　要：对32位Windows中的实例检测技术进行了研究,并对各种检测技术进行了对比。
　　关键词：应用程序实例 实例检测 API函数
　　多任务操作系统Windows允许用户同时运行多个程序,甚至对1个应用程序,也可以创建它在内存中的多个副本,将每个应用程序的1个内存副本称为实例。在一些实际系统中,经常要对实例进行控制,例如控制只启动应用程序的1个实例时,在进程中要检测是否已有1个实例启动。在16位Windows应用程序中,通过检测操作系统传送给WinMain函数的第2个参数hPrevInstance,来检测其它实例的存在。
　　<SCRIPT LANGUAGE=VBScript RUNAT=Server>
SUB Session_OnEnd
　　　　　Application.Lock
　　　　　Application（″Counter″）=Application（″Counter″）-1
　　　　　Application.Unlock
　　　　　Set userConnect=Application（″userConnect″）
　　　　　SQL=″DELETE FROM tblUser″
　　　　　SQL=SQL & ″WHERE userid=″ & Session.Ses-
　　　　　　　sionID &″;″
　　　　　userConnect.Execute（SQL）
　　END SUB
　　</SCRIPT>
　　4.Application_OnEnd事件
　　最后1个用户超时时退出应用并关闭数据库连接。然而在32位Windows中,hPrevInstance的值永远为假,它不能再作为判断应用程序实例是否存在的标志。Session对象以少量的事件和方法完成管理用户流程,系统级的用户跟踪和控制等状态管理任务。
1 窗口查找法
　　如果应用程序已经有1个实例在运行,那么通过调用FindWindow这个API函数可以检测到该实例的窗口句柄。FindWindow有2个参数:窗口类名称和窗口标题,前1个参数就是用API函数RegisterWindow注册窗口时使用的WNDCLASS窗口类的名称,在Delphi中,该参数就是应用程序主窗口的类名称。每当第一个用户请求页面时,IIS中的ISAPI过滤器处理请求的页面,执行其中的服务器端脚本,结果以标准HTML的形式返回给浏览器,同时激活global.asa中的Application_OnStart事件和Session_OnStart事件。Application_OnStart事件初始化应用的一系列公共变量,保存必要的公共环境信息,以备在本Application对象生存期的其它Session对象使用。
2.2 Application和Session对象的属性 方法 事件
　　Lock和Unlock Application对象的锁定和解锁方
　　　　　　　　　　　　　　法,用于避免多个用户同时修改同
　　　　　　　　　　　　　　一公共属性造成冲突,锁定后只允
　　　　　　　　　　　　　　许单个用户作修改操作!而Session_OnStart事件则保存了每个用户的私人环境,提供了识别新用户的第一次操作的功能,并且可用于初始化那些用于管理用户工作期的用户信息。Web站点管理员可以利用Cookie建立关于用户及其浏览特性的详细资料。由于用户数据库中存储了用户的信息,包括请求的书号,当用户暂时离开且在Session对象的工作期内返回该页时,IIS检索数据库即知用户请求了哪本书,而无需用户重新请求。
　　OnStart和OnEnd Application和Session对象装载
　　　　　　　　　　和终止时触发的事件
　　以上是标准属性、方法和事件,Application和Session对象允许自定义属性、方法和事件来管理复杂的HTTP状态。
　　//Test2.DPR
　　var hWnd:Thandle;
　　begin
　　　　　hWnd:=0;
　　　　　EnumWindProc（
　　　　　　　@MatchProc,
　　　　　　　LONGINT（@hWnd）
　　　　　）;
　　　　　if hWnd=0 then begin
　　　　　Application.CreateForm（
　　　　　TMyMainForm,
　　　　　MyMainForm
　　　　）;
　　　　Application.Run;
　　End.
　　//进行匹配的回调函数
　　function MatchProc（
　　　　　　hWndFromOS:THandle;
　　　　　　hMatchedWnd:^HWND）;
　　　　　　bool;
　　　　　　stdcall;
　　var str1,str2:string100;
　　begin
　　　　Result:=True;
　　　　//获得窗口类名称
　　　　GetClassName（
　　　　　　hWndFromOS,
　　　　　　PChar（str）,
　　　　　　100
　　　）;
　　　str1:=PChar（str）;
　　　if str1=′TmyMainForm′ then begin
　　　　　　//若窗口类名称匹配,则继续比较可执行文件名
　　　　　　GetModuleFileName（
　　　　　　　hInstance,
　　　　　　　PChar（str1）,
　　　　　　　100
　　　）;
　　　str1:=PChar（str1）;
　　　GetModuleFileName（
　　　　　GetWindowLong（
　　　　　　　HWndFromOS,
　　　　　　　GWL_HINSTANCE
　　　　　）,
　　　　　PChar（str2）,
　　　　　100
　　　）;
　　　str2:=PChar（str2）;
　　　if str1=str2 then begin
　　　　　hMatchedWnd^:=hWndFromOS;
　　　　　Result:=False;
　　　　end;
　　　end;
　　end;
　　上述匹配过程,除了像窗口查找法那样进行窗口类名称比较外,还比较应用程序可执行文件的名称,因而克服了窗口查找法的不足。即使在设计时刻的Delphi IDE环境内,也可以正常工作。当服务器向浏览器返回Web页时,同时将用户在当前服务器上的状态和环境作为1个Cookie写入客户机。当应用程序启动时,首先调用API函数CreateMutex,以某一名称（本文中为FirstInstance）创建1个互斥信号量,然后发出WaitForSingleObject API调用,如果互斥信号量没有被其它进程占用,则WaitForSingleObject立即返回;反之,如果互斥信号量已被其它进程占用,WaintForSingleObject会等待,直至互斥信号量被释放。
　　//Test3.DPR
　　var hMutex:THandle;
　　begin
　　　　hMutex:=CreateMutex（
　　　　　　　　　nil,
　　　　　　　　　False,
　　　　　　　　′FirstInstance′
　　　　）;
　　　　if WaitForSingleObject（hMutex,0）<>
　　　　　wait_timeout then begin
　　　　　　　　　Application.CreateForm（
　　　　　　　　　　′TMyMainForm′,
　　　　　　　　　　MyMainForm）;
　　　　　　　　　Application.Run;
　　　　end;
　　end.
　　本文给出的若干种实例检测方法虽然是以Delphi给出的,但对其它平台开发的32位Windows程序也可借鉴。
高升（大庆石油学院计算机科学系151400）
邱湘茹（大庆石油学院计算机科学系151400）
唐世伟（大庆石油学院计算机科学系151400）
贾文举（大庆石油学院计算机科学系151400）
收稿日期：1999-09-10
