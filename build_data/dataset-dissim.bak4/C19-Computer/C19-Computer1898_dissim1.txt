微型机与应用
WEIXINGJI YU YINGYONG
2000　Vol.19　No.5　P.14-15,16




在Visual Basic程序中调用Fortran动态链接库的方法
鲜飞军杨合
摘 要：用于VB应用程序的Fortran动态链接库及在Visual Basic应用程序中调用Fortran动态链接库的方法，给出了具体的应用程序示例。
关键词：动态链接库DLL Visual Basic语言 Fortran语言 可视化
　　Fortran语言以其清楚的结构层次、强大的数值计算与数学分析能力，而广泛应用于数学与工程计算。特别适用于编制具有模块化结构的大型计算程序，如有限元数值模拟软件。软件的可视化，一般包括界面操作、数据输入与数据输出的可视化。可视化编程是现代计算与分析软件设计的重要发展方向之一，直接关系到应用程序的使用效果。有些函数的调用方式又比较特殊，对一般编程者而言很难理解，再加上注册表本身很庞杂，操作不慎会使机器崩溃。
　　Visual Basic语言（以下简称为VB）以其能迅速有效地编制优良的交互界面设计性能，被越来越广泛地应用于Windows环境下系统的可视化界面设计。VB具有简单、易学易用的特点，它所提供的对象链接与嵌入（OLE，Object Linking and Embeding）工具，为利用其它软件进行数据的可视化处理提供了方便。VB的缺点在于运算速度慢，不适合进行大型数值计算。但由于Win32 API函数一般是为C／C＋＋编程人员编写的，文档采用了C语言的数据结构，在其它语言中无法将其一一对应。二种语言结合的关键是建立用于VB应用程序的Fortran动态链接库（DLL，Dynamic Link Library）。
3 源代码清单
　　′声明部分
　　Private Declare Function RegCreateKey Lib ″advapi32．dll″＿ 
　　　Alias ″RegCreateKeyA″（ByVal hKey As Long，＿ 
　　　ByVal lpSubKey As String，phkResult As Long）As Long
　　　　　　　　　　　　　　　　　　　　　　　　　　＇创建键
　　Private Declare Function RegOpenKey Lib ″advapi32．dll″＿ 
　　　Alias ″RegOpenKeyA″（ByVal hKey As Long，＿ 
　　　ByVal lpSubKey As String，phkResult As Long）As Long
　　　　　　　　　　　　　　　　　　　　　　　　　 ′打开键
　　Private Declare Function RegQueryValue Lib ″advapi32．dll″＿ 
　　　Alias ″RegQueryValueA″（ByVal hKey As Long，＿ 
　　　ByVal lpSubKey As String，ByVal lpValue As String，＿ 
　　　lpcbValue As Long）As Long
　　Private Declare Function RegQueryValueEx Lib ″
　　　advapi32．dll″Alias ″RegQueryValueExA″（ByVal hKey
　　　As Long，ByVal lpValueName As String，ByVal lpReserved
　　　As Long，lpType As Long，lpData As Any，lpcbData
　　　As Long）As Long ′读键值
　　Private Declare Function RegSetValue Lib ″advapi32．dll″ 
　　　Alias ″RegSetValueA″（ByVal hKey As Long，ByVal
　　　lpSubKey As String，ByVal dwType As Long，ByVal
　　　lpData As String，ByVal cbData As Long）As Long
　　Private Declare Function RegSetValueEx Lib ″advapi32．dll″
　　　Alias ″RegSetValueExA″（ByVal hKey As Long，ByVal
　　　lpValueName As String，ByVal Reserved As Long，
　　　ByVal dwType As Long，lpData As Any，ByVal
　　　cbData As Long）As Long ′设键值
　　Private Declare Function RegDeleteValue Lib ″advapi32．dll″ 
　　　Alias ″RegDeleteValueA″（ByVal hKey As Long，
　　　ByVal lpValueName As String）As Long 　　　′删键值
　　Private Declare Function RegDeleteKey Lib ″advapi32．dll″
　　　Alias ″RegDeleteKeyA″（ByVal hKey As Long ByVal
　　　lpSubKey As String）As Long　　　 　　　　′删除键
　　Private Declare Function RegCloseKey Lib ″advapi32．dll″ 
　　　（ByVal hKey As Long）As Long　　　　　　　′关闭键
　　Const HKEY＿CLASSES＿ROOT＿＆H80000000
　　Const HKEY＿CURRENT＿CONFIG＝＆H80000005
　　Const HKEY＿CURRENT＿USER＝＆H80000001
　　Const HKEY＿LOCAL＿MACHINE＝＆H80000002
　　Const HKEY＿USERS＝＆H80000003
　　Const HKEY＿DYN＿DATA＝＆H80000006
　　′注册表读写函数
　　Public Function RegCRWDkey（ByVal Mode As String），
　　　ByVal strhKey As String，Optional ByVal subKey
　　　As String＝″″， Optional ByVal keyvalueName As String＝″″，
　　　Optional keyValue As String＝″″）As Integer
　′定义变量
　　Dim hKey As Long　　　 ′根键常数变量
　　　Dim retValue As Long　　′返回值
　　　Dim keyId As Long 　　　′子键序列号
　　　Dim bufSize As Long 　　′键值区大小
　　　Dim subKey1 As String 　′主键
　　　Dim subKey2 As String 　′子键
　　　Dim N，NTemp
　　　′检查根键的正确性
　　　Select Case UCase（TrimstrhKey））
　　　Case Is＝″HKEY＿CLASSES＿ROOT″
　　　　hKey＝HKEY＿CLASSES＿ROOT
　　　Case Is＝″HKEY＿CURRENT＿USER″
　　　　hKey＝HKEY＿CURRENT＿USER
　　　Case Is＝″HKEY＿LOCAL＿MACHINE″
　　　　hKey＝HKEY＿LOCAL＿MACHINE
　　　Case Is＝″HKEY＿USERS″
　　　　hKey＝HKEY＿USERS
　　　Case Is＝″HKEY＿CURRENT＿CONFIG″
　　　　hKey＝HKEY＿CURRENT＿CONFIG
　　　Case Is＝″HKEY＿DYN＿DATA″
　　　　hKey＝HKEY＿DYN＿DATA
　　　Case Else
　　　　RegCRWDkey＝2 ′根键错返回2
　　　　Exit Function
　　End Select
　　′分离主键与子键
　　If keyvalueName＝″ ″ Then　　　 ′读默认键值时有用
　　　N＝InStr（subKey，″＼″）
　　　Do While True
　　　　NTemp＝InStr（N＋1，subKey，″＼″）
　　　　If NTemp＝0 Then
　　　　　Exit Do
　　　　Else N＝NTemp
　　　End If
　　Loop
　　If N＝0 Then
　　　subKey1＝″ ″ 　　　′对于一级子键，其主键设为空串
　　Else
　　　subKey1＝Left（subKey，N－1）
　　End If
　　　subKey2＝Right（subKey，Len（subKey）－N）
　　End If
　　′根据Mode进行相应操作
　　Select Case UCase（Trim（Mode））
　　　Case Is＝″C″　　　 ′创建子键
　　　　retValue＝RegCreateKey（hKey，subKey，keyId）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝3Exit Func－
　　　　　　　　　　　　　　　　　　　tion ′返回错误码
　　　Case Is＝″R″ 　　　′读键值
　　　　If keyvalueName＝″ ″Then ′读默认键值
　　　　retValue＝RegOpenKeyhKey，subKey1，keyId
　　　　　　　　　　　　　　　　　　　 ′打开键，取得keyId
　　　If retValue＜＞ 0 Then RegCRWDkey＝4：Exit Function
　　　retValue＝RegQueryValue（keyId，subKey2，″″，bufSize）
　　　keyValue＝String（bufSize，″″）′取得bufSize，设定 
　　　　　　　　　　　　　　　　　　　′keyValue大小
　　　retValue＝RegQueryValue（keyId，subKey2，keyValue，
　　　　　　　　bufSize）
　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit Function
　　　keyValue＝Left（keyValue，bufSize－1）
　　Else 　　　′读普通键值
　　　retValue＝RegOpenKey（hKey，subKey，keyId）
　　　If retValue＜＞ 0 Then RegCRWDkey＝4：Exit Function
　　　retValue＝RegQueryValueEx（keyId，keyvalueName，＿ 
　　　　　　　　0＆，1，0＆，bufSize）
　　　If bufSize＝0 Then RegCRWDkey＝5：Exit Function
　　　keyValue＝String（bufSize，″″）
　　　retValue＝RegQueryValueEx（keyId，keyvalueName，＿ 
　　　　　　　　0＆，1，ByVal keyValue，bufSize）
　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit Function
　　　keyValue＝Left（keyValue，bufSize－1）
　　End If
　　Case Is＝″W″ ′写键值
　　　If keyvalueName＝″ ″Then 　　　　′写默认键值
　　　　retValue＝RegOpenKey（hKey，subKey1，keyId）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝4：Exit Function
　　　　bufSize＝Len（keyValue）＋1
　　　　retValue＝RegSetValue（keyId，subKey2，1，keyValue，
　　　　　　　　　bufSize）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit Function
　　　Else 　　　　　′写普通键值
　　　　retValue＝RegOpenKey（hKey，subKey，keyId）
　　　　If retValue＜＞0 Then RegCRWDkey＝4：Exit Function
　　　　bufSize＝Len（keyValue）＋1
　　　　retValue＝RegSetValueEx（keyId，keyvalueName，＿
　　　　　　　　0＆，1，ByVal keyValue，bufSize）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit　Function
　　　End If
　　Case Is＝″D″　　　　 ′删除子键或键值
　　　retValue＝RegOpenKey（hKey，subKey，keyId）
　　　If retValue＜＞ 0 Then RegCRWDkey＝4：Exit Function
　　　If keyvalueName＝″ ″Then ′键值名为空串，则删除子键
　　　　retValue＝RegDeleteKey（hKey，subKey）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit Function
　　　Else
　　　　retValue＝RegDeleteValue（keyId，keyvalueName）
　　　　If retValue＜＞ 0 Then RegCRWDkey＝3：Exit Function
　　　End If
　　Case Else
　　　RegCRWDkey＝1：Exit Function　　　 ′Mode错返回1
　　End Select
　　retValue＝RegCloseKey（keyId） ′结束前关闭键
　　If retValue＜＞ 0 Then RegCRWDkey＝6：Exit Function 
　　　　　　　　　　　　　　　　　　　　′关闭键错返回6
　　　RegCRWDkey＝0 ′调用成功返回0
　　End Function
4 实 例
　　下面介绍如何在注册表中存取应用程序上次执行时的窗体尺寸。因此我们设计了一个VB的自定义函数RegCRWDKey，作为一个标准模块可添加到任何一个应用程序中。为此，本文探讨了Fortran动态链接库的创建与调用方法，最后给出了应用示例。

图1 注册表
2 API函数读写注册表的一般过程
　　（1）使用RegOpenKey或RegCreateKey打开或创建1个键。启动时读出窗口大小，若无则新建。子程序或函数过程名与别名中不要用下划线字符“＿”。
　　注意：对注册表的操作必须正确无误，否则后果不堪设想!表1为操作一览表!DEC＄ATTRIBUTES ALIAS：′过程别名′：：子程序或函数
　　　　　　　　　　　　　　　　过程名
　　　输入参数类型，INTENT（IN）：：输入参数表
　　　输出参数类型，INTENT（OUT）：：输出参数表
2 VB应用程序调用Fortran动态链接库的方法
2．1 Fortran动态链接库子程序或函数过程的声明
　　由于Fortran动态链接库中的子程序或函数过程相对于VB系统而言是外部过程，因而在调用之前必须向VB声明该过程的一些信息，以便编译器能找到该过程，并生成正确的调用接口。
　　存储在Fortran动态链接库中的子程序或函数过程需要在全局模块或表格级模块中声明，下面是声明的格式。
关键词：注册表 API函数 VB函数 模块
　　Win95／98／NT的注册表数据库（Registry）是系统中非常重要的组成部分。
　　在VB中，参数的传递方式有值方式（By Value）和引用方式（By Reference）。若按值方式传递，则在参数前加上“ByVal”关键字；若按引用方式传递，则无需加此关键字。在调用Fortran动态链接库时，要注意VB应用程序中的参数类型与Fortran动态链接库被调用子程序或函数过程的参数类型保持一致。表1给出了基本的Fortran语言数据类型及其对应的VB应用程序的数据类型。
表1 基本数据类型对照表
Fortran语言Visual Basic
IntegerI As Integer
RealR As Single
Bouble PrecisionD As Double
Complex-
LogicalL As Boolean
CharacterBy Val S As String

2．2 Fortran动态链接库子程序或函数过程的调用
　　在全局模块或表格级模块中声明Fortran动态链接库中子程序或函数过程以后，VB应用程序就可以随意调用库中任意子程序或函数过程了。调用的主要步骤如下：
　　（1）先定义被调用子程序或函数过程参数的类型；
　　（2）给子程序或函数过程中的输入参数赋值；
　　（3）用Call语句调用，调用格式如下：
　　Call子程序或函数过程名（实参，…）
　　其中：当无参数时，省略括号。
3 程序示例
　　为了全面说明创建Fortran动态链接库及VB应用程序调用Fortran动态链接库的方法与步骤，下面给出了1个简单应用程序示例。程序的功能是：VB提供数据输入、输出及操作界面；Fortran动态链接库子程序完成2个实数的求和。下面是示例程序及其创建过程。
　　该函数运行环境为：Pentium级以上机器；Win95／98平台，VB5．0、VB6．0。
　　（2）建立1个命名为Example．FOR的Fortran源程序，并加到此工程。
　　Example．FOR源程序：
　　Subroutine FortranDll（r1，r2，Add）
　　　！DEC＄ ATTRIBUTES DLLEXPORT：：FortranDll
　　　！DEC＄ ATTRIBUTES ALIAS：′FortranDll′：：FortranDll
　　　REAL，INTENT（IN）：：r1，r2
　　　REAL，INTENT（OUT）：：Add
　　　Add＝r1＋r2
　　End Subroutine
　　（3）建造Fortran动态链接库文件Example．DLL。
　　（4）在VB5．0中文企业版环境下启动1个新的工程，建立1个新的窗体，窗体及控件的属性如表2所示，编写的程序代码如下：
表2 窗体与控件属性描述
控件类型属性属性值
窗体Name  CaptionfrmExample VB调用Fortran语言DLL示例程序
标签Name  Caption1b1Inputr1输入r1:
文本框Name  TexttxInputr1
标签Name  Caption1binputr2输入r2:
文本框Name  Captiontxinputr2
标签Name  Text1b1Output输入r1+r2
文本框Name  TexttxtOutput
命令按钮Name  CaptioncmdAdd求和
命令按钮Name  CaptioncmdExit退出

　　Example．FRM源程序：
　　Dim r1，r2 as single
　　Dim Add as single
　　Private Sub cmdAdd＿click（）
　　　r1＝Val（txtInputr1．Text）
　　　r2＝Val（txtInputr2．Text）
　　　Call FortranDll（r1，r2，Add）
　　　txtOutput．Text＝Str（Add）
　　End Sub
　　Private Sub cmdExit＿Click（）
　　　End
　　End Sub
　　（5）在该工程下添加1个模块，编写程序代码。
　　Example．BAS源程序：
　　Declare Sub FortranDll Lib ″D＼Fortran＼Example＼Example．DLL″（r1 as Single，r2 as Single，Add as Single）
　　（6）生成Example．EXE文件。
　　在Windows环境下运行Example．EXE，生成如图1所示的界面。输入实数r1、r2的值，单击“求和”按钮，可获得二数之和；单击“退出”按钮，结束程序运行。

图1 VB调用Fortran动态链接库示例程序运行情况
4 结束语
　　通过Visual Basic与Fortran动态链接库的结合来实现基于VB与Fortran语言的可视化混合编程，可充分利用VB方便快速的界面开发与Fortran语言强大的数值计算能力。本文介绍的创建Fortran动态链接库并在VB应用程序中调用Fortran动态链接库的方法，为基于VB与Fortran语言可视化混合编程提供了一种简单可行的方法。
鲜飞军（西北工业大学材料科学与工程学院542信箱710072）
杨合（西北工业大学材料科学与工程学院542信箱710072）
参考文献
［1］潭浩强，田淑清．FORTRAN语言－FORTRAN77结构化程 序设计．北京：清华大学出版社，1990
［2］蔡青，高光焘．CAD／CAM系统的可视化集成化智能化网 络化．西安：西北工业大学出版社，1996
［3］崔俊芝．现代有限元软件方法．北京：国防工业出版社，1995
［4］胡衡江，蔡寒阳．Windows下VB调用C动态链接库．微型 机与应用，1997；16(3)
［5］贾宏宇，赵俊峰．VB应用程序中用户自定义动态链接库 的关键技术．计算机系统应用，1998；(5)
［6］王向阳．如何在Visual Basic应用程序中调用动态链接 库．微型机与应用，1999；18(1)
收稿日期：1999－12－06
